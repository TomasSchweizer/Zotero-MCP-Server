{
    "item_keys": [
        "XQEGRYSR",
        "C2UWQK9U",
        "IFTV6JH8",
        "6IWV3FPC",
        "UMM2XZT3"
    ],
    "retrieved_items_content": [
        {
            "itemKey": "XQEGRYSR",
            "itemTitle": "01 Filter dates and numbers",
            "itemContent": "<div data-schema-version=\"9\"><h1>01 Filter dates and numbers</h1>\n<h2>Data Types</h2>\n<ul>\n<li>\n<p><strong>String:</strong></p>\n<ul>\n<li>\nOrdered sequence of characters (letters, numbers, symbols).\n</li>\n<li>\nExample: usernames (analyst10).\n</li>\n<li>\nCannot perform mathematical operations.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Numeric:</strong></p>\n<ul>\n<li>\nData consisting of numbers.\n</li>\n<li>\nExample: login attempt counts.\n</li>\n<li>\nMathematical operations are allowed (addition, multiplication, etc.).\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Date and Time:</strong></p>\n<ul>\n<li>\nData representing a date and/or time.\n</li>\n</ul>\n</li>\n</ul>\n<h2>Filtering Numeric and Date/Time Data</h2>\n<ul>\n<li>\n<p>Security analysts frequently query numbers and dates.</p>\n<ul>\n<li>\nExamples: patch dates, login attempts.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Operators:</strong></p>\n<ul>\n<li>\nEquals (=)\n</li>\n<li>\nGreater than (&gt;)\n</li>\n<li>\nLess than (&lt;)\n</li>\n<li>\nNot equal to (!= or &lt;&gt;)\n</li>\n<li>\nGreater than or equal to (&gt;=)\n</li>\n<li>\nLess than or equal to (&lt;=)\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Example: Filtering Login Attempts After 6 PM</strong></p>\n<ul>\n<li>\n<p>SQL Query:</p>\n<p>SQL</p>\n<pre>SELECT *\nFROM log_in_attempts\nWHERE time &gt; '18:00';\n</pre>\n</li>\n<li>\n<p>Explanation:</p>\n<ul>\n<li>\nSelects all columns from the <code>log_in_attempts</code> table.\n</li>\n<li>\nFilters results to include only records where the <code>time</code> column is greater than (later than) '18:00' (6 PM).\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>BETWEEN Operator:</strong></p>\n<ul>\n<li>\nFilters for values within a specified range (numbers or dates).\n</li>\n<li>\n<p><strong>Example: Filtering Patches by Date Range</strong></p>\n<ul>\n<li>\n<p>SQL Query:</p>\n<p>SQL</p>\n<pre>SELECT *\nFROM machines\nWHERE OS_patch_date BETWEEN '2021-03-01' AND '2021-09-01';\n</pre>\n</li>\n<li>\n<p>Explanation:</p>\n<ul>\n<li>\nSelects all records from the <code>machines</code> table.\n</li>\n<li>\nFilters results to include only records where the <code>OS_patch_date</code> is between March 1, 2021, and September 1, 2021.\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Quotation Marks:</strong></p>\n<ul>\n<li>\nStrings, dates, and times require quotation marks in filters.\n</li>\n<li>\nNumbers do not require quotation marks.\n</li>\n</ul>\n</li>\n</ul>\n</div>"
        },
        {
            "itemKey": "C2UWQK9U",
            "itemTitle": "03a_configure_board",
            "itemContent": "Lab: Configure a Company-managed Kanban Board\nEstimated time: 25 minutes\nIn this lab, you will:\n1. Move issues through a workflow.\n2. View the default kanban workflow.\n3. View the board's current column configuration.\n4. Add a Review column to the board.\n5. Verify that your Review column is working.\n6. Configure board cards.\nNote: These instructions assume you have created a projectA  company-managed kanban project\nwith issues.\n1: Move issues through a workflow.\n1. Log into Jira (if necessary). https://[your site name].atlassian.net\n2. Navigate to your projectA  project. This is your company-managed kanban project. These\ninstructions DO NOT APPLY to team-managed projects.\n3. Click on the Kanban board tab in the sidebar to view your board (if necessary, click the Back to\nproject link first). This board was automatically created when you created the project and selected\nKanban for the project template.\n4. You should see three issues on the board from the previous company-managed kanban lab.\n5. Drag issues to new columns.\n6. Click on an issue to open its details. Notice that the dropdown value in the upper right matches the\nname of the column on the board. This is the Status field value of the issue. Change the status\nvalue. Close the issue details and notice that your issue has changed columns on the board.\n7. Again view an issue's details. Notice that the Assignee field is Unassigned . Click on the\nUnassigned  value and select Assign to me. This lets the team know that you are responsible for\nworking on the issue in this status. Close the issue details and notice that your user avatar appears\nwith the issue on the board.\nCongratulations, you have moved issues through a workflow, both by dragging and dropping and by\nchanging the issue's status field value.\n2: View the default kanban workflow.\n1. While viewing your projectA  project, click on the Project settings tab in the sidebar. The scope\nof these settings is limited to the project.\n2. Click on the Workflows tab in the sidebar to view the workflow(s) for your project.\n3. You should see one workflow. Click on the (View as) diagram link to view the workflow. Notice that\nthe workflow contains the four default statuses of projects created with the kanban template. Also\nnotice that when you create an issue, its status will automatically be set to Backlog  (as indicated\nby the circle pointing to it). The All  boxes means that all of the other statuses in the workflow can\ntransition to this status.\n4. Close the workflow diagram.\nCongratulations, you have viewed a diagram of the default kanban workflow.\n3: View the board's current column configuration.\nNote: The set of columns on a kanban board are related to the workflow that your issues go through.\nTo add a column with a new status, you must be a project administrator for the project.\n1. (You can skip this step if you are on the free plan, because all users of a site are project\nadministrators for all projects.) Add yourself as a project administrator for the project:\nWith your project selected, click Project settings.\nSelect People.\n(If the \"Add people\" button is disabled, you are on the free plan and can skip this step) Click\nAdd people and add yourself (begin typing in your name) with a role of Administrators .\n2. Navigate out of project settings and view the kanban board for the project.\n3. Click the ... (more) button in the upper right and select Board settings.\n4. Click the Columns tab.\n5. Notice that the four columns of the board are shown in the order that they appear on the board.\n6. Below the horizontal bar in each column, you should see the workflow status name for the column.\nThe color of the status name represents the category of the status. The BACKLOG  and SELECTED\nFOR DEVELOPMENT  status names are gray, which means that issues with these statuses have a\ncategory of To Do . The IN PROGRESS  status name is blue, indicating that issues with this status\nhave a category of In Progress . The DONE  status name is green, indicating that issues with this\nstatus have a category of Done .\nCongratulations, you have viewed the board's current configuration.\n4: Add a Review  column to the board.\n1. Under the Columns tab of your board settings, verify that the Add status button is enabled. Even\nthough we won't click this button directly in this lab, you need to have the permissions to add a\nstatus to the workflow. If the Add status button is not enabled, you need to add yourself as a project\nadministrator for the project. These steps do not apply if you are using the free plan.\nWith your project selected, click Project settings.\nClick People.\nClick Add people and add yourself (type in your email address to find yourself) with a role of\nAdministrators .\nNavigate back to the board settings for your board and verify that the Add status button is\nnow enabled.\n2. Under the Columns tab of your board settings, click the Add column button.\n3. In the Add column window, name the column Review  and specify a category of In Progress .\nClick Add to add the column to the board.\n4. You should now see the Review  column before the Done  column. Below the blue bar, you should\nsee that Jira has created a REVIEW  status for you, matching the name of your column. The text of\nthe REVIEW  status is blue, indicating that the category for the REVIEW  status is In Progress . In\nthe REVIEW  status, the Set resolution checkbox should remain UNCHECKED. Checking this would\nset an issue's resolution  field when it is moved to the Review  status. We don't want to check\nthis, because checking it would mean that issues in this status were resolved or closed.\n5. Click the Back to board link in the upper right. You should see the Review  column on your board.\nCongratulations, you have added a column to your board.\n5: Verify that your Review  column is working.\n1. On your board, drag issues to the Review  column.\n2. View an issue's details and change the Status to and from a value of Review . The issue should\nmove to the new column on the board.\n3. From the board, open any issue. In the dropdown in the upper right, change the status of an issue to\nDone . Notice that a checkmark and Done indicator are shown next to the status. This indicates that\nthe Resolution  field is set to Done . Change the status to Review . Notice that the Done\ncheckmark and indicator are gone. This is because we didn't check the Set resolution checkbox\nwhen configuring the Review  column. The Resolution  field is cleared.\n4. Using the same procedure that you used earlier, view the workflow diagram under Project settings.\nYou should see the Review  status. You should also see that all other statuses are allowed to\ntransition to Review . Jira added this status to the workflow when you added the Review  column.\nThe actual order of the statuses in this diagram does not matter, since all statuses are allowed to\nfreely transition to other statuses. The order on a board is specified in board settings.\n5. Navigate back to your board.\nCongratulations, you have verified that your Review  column is working.\n6: Configure board cards.\n1. View a card on your board and identify all of the fields that are displayed.\n2. Add the created  field to the cards, which will display the date and time that the issue was created:\nUnder the Card layout tab of your board settings, add the Created  field to the cards. Click\nthe Add button.\n3. View your board. You should see the created date on all cards.\n4. Use the Card colors tab of board settings to show a vertical color bar based on the issue's\nassignee:\nChange the Colors based on  field to Assignees .\nView your board.\n5. Undo the previous two changes to the cards on your board.\nCongratulations, you have configured board cards and completed this lab.\nCopyright \u00a9 2021 Atlassian\n"
        },
        {
            "itemKey": "IFTV6JH8",
            "itemTitle": "03 Kanban and Agile Planning Tools",
            "itemContent": "<div data-schema-version=\"9\"><h1>03 Kanban and Agile Planning Tools</h1>\n<h2>Kanban Board</h2>\n<p>A Kanban board is a visual tool used to track work items and their progress. It typically consists of multiple columns, also known as pipelines, that represent different stages of the workflow.</p>\n<p><img alt=\"\" data-attachment-key=\"89SNVF9G\" width=\"776\" height=\"595\"></p>\n<h2>Default Pipelines in ZenHub</h2>\n<p><img alt=\"\" data-attachment-key=\"6KVPXR5E\" width=\"1306\" height=\"441\"></p>\n<p>ZenHub is a Kanban board tool that integrates with GitHub. It provides the following default pipelines:</p>\n<ul>\n<li>\n<strong>New Issues:</strong> This is like an inbox for new work items.\n</li>\n<li>\n<strong>Icebox:</strong> This is for long-term storage of work items that are not planned to be worked on in the near future.\n</li>\n<li>\n<strong>Product Backlog:</strong> This contains all the work items that have not yet been planned for a sprint.\n</li>\n<li>\n<strong>Sprint Backlog:</strong> This contains the work items that are planned to be completed in the current sprint.\n</li>\n<li>\n<strong>In Progress:</strong> This contains the work items that are currently being worked on.\n</li>\n<li>\n<strong>Review/QA:</strong> This contains the work items that are ready for review and testing.\n</li>\n<li>\n<strong>Done:</strong> This contains the work items that have been completed.\n</li>\n</ul>\n<h3>Workflow</h3>\n<p>Work items typically move from left to right across the Kanban board as they progress through the workflow. New work items are added to the \"New Issues\" pipeline, and then they are moved to the appropriate pipeline based on their status. Once a work item is completed, it is moved to the \"Done\" pipeline.</p>\n<h2>Benefits of Using a Kanban Board</h2>\n<p>Kanban boards can be beneficial for a number of reasons, including:</p>\n<ul>\n<li>\n<strong>Improved visibility:</strong> Kanban boards provide a clear and visual way to see the status of all work items.\n</li>\n<li>\n<strong>Increased efficiency:</strong> Kanban boards can help to identify and eliminate bottlenecks in the workflow.\n</li>\n<li>\n<strong>Improved communication:</strong> Kanban boards can help to improve communication and collaboration among team members.\n</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Kanban boards are a valuable tool for managing work and improving workflow. They are simple to use and can be adapted to fit a variety of needs.</p>\n</div>"
        },
        {
            "itemKey": "6IWV3FPC",
            "itemTitle": "06 Other File Types",
            "itemContent": "<div data-schema-version=\"9\"><h1>06 Other File Types</h1>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Big data systems sometimes use other file formats in addition to text, Avro, Parquet, and ORC. Two common options are </span></span><em><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">SequenceFiles&nbsp;</span></span></em><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">and </span></span><em><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">RCFiles</span></span></em><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">. We generally do not recommend using these file formats.</span></span></p>\n<h2><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Sequence Files</span></span></h2>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">The SequenceFile format was developed for big data systems as an alternative to text files. SequenceFiles store key-value pairs in a binary container format. They store data more efficiently than text files, and they can store binary data like images.&nbsp;</span></span></p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">However, the SequenceFile format is closely associated with the Java programming language, and it is not widely supported outside the Hadoop ecosystem.&nbsp;</span></span></p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Overall, SequenceFiles offer good performance but poor interoperability.</span></span></p>\n<h2><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">RCFiles</span></span></h2>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">RCFile, which stands for Record Columnar File, is a columnar file format that was developed for use with Hive. RCFile is also supported by some other tools, including Impala, but this support is limited. The RCFile format stores all data as strings, which is inefficient.</span></span></p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Overall, RCFile offers poor performance and limited interoperability.</span></span></p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">The ORC file format (described in the previous reading) is an improved version of RCFile with superior performance.</span></span></p>\n<p></p>\n</div>"
        },
        {
            "itemKey": "UMM2XZT3",
            "itemTitle": "16 Legends",
            "itemContent": "<div data-schema-version=\"9\"><h1>16 Legends</h1>\n<p>Legends help in interpreting plots with multiple data types (lines, bars, points, etc.).Basic legend: Use <code>label=\"Legend Name\"</code> in plot functions and call <code>ax.legend()</code>.</p>\n<h2>Customizing Legends</h2>\n<p>Legends can be created using specific <code>Artist</code> objects (e.g., <code>line, = ax.plot(x, y1)</code>). Pass a list of <code>Artist</code> objects and corresponding labels to <code>ax.legend()</code>. Also we can add a title with <code>title=\"My Legend\"</code> in <code>ax.legend()</code>.</p>\n<pre>fig, ax = plt.subplots()\n(line1,) = ax.plot(x, y1)\n(line2,) = ax.plot(x, y2)\nscatter = ax.scatter(x, y3, color=\"black\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.legend([scatter, line1, line2], [\"Data\", \"Model 1\", \"Model 2\"], title=\"My Legend\")</pre>\n<p><img alt=\"\" data-attachment-key=\"ILUMAFAG\" width=\"1134\" height=\"865\"></p>\n<h2>Location of Legend</h2>\n<p>Use <code>loc=\"lower right\"</code>, <code>loc=\"upper center\"</code>, etc. to reposition legends</p>\n<pre>ax.legend([scatter, line1, line2], [\"Data\", \"Model 1\", \"Model 2\"], loc=\"lower right\")</pre>\n<p>Use <code>frameon=False</code> in <code>ax.legend()</code>to remove the frame of the legend and for example use ncol for horizontal legends:</p>\n<pre>ax.legend(\n &nbsp; &nbsp;[scatter, line1, line2],\n &nbsp; &nbsp;[\"Data\", \"Model 1\", \"Model 2\"],\n &nbsp; &nbsp;loc=\"upper center\",\n &nbsp; &nbsp;frameon=False,\n &nbsp; &nbsp;ncol=3,\n)</pre>\n<p><img alt=\"\" data-attachment-key=\"3CZVKVV9\" width=\"1134\" height=\"865\"></p>\n<p>We can also place legends outside of the Axes using for example <code>bbox_to_anchor=(1,1)</code> with <code>loc=\"upper left\u201d</code> and adjust padding with <code>borderaxespad</code>. Removing also the bounding box with <code>frameon=False</code> &nbsp; </p>\n<pre>ax.legend(\n &nbsp; &nbsp;[scatter, line1, line2],\n &nbsp; &nbsp;[\"Data\", \"Model 1\", \"Model 2\"],\n &nbsp; &nbsp;bbox_to_anchor=(1, 1),\n &nbsp; &nbsp;loc=\"upper left\",\n &nbsp; &nbsp;borderaxespad=0,\n &nbsp; &nbsp;frameon=False\n)</pre>\n<p><img alt=\"\" data-attachment-key=\"7X25CYYF\" width=\"1344\" height=\"865\"></p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Similarly, we could place the legend on top of the plot, centered (</span></span><code>bbox_to_anchor=(0.5, 1)</code><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">&nbsp;and&nbsp;</span></span><code>loc='lower center'</code><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">), with a horizontal orientation (</span></span><code>ncol=3</code><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">)</span></span></p>\n<p><img alt=\"\" data-attachment-key=\"Y2Y3LTCG\" width=\"1134\" height=\"915\"></p>\n<h2>Shared legends across subplots</h2>\n<p>Instead of adding legends to each subplot, use <code>fig.legend()</code> for a single legend across all subplots. In out example use<code>fig.legend([scatter, line1, line2], [\"Data\", \"Model 1\", \"Model 2\"])</code>.</p>\n<pre>fig, axs = plt.subplots(2, 2)\n\n\ndef myplot(ax, x, y1, y2, y3):\n &nbsp; &nbsp;(line1,) = ax.plot(x, y1)\n &nbsp; &nbsp;(line2,) = ax.plot(x, y2)\n &nbsp; &nbsp;scatter = ax.scatter(x, y3, color=\"black\")\n &nbsp; &nbsp;ax.set_xlabel(\"x\")\n &nbsp; &nbsp;ax.set_ylabel(\"y\")\n &nbsp; &nbsp;return [line1, line2, scatter]\n\n\nfor ax in axs.flatten():\n &nbsp; &nbsp;line1, line2, scatter = myplot(ax, x, y1, y2, y3)\n\nfig.tight_layout()\n\nfig.legend(\n &nbsp; &nbsp;[scatter, line1, line2],\n &nbsp; &nbsp;[\"Data\", \"Model 1\", \"Model 2\"],\n &nbsp; &nbsp;bbox_to_anchor=(1, 0.5),\n &nbsp; &nbsp;loc=\"center left\",\n &nbsp; &nbsp;borderaxespad=0,\n &nbsp; &nbsp;frameon=False,\n)</pre>\n<p><img alt=\"\" data-attachment-key=\"KZQ35MKK\" width=\"1499\" height=\"939\"></p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">A figure legend can even contain content from multiple plots:</span></span></p>\n<pre>fig, axs = plt.subplots(2, 2)\n\n(line1,) = axs[0, 0].plot(x, y1, color=\"red\")\n(line2,) = axs[0, 1].plot(x, y2, color=\"blue\")\nscatter = axs[1, 0].scatter(x, y3, color=\"black\")\n\nfig.tight_layout()\n\nfig.legend(\n &nbsp; &nbsp;[scatter, line1, line2],\n &nbsp; &nbsp;[\"Data\", \"Model 1\", \"Model 2\"],\n &nbsp; &nbsp;bbox_to_anchor=(1, 0.5),\n &nbsp; &nbsp;loc=\"center left\",\n &nbsp; &nbsp;borderaxespad=0,\n &nbsp; &nbsp;frameon=False,\n)</pre>\n<p><img alt=\"\" data-attachment-key=\"59Z9SPIQ\" width=\"1499\" height=\"940\"></p>\n<h2>Multiple legends on the same Axes</h2>\n<p>To add multiple legends to the same axes, we can manually add a second legend.<br>Calling <code>ax.legend()</code> multiple times replaces the previous one. Therefore use <code>ax.add_artist(legend2)</code> to manually add a second legend.</p>\n<pre>fig, ax = plt.subplots()\n(line1,) = ax.plot(x, y1)\n(line2,) = ax.plot(x, y2)\nscatter1 = ax.scatter(x, y3, color=\"black\")\nscatter2 = ax.scatter(x, y3 + 1, color=\"orange\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\n\nlegend1 = ax.legend(\n &nbsp; &nbsp;[line1, line2], [\"Line 1\", \"Line 2\"], title=\"Line Plots\", loc=\"upper left\"\n)\n\nax.add_artist(legend1)\n\nax.legend(\n &nbsp; &nbsp;[scatter1, scatter2],\n &nbsp; &nbsp;[\"Scatter 1\", \"Scatter 2\"],\n &nbsp; &nbsp;title=\"Scatter Plots\",\n &nbsp; &nbsp;loc=\"lower right\",\n)</pre>\n<p><img alt=\"\" data-attachment-key=\"5HGA98QE\" width=\"1134\" height=\"865\"></p>\n<h2>Custom legend elements example</h2>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Sometimes the default legend that is produced just doesn't meet our needs. Consider this scatter plot example from earlier. It's missing a legend that allows us to understand how to read the size of the markers as they represent the population of each country. But there's no standard matplotlib way to accomplish this. We'd like to have a set of circles where each circle corresponds to a different population size so that all of the sizes of the circles in the plot can be interpreted.</span></span></p>\n<pre>import pandas as pd\n\n# Load our data\ndata = pd.read_csv(\"data/gap-minder-statistics.csv\")\nlargest = data.sort_values(by=\"population\", ascending=False).iloc[:15]\n\n# Plot the figure and a colorbar where the size of the markers is the population and the colorbar represents fertility\nfig, ax = plt.subplots(figsize=(8, 8))\n\nscatter = ax.scatter(\n &nbsp; &nbsp;largest[\"average_daily_income\"],\n &nbsp; &nbsp;largest[\"life_expectancy\"],\n &nbsp; &nbsp;c=largest[\"fertility\"],\n &nbsp; &nbsp;s=largest[\"population\"],\n)\nax.set_xlabel(\"Average Daily Income ($/day)\")\nax.set_ylabel(\"Life expectancy (years)\")\nax.set_xscale(\"log\")\n\nfig.colorbar(scatter, ax=ax, label=\"Fertility (babies per women)\")\n\n# Add text labels so the country can be identified\nfor vx, vy, vs in zip(\n &nbsp; &nbsp;largest[\"average_daily_income\"], largest[\"life_expectancy\"], largest[\"country\"]\n):\n &nbsp; &nbsp;ax.text(vx, vy, vs, fontsize=8, color=\"gray\")</pre>\n<p><img alt=\"\" data-attachment-key=\"TEE9CUH9\" width=\"1378\" height=\"1360\"></p>\n<h3>Proxy artists</h3>\n<p>Create legends for non-visible elements by plotting empty lists.</p>\n<pre>fig, ax = plt.subplots()\n(line,) = ax.plot([], [], color=\"blue\")\nscatter = ax.scatter([], [], c=\"red\")\nax.legend([line, scatter], [\"My Line\", \"My Scatterplot\"])</pre>\n<p><img alt=\"\" data-attachment-key=\"QRXBWFSL\" width=\"1136\" height=\"826\"></p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">We can apply this same approach to our scatter plot. Here we want to create scatter plot markers that represent the range of population that's present in the data. Let's create markers for 10 million, 100 million, and 1 billion people. We create an empty scatter plot with each of those sizes and label them accordingly. </span></span>Create markers with fixed sizes (<code>s=</code>) and neutral colors (<code>color=\"gray\"</code>) for better readability. Adjust spacing with <code>handleheight</code> and remove frame for clarity.</p>\n<pre>fig, ax = plt.subplots(figsize=(8, 8))\n\nscatter = ax.scatter(\n &nbsp; &nbsp;largest[\"average_daily_income\"],\n &nbsp; &nbsp;largest[\"life_expectancy\"],\n &nbsp; &nbsp;c=largest[\"fertility\"],\n &nbsp; &nbsp;s=largest[\"population\"],\n)\nax.set_xlabel(\"Average Daily Income ($/day)\")\nax.set_ylabel(\"Life expectancy (years)\")\nax.set_xscale(\"log\")\n\nfig.colorbar(scatter, ax=ax, label=\"Fertility (babies per women)\")\n\nfor vx, vy, vs in zip(\n &nbsp; &nbsp;largest[\"average_daily_income\"], largest[\"life_expectancy\"], largest[\"country\"]\n):\n &nbsp; &nbsp;ax.text(vx, vy, vs, fontsize=8, color=\"gray\")\n\n# Plot empty x and y coordinates to create the legend entries corresponding to different population values\npopulation_for_legend = [10, 100, 1000]\nlegend_labels = [\"10 million\", \"100 million\", \"1 billion\"]\nfor pop, label in zip(population_for_legend, legend_labels):\n &nbsp; &nbsp;ax.scatter([], [], s=pop, label=label, color=\"lightgrey\")\nax.legend(title=\"Population\", handleheight=2.5, frameon=False, alignment=\"left\")</pre>\n<p><img alt=\"\" data-attachment-key=\"ZPBL3VKH\" width=\"1378\" height=\"1360\"></p>\n</div>"
        }
    ]
}