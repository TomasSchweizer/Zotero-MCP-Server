{
    "found_items": [
        {
            "key": "GU6KSWN3",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/GU6KSWN3",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/GU6KSWN3",
                    "type": "text/html"
                },
                "enclosure": {
                    "href": "file:///home/schweizer/Zotero/storage/GU6KSWN3/00%20Cheat%20Sheet%20OWASP%20Application%20Security%20Risks.pdf",
                    "type": "application/pdf",
                    "title": "00 Cheat Sheet OWASP Application Security Risks.pdf",
                    "length": 131431
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "GU6KSWN3",
                "version": 0,
                "itemType": "attachment",
                "title": "00 Cheat Sheet OWASP Application Security Risks",
                "linkMode": "imported_file",
                "contentType": "application/pdf",
                "charset": "",
                "filename": "00 Cheat Sheet OWASP Application Security Risks.pdf",
                "tags": [],
                "collections": [
                    "3TJ3LAYX"
                ],
                "relations": {},
                "dateAdded": "2025-03-31T12:36:04Z",
                "dateModified": "2025-03-31T12:36:04Z"
            }
        },
        {
            "key": "9EXFDQXU",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/9EXFDQXU",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/9EXFDQXU",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "9EXFDQXU",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>00 Summary and Glossary</h1>\n<ul>\n<li>\nSQL injection is an attack that passes a string input to exploit a database.\n</li>\n<li>\nFour types of structured query language (SQL) injection are: SQL manipulation, code injection, function call injection, and buffer overflow.\n</li>\n<li>\nYou can protect your application against SQL injection attacks by using query parameters, validating on the server side, restricting user privileges, and performing dynamic application security testing (DAST).\n</li>\n<li>\nCross-site scripting is when an application sends untrusted data to a browser, and the three common types are stored, blind, and reflected.\n</li>\n<li>\nYou can prevent cross-site scripting by looking for suspicious HTTP requests and keywords, escaping lists and keywords, turning off HTTP TRACE, and avoiding unsafe sinks.\n</li>\n<li>\nSecrets management is storing and managing items like passwords that must be kept secret.\n</li>\n<li>\nThree common methods to store and manage secrets are the graphical user interface (GUI), command line interface (CLI), and hypertext transport protocol application programming interface (HTTP API).\n</li>\n<li>\nChallenges in developing code include accessibility, auditing and logging, and security.\n</li>\n</ul>\n<table>\n<tbody>\n<tr>\n<th>\n<p><code>Term</code></p>\n</th>\n<th>\n<p><code>Definition</code></p>\n</th>\n</tr>\n<tr>\n<td>\n<p><code>Blind cross-site scripting</code></p>\n</td>\n<td>\n<p><code>Injects a script that has a payload to be executed on the backend of an application by the user or the administrator without their knowing about it.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Broken access control</code></p>\n</td>\n<td>\n<p><code>When attackers can access, modify, delete, or perform actions outside of an application or system's intended permissions.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Buffer overflows</code></p>\n</td>\n<td>\n<p><code>One of the four pervasive types of SQL injection attacks. This happens when a program allocates more data in a buffer than the buffer can store. A buffer overflow causes a system or program to crash or execute malicious code.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Code injection</code></p>\n</td>\n<td>\n<p><code>One of the four pervasive types of SQL injection attacks.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Credential stuffing</code></p>\n</td>\n<td>\n<p><code>Occurs when an attacker has a list of legitimate usernames and passwords. The attacker employs automation to use those passwords in an attack.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Cross-site scripting</code></p>\n</td>\n<td>\n<p><code>When an application takes untrusted data and then sends it to a web browser without proper validation or escaping. You may see cross-site scripting represented as 'XSS.'</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Cross-site scripting attack</code></p>\n</td>\n<td>\n<p><code>Can deface websites by replacing or removing images or content.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Function call injection</code></p>\n</td>\n<td>\n<p><code>One of the four pervasive types of SQL injection attacks.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>HTTP Host header injection</code></p>\n</td>\n<td>\n<p><code>When creating URIs for links in web applications, developers typically use the HTTP host header available in the HTTP request that is sent from the client side. An attacker can exploit this practice by sending a fake header that contains a domain name that, for example, can be used to corrupt the web cache or password reset emails.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Lightweight Directory Access Protocol (LDAP) injection</code></p>\n</td>\n<td>\n<p><code>Exploits websites that construct LDAP statements from data provided by users. In this type of attack, an attacker might modify LDAP statements using a local proxy in order to execute arbitrary commands (granting permissions to unauthorized queries) or modify the content of the LDAP tree.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Logstash</code></p>\n</td>\n<td>\n<p><code>A data processing pipeline that collects, parses, and stores logs for future use. IBM Financial Crimes Alerts Insight with Watson (FCAI) uses Logstash to collect and normalize log files.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Operating system command injection</code></p>\n</td>\n<td>\n<p><code>OS command injection, also termed shell injection, is a web security vulnerability where an attacker can execute arbitrary operating system (OS) commands on a server running an application and can fully compromise it along with all its data.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>OWASP</code></p>\n</td>\n<td>\n<p><code>Open Web Application Security Project, launched in 2001 and formally formed in 2004, is a foundation that focuses on software security. OWASP supports the security industry with the OWASP Top 10.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>OWASP Top 10</code></p>\n</td>\n<td>\n<p><code>A report that identifies current software security vulnerability concerns and represents a consensus from the OWASP core team, security analysts, security organizations, and other security experts. The OWASP Top 10 is used globally as a standard check for web application security.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Principle of Least Privilege (or PoLP)</code></p>\n</td>\n<td>\n<p><code>Users should only have the minimum permissions necessary to perform their tasks.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Reflected cross-site scripting attack</code></p>\n</td>\n<td>\n<p><code>A reflected cross-site scripting attack injects a script to be reflected from the attacked server to users on a system.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Server-side request forgeries (SSRF)</code></p>\n</td>\n<td>\n<p><code>A server site attack that results in sensitive information being disclosed or leaked from the backend server of the application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SQL injection</code></p>\n</td>\n<td>\n<p><code>Takes advantage of the SQL syntax to inject commands that can read or modify a database or compromise the meaning of the original SQL query. In this type of attack, an attacker can spoof an identity; expose, tamper with, destroy, or make existing data unavailable; or become the administrator of the database server.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SQL injection attacks</code></p>\n</td>\n<td>\n<p><code>Attempt to exploit web application vulnerabilities by concatenating user input with SQL queries. If successful, these attacks can execute malicious SQL commands using a legitimate web application connection.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SQL manipulation</code></p>\n</td>\n<td>\n<p><code>One of the most common types of SQL injection and an attack that modifies an SQL statement of set operations.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Stored cross-site scripting</code></p>\n</td>\n<td>\n<p><code>A stored cross-site scripting attack injects a script that becomes permanently stored in a database or on a targeted server.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vault</code></p>\n</td>\n<td>\n<p><code>Developed by HashiCorp, Vault is a token-based storage solution for managing secrets. This tool provides policies that constrain user access and privileges when users interact with a Vault server.</code></p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>",
                "tags": [],
                "collections": [
                    "3TJ3LAYX"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:27:49Z",
                "dateModified": "2025-03-31T12:33:49Z"
            }
        },
        {
            "key": "CHNP9PCD",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/CHNP9PCD",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/CHNP9PCD",
                    "type": "text/html"
                },
                "enclosure": {
                    "href": "file:///home/schweizer/Zotero/storage/CHNP9PCD/06%20Introduction%20to%20Cross-Site%20Scripting.pdf",
                    "type": "application/pdf",
                    "title": "06 Introduction to Cross-Site Scripting.pdf",
                    "length": 898596
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "CHNP9PCD",
                "version": 0,
                "itemType": "attachment",
                "title": "06 Introduction to Cross-Site Scripting",
                "linkMode": "imported_file",
                "contentType": "application/pdf",
                "charset": "",
                "filename": "06 Introduction to Cross-Site Scripting.pdf",
                "tags": [],
                "collections": [
                    "3TJ3LAYX"
                ],
                "relations": {},
                "dateAdded": "2025-03-31T11:59:24Z",
                "dateModified": "2025-03-31T11:59:24Z"
            }
        },
        {
            "key": "MMQDZD6T",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/MMQDZD6T",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/MMQDZD6T",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "MMQDZD6T",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>05b Cross-Site Scripting (XSS)</h1>\n<ul>\n<li>\nCross-site scripting (XSS) is a client-side injection attack where attackers inject malicious JavaScript into a website.\n</li>\n<li>\nXSS allows attackers to bypass the same-origin policy and compromise user interaction.\n</li>\n<li>\nThere are three main types of XSS: Reflected, Stored, and DOM-based.\n</li>\n<li>\nReflected XSS injects malicious scripts that are immediately returned in the HTTP response.\n</li>\n<li>\nStored XSS persists malicious scripts on the server, which are then executed when the affected page is visited.\n</li>\n<li>\nDOM-based XSS manipulates the client's browser environment to execute malicious code.\n</li>\n<li>\nModern browsers have security features to prevent XSS, but it remains a significant threat.\n</li>\n</ul>\n<h1>Cross-Site Scripting (XSS)</h1>\n<h2>Introduction</h2>\n<p>Cross-site scripting (XSS) is a type of cyberattack categorized as a client-side injection attack. In such attacks, malicious code or scripts are injected into an application with the aim of gaining control over data, breaching user privacy, or performing other harmful actions. XSS is recognized as one of the top ten injection hacking techniques.</p>\n<h2>How Cross-Site Scripting Works</h2>\n<p>XSS attacks occur when an attacker finds a way to make a user's browser execute JavaScript code. This circumvents the same-origin policy, a security mechanism that restricts how documents or scripts loaded by one origin can interact with resources from another origin. By manipulating a vulnerable website, an attacker can cause it to deliver harmful JavaScript to its users. Once this code runs in the user's browser, the attacker can effectively compromise the user's interaction with the web application.</p>\n<p>Consider a scenario where a website accepts user input without proper validation. If the site processes HTML code instead of just plain text, an attacker could inject a script payload through this input. The application might then be tricked into performing unintended actions. Essentially, the attacker inserts a malicious script that the browser perceives as a legitimate part of the webpage and consequently loads and executes. The server in this case acts as a delivery mechanism for the harmful content to the user, without the web server itself being infected.</p>\n<h2>Types of Cross-Site Scripting Attacks</h2>\n<p>There are three primary types of cross-site scripting attacks:</p>\n<h3>Reflected Cross-Site Scripting Attack</h3>\n<p>Reflected XSS happens when an application takes data directly from an HTTP request and insecurely incorporates it into the immediate response. The malicious script is delivered and executed as soon as the user makes the request.</p>\n<p>For example, imagine a website that allows users to search for items by category. If a user searches for \"Books,\" this might be reflected in the URL. If the website then displays the search term directly on the page without proper sanitization, an attacker could craft a malicious URL containing JavaScript code instead of a category. When another user clicks on this manipulated link, the malicious script would be executed in their browser.</p>\n<h3>Stored Cross-Site Scripting Attack</h3>\n<p>A stored cross-site scripting attack, also known as a persisted attack, involves storing malicious code on the target server and then retrieving it later to execute the attack. These attacks often exploit unfiltered user inputs that are stored permanently in the server's database or other storage. When a user visits a page that retrieves and displays this stored malicious content, the script is executed in their browser. This type of attack can lead to a complete takeover of user accounts because the attacker gains control over script execution within the browser in an ongoing manner.</p>\n<p>The key difference between reflected and stored XSS is that in reflected XSS, the server includes the malicious content only in the immediate HTTP response. In stored XSS, the malicious code is stored persistently.</p>\n<h3>DOM-Based Cross-Site Scripting Attack</h3>\n<p>DOM-based XSS attacks manipulate the Document Object Model (DOM) in the user's browser. The DOM represents the structure of an HTML page as a tree of objects. In this type of attack, the attacker injects a malicious payload into a web page by exploiting vulnerabilities in the client-side JavaScript code. The attack targets applications where data moves from a \"source\" (like <code>document.URL</code>, <code>location.search</code>, or <code>location.hash</code>) to a \"sink\" (a JavaScript function that can execute code) within the client's browser environment.</p>\n<h2>Cross-Site Scripting Today</h2>\n<p>While modern web browsers have significantly improved their security features and implemented various built-in safeguards to prevent XSS attacks, these measures are not foolproof. Despite a decrease in their prevalence over time, cross-site scripting attacks still rank among the top ten cyber threats according to OWASP (Open Web Application Security Project). Therefore, it remains crucial for web developers to be vigilant and implement proper security practices to mitigate the risk of XSS vulnerabilities in their applications.</p>\n</div>",
                "tags": [],
                "collections": [
                    "3TJ3LAYX"
                ],
                "relations": {},
                "dateAdded": "2025-03-31T11:56:49Z",
                "dateModified": "2025-03-31T11:57:29Z"
            }
        },
        {
            "key": "QR3CAJ8X",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/QR3CAJ8X",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/QR3CAJ8X",
                    "type": "text/html"
                },
                "up": {
                    "href": "http://localhost:23119/api/users/11338754/items/G8GN4DQ9",
                    "type": "application/json"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "QR3CAJ8X",
                "version": 0,
                "itemType": "note",
                "parentItem": "G8GN4DQ9",
                "note": "<div data-schema-version=\"9\"><h1>Query Parameterization for SQL Injection Prevention</h1>\n<p><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\" rel=\"noopener noreferrer nofollow\">https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html</a></p>\n<ul>\n<li>\nSQL injection is a critical web vulnerability.\n</li>\n<li>\nIt allows attackers to manipulate SQL queries.\n</li>\n<li>\nParameterized queries are the most effective way to prevent SQL injection.\n</li>\n<li>\nThey treat user input as data, not code.\n</li>\n<li>\n<span style=\"background-color: #5fb23680\">Parameterization must be done server-side.</span>\n</li>\n<li>\nThe cheat sheet provides examples in various languages: Java, .NET, Ruby, PHP, ColdFusion, Perl, Rust.\n</li>\n<li>\nParameterized queries can also be used in stored procedures for dynamic SQL.\n</li>\n<li>\nExamples for Oracle (PL/SQL) and SQL Server (Transact-SQL) are provided for stored procedures.\n</li>\n</ul>\n<h2>Introduction</h2>\n<p>SQL Injection is a highly dangerous web vulnerability, consistently ranking among the top security risks. It allows attackers to inject malicious SQL code into an application's database queries, potentially leading to data theft, modification, or even operating system command execution. This cheat sheet focuses on query parameterization as the primary method to prevent SQL injection. It is based on the principles outlined in the SQL Injection Prevention Cheat Sheet.</p>\n<h2>What is SQL Injection?</h2>\n<p>SQL Injection occurs when user-supplied input is incorporated into dynamic SQL statements without proper sanitization. This allows attackers to alter the structure of the SQL query to perform unintended actions on the database.</p>\n<h2>Parameterized Queries: The Best Defense</h2>\n<p>The most effective way to prevent SQL injection is by using parameterized queries (also known as prepared statements). This technique separates the SQL code structure from the user-provided data. Instead of directly embedding user input into the query string, placeholders are used for the data, and the actual data is passed to the database separately. This ensures that the database treats the user input as data, not as executable SQL code. It's crucial that this parameterization happens on the server-side to be effective.</p>\n<h2>Prepared Statement Examples</h2>\n<h3>Java</h3>\n<p>Using built-in features:</p>\n<pre>String custname = request.getParameter(\"customerName\");\nString query = \"SELECT account_balance FROM user_data WHERE user_name = ? \";\nPreparedStatement pstmt = connection.prepareStatement( query );\npstmt.setString( 1, custname);\nResultSet results = pstmt.executeQuery( );</pre>\n<h3>Java with Hibernate</h3>\n<p>Using HQL:</p>\n<pre>// HQL\n@Entity // declare as entity;\n@NamedQuery( name=\"findByDescription\", query=\"FROM Inventory i WHERE i.productDescription = :productDescription\")\npublic class Inventory implements Serializable {\n &nbsp; &nbsp;@Id private long id;\n &nbsp; &nbsp;private String productDescription;\n}\n\n// Use case\nString userSuppliedParameter = request.getParameter(\"Product-Description\");\nList&lt;Inventory&gt; list = session.getNamedQuery(\"findByDescription\")\n &nbsp; &nbsp;.setParameter(\"productDescription\", userSuppliedParameter).list();</pre>\n<p>Using Criteria API:</p>\n<pre>String userSuppliedParameter = request.getParameter(\"Product-Description\");\nInventory inv = (Inventory) session.createCriteria(Inventory.class)\n &nbsp; &nbsp;.add(Restrictions.eq(\"productDescription\", userSuppliedParameter)).uniqueResult();</pre>\n<h3>.NET</h3>\n<p>Using built-in features:</p>\n<pre>string query = \"SELECT account_balance FROM user_data WHERE user_name = ?\";\ntry {\n &nbsp; &nbsp;OleDbCommand command = new OleDbCommand(query, connection);\n &nbsp; &nbsp;command.Parameters.Add(new OleDbParameter(\"customerName\", CustomerName Name.Text));\n &nbsp; &nbsp;OleDbDataReader reader = command.ExecuteReader();\n &nbsp; &nbsp;// \u2026\n} catch (OleDbException se) {\n &nbsp; &nbsp;// error handling\n}</pre>\n<h3>ASP .NET</h3>\n<p>Using built-in features:</p>\n<pre>string sql = \"SELECT * FROM Customers WHERE CustomerId = @CustomerId\";\nSqlCommand command = new SqlCommand(sql);\ncommand.Parameters.Add(new SqlParameter(\"@CustomerId\", System.Data.SqlDbType.Int));\ncommand.Parameters[\"@CustomerId\"].Value = 1;</pre>\n<h3>Ruby with ActiveRecord</h3>\n<pre># Create\nCreateProject.create!(:name =&gt; 'owasp')\n# Read\nProject.all(:conditions =&gt; \"name = ?\", name)\nProject.all(:conditions =&gt; { :name =&gt; name })\nProject.where(\"name = :name\", :name =&gt; name)\n# Update\nproject.update_attributes(:name =&gt; 'owasp')\n# Delete\nProject.delete(:name =&gt; 'name')</pre>\n<h3>Ruby built-in feature</h3>\n<pre>insert_new_user = db.prepare \"INSERT INTO users (name, age, gender) VALUES (?, ? ,?)\"\ninsert_new_user.execute 'aizatto', '20', 'male'</pre>\n<h3>PHP with PHP Data Objects</h3>\n<pre>$stmt = $dbh-&gt;prepare(\"INSERT INTO REGISTRY (name, value) VALUES (:name, :value)\");\n$stmt-&gt;bindParam(':name', $name);\n$stmt-&gt;bindParam(':value', $value);</pre>\n<h3>Cold Fusion</h3>\n<p>Using built-in features:</p>\n<pre>&lt;cfquery name = \"getFirst\" dataSource = \"cfsnippets\"&gt;\n &nbsp; &nbsp;SELECT * FROM #strDatabasePrefix#_courses WHERE intCourseID =\n &nbsp; &nbsp;&lt;cfqueryparam value = #intCourseID# CFSQLType = \"CF_SQL_INTEGER\"&gt;\n&lt;/cfquery&gt;</pre>\n<h3>PERL with Database Independent Interface</h3>\n<pre>my $sql = \"INSERT INTO foo (bar, baz) VALUES ( ?, ? )\";\nmy $sth = $dbh-&gt;prepare( $sql );\n$sth-&gt;execute( $bar, $baz );</pre>\n<h3>Rust with SQLx</h3>\n<pre>// Input from CLI args but could be anything\nlet username = std::env::args().last().unwrap();\n\n// Using build-in macros (compile time checks)\nlet users = sqlx::query_as!(\n &nbsp; &nbsp; &nbsp; &nbsp;User,\n &nbsp; &nbsp; &nbsp; &nbsp;\"SELECT * FROM users WHERE name = ?\",\n &nbsp; &nbsp; &nbsp; &nbsp;username\n &nbsp; &nbsp;)\n &nbsp; &nbsp;.fetch_all(&amp;pool)\n &nbsp; &nbsp;.await\n &nbsp; &nbsp;.unwrap();\n\n// Using built-in functions\nlet users: Vec&lt;User&gt; = sqlx::query_as::&lt;_, User&gt;(\n &nbsp; &nbsp; &nbsp; &nbsp;\"SELECT * FROM users WHERE name = ?\"\n &nbsp; &nbsp;)\n &nbsp; &nbsp;.bind(&amp;username)\n &nbsp; &nbsp;.fetch_all(&amp;pool)\n &nbsp; &nbsp;.await\n &nbsp; &nbsp;.unwrap();</pre>\n<h2>Stored Procedure Examples (with Bind Variables)</h2>\n<p>SQL injection vulnerabilities can also occur within stored procedures if dynamic SQL is constructed unsafely. Using bind variables within dynamic SQL in stored procedures is crucial for prevention.</p>\n<h3>Oracle using PL/SQL</h3>\n<p><strong>Normal Stored Procedure (Safe by default):</strong></p>\n<pre>PROCEDURE SafeGetBalanceQuery(UserID varchar, Dept varchar) AS\nBEGIN\n &nbsp; SELECT balance FROM accounts_table WHERE user_ID = UserID AND department = Dept;\nEND;</pre>\n<p><strong>Stored Procedure Using Bind Variables with EXECUTE IMMEDIATE:</strong></p>\n<pre>PROCEDURE AnotherSafeGetBalanceQuery(UserID varchar, Dept varchar)\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AS stmt VARCHAR(400); result NUMBER;\nBEGIN\n &nbsp; stmt := 'SELECT balance FROM accounts_table WHERE user_ID = :1\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AND department = :2';\n &nbsp; EXECUTE IMMEDIATE stmt INTO result USING UserID, Dept;\n &nbsp; RETURN result;\nEND;</pre>\n<h3>SQL Server using Transact-SQL</h3>\n<p><strong>Normal Stored Procedure (Safe by default):</strong></p>\n<pre>CREATE PROCEDURE SafeGetBalanceQuery(@UserID varchar(20), @Dept varchar(10))\nAS\nBEGIN\n &nbsp; SELECT balance FROM accounts_table WHERE user_ID = @UserID AND department = @Dept\nEND</pre>\n<p><strong>Stored Procedure Using Bind Variables with </strong><code>sp_executesql</code>:</p>\n<pre>CREATE PROCEDURE SafeGetBalanceQuery(@UserID varchar(20), @Dept varchar(10))\nAS\nBEGIN\n &nbsp; DECLARE @sql VARCHAR(200)\n &nbsp; SELECT @sql = 'SELECT balance FROM accounts_table WHERE '\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + 'user_ID = @UID AND department = @DPT'\n &nbsp; EXEC sp_executesql @sql,\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'@UID VARCHAR(20), @DPT VARCHAR(10)',\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;@UID=@UserID, @DPT=@Dept\nEND</pre>\n</div>",
                "tags": [],
                "relations": {},
                "dateAdded": "2025-03-31T11:34:08Z",
                "dateModified": "2025-03-31T11:36:31Z"
            }
        },
        {
            "key": "LZ2FWAWU",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/LZ2FWAWU",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/LZ2FWAWU",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "LZ2FWAWU",
                "version": 0,
                "itemType": "webpage",
                "title": "00 OWASP Web Security Testing Guide | OWASP Foundation",
                "abstractNote": "The Web Security Testing Guide (WSTG) Project produces the premier cybersecurity testing resource for web application developers and security professionals.",
                "language": "en",
                "url": "https://owasp.org/www-project-web-security-testing-guide/",
                "accessDate": "2025-03-31T11:33:40Z",
                "creators": [],
                "tags": [],
                "collections": [
                    "3TJ3LAYX"
                ],
                "relations": {},
                "dateAdded": "2025-03-31T11:33:40Z",
                "dateModified": "2025-03-31T11:34:04Z"
            }
        },
        {
            "key": "WREFLS3I",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/WREFLS3I",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/WREFLS3I",
                    "type": "text/html"
                },
                "up": {
                    "href": "http://localhost:23119/api/users/11338754/items/G8GN4DQ9",
                    "type": "application/json"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "WREFLS3I",
                "version": 0,
                "itemType": "note",
                "parentItem": "G8GN4DQ9",
                "note": "<div data-schema-version=\"9\"><h1>SQL Injection Prevention</h1>\n<p><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\" rel=\"noopener noreferrer nofollow\">https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html</a></p>\n<ul>\n<li>\nSQL injection is a common attack targeting database applications.\n</li>\n<li>\nIt happens when dynamic SQL queries are built using string concatenation with user input.\n</li>\n<li>\nPrevent by using prepared statements or by preventing malicious SQL input.\n</li>\n<li>\nPrimary defenses include prepared statements, stored procedures, allow-list input validation (for specific cases), and (discouraged) escaping.\n</li>\n<li>\nPrepared statements with parameterized queries are the most recommended defense.\n</li>\n<li>\nStored procedures can be safe if implemented correctly.\n</li>\n<li>\nAllow-list validation is crucial for dynamic parts of queries like table or column names.\n</li>\n<li>\nEscaping user input is fragile and not a guaranteed solution.\n</li>\n<li>\nAdditional defenses are least privilege and input validation.\n</li>\n<li>\nLeast privilege limits the damage from a successful attack.\n</li>\n<li>\nInput validation can act as a secondary defense.\n</li>\n</ul>\n<h2>Introduction</h2>\n<p>SQL Injection vulnerabilities are prevalent and dangerous because they target application databases, which often contain critical data. Attackers exploit these flaws to execute malicious SQL code.</p>\n<h2>What Is a SQL Injection Attack?</h2>\n<p>A SQL injection attack occurs when an application uses dynamic database queries built with string concatenation that includes unvalidated user-supplied input. To prevent this, developers must either avoid dynamic queries with string concatenation or ensure that malicious SQL input cannot be included in executed queries. These prevention techniques are applicable across various programming languages and database types.</p>\n<h2>Anatomy of A Typical SQL Injection Vulnerability</h2>\n<p>A common example involves directly appending user input to a SQL query string. If this input is not validated, an attacker can inject SQL code that the database will execute. For instance, in the provided Java example, the <code>customerName</code> parameter is directly concatenated into the SQL query, making it vulnerable.</p>\n<h2>Primary Defenses</h2>\n<h3>Option 1: Use of Prepared Statements (with Parameterized Queries)</h3>\n<p>This is the most recommended defense. Prepared statements with variable binding (parameterized queries) require developers to define the SQL code first and then pass parameters separately. This method ensures that the database treats user input as data, not executable code, thus preventing attackers from changing the query's intent. Examples are provided in Java, C# .NET, and Hibernate Query Language (HQL).</p>\n<h3>Option 2: Use of Properly Constructed Stored Procedures</h3>\n<p>Stored procedures, when implemented safely, can also prevent SQL injection. Similar to parameterized queries, safe stored procedures use parameters that are automatically parameterized. The key difference is that the SQL code for a stored procedure is defined and stored within the database. While effective, it's important to note that granting excessive database privileges for stored procedures (like <code>db_owner</code> in MS SQL Server) can increase the risk if the system is compromised. Examples in Java and VB .NET are provided.</p>\n<h3>Option 3: Allow-list Input Validation</h3>\n<p>This defense is crucial for parts of SQL queries where bind variables cannot be used, such as table names, column names, or sort order indicators. Instead of directly using user input, developers should validate and map the input to a predefined list of acceptable values. This ensures that only expected and safe values are used in the query. While necessary in certain scenarios, using user parameters for table or column names often indicates poor design and a rewrite should be considered.</p>\n<h3>Option 4: STRONGLY DISCOURAGED: Escaping All User Supplied Input</h3>\n<p>This approach involves escaping all user input before including it in a query. However, this method is database-specific, fragile, and does not guarantee complete protection against all SQL injection scenarios. It is strongly discouraged compared to prepared statements and stored procedures.</p>\n<h2>Additional Defenses</h2>\n<h3>Least Privilege</h3>\n<p>To minimize the impact of a successful SQL injection attack, the principle of least privilege should be applied to all database accounts. Application accounts should only be granted the necessary permissions required for their specific functions (e.g., read-only access if only reading data). Avoid assigning DBA or admin-level privileges to application accounts. This principle also extends to minimizing the privileges of the operating system account under which the database management system runs. Consider using SQL views to further restrict access to specific portions or fields of tables. For web applications accessing the database, using distinct database user accounts for each application helps in enforcing granular access control.</p>\n<h3>Allow-list Input Validation</h3>\n<p>Beyond its role as a primary defense in specific cases, input validation can also serve as a secondary defense mechanism. It can help detect unauthorized input before it reaches the SQL query. However, it's crucial to understand that even validated data should not be directly inserted into SQL queries via string building, as this can still lead to vulnerabilities. Using parameterized queries remains the safest approach.</p>\n</div>",
                "tags": [],
                "relations": {},
                "dateAdded": "2025-03-31T11:32:17Z",
                "dateModified": "2025-03-31T11:32:53Z"
            }
        },
        {
            "key": "PJCZW56M",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/PJCZW56M",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/PJCZW56M",
                    "type": "text/html"
                },
                "up": {
                    "href": "http://localhost:23119/api/users/11338754/items/G8GN4DQ9",
                    "type": "application/json"
                },
                "enclosure": {
                    "href": "file:///home/schweizer/Zotero/storage/PJCZW56M/Notes%20on%2004%20Hands-on%20Lab%20Understanding%20SQL%20Injections.pdf",
                    "type": "application/pdf",
                    "title": "Notes on 04 Hands-on Lab Understanding SQL Injections.pdf",
                    "length": 176951
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "PJCZW56M",
                "version": 0,
                "itemType": "attachment",
                "title": "PDF",
                "parentItem": "G8GN4DQ9",
                "linkMode": "imported_file",
                "contentType": "application/pdf",
                "charset": "",
                "filename": "Notes on 04 Hands-on Lab Understanding SQL Injections.pdf",
                "tags": [],
                "relations": {},
                "dateAdded": "2025-03-31T11:26:00Z",
                "dateModified": "2025-03-31T11:32:16Z"
            }
        },
        {
            "key": "6B76GNU8",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/6B76GNU8",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/6B76GNU8",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "6B76GNU8",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>00 Summary</h1>\n<ul>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">The Open Web Application Security Project (OWASP) Top 10 is a report that identifies current software security vulnerability concerns.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">The five major steps in developing the OWASP Top 10 are to plan the schedule and call for data, survey the industry, analyze the data, draft the list with categories from the data and the survey for review, and after reaching consensus, release the list.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Hackers exploiting access control compromise application security, tarnish company reputation, cause financial losses.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Hackers can easily decrypt common encryption methods, so you should encrypt sensitive data in databased and in transit.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Insecure design is a lack of security, security misconfiguration consists of overlooked weaknesses, and vulnerable and outdated components make your applications more vulnerable to attacks.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Using security measures and staying informed of security updates can protect your applications.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Use secure application designs, robust logging and monitoring, and secure web servers to prevent SSRF attacks to protect your applications and infrastructure.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Integrity checks prevent tampering, web servers should be configured correctly, input data should be sanitized, and unsigned data should never be sent to untrusted clients.&nbsp;</span></span>\n</li>\n</ul>\n<p></p>\n</div>",
                "tags": [],
                "collections": [
                    "ISYQWLG8"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:26:24Z",
                "dateModified": "2025-03-31T10:54:20Z"
            }
        },
        {
            "key": "6WXATIN8",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/6WXATIN8",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/6WXATIN8",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "6WXATIN8",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>04 OWASP Top 7-10</h1>\n<ul>\n<li>\n<strong>Identification and authentication failures</strong> can lead to unauthorized access through credential stuffing, brute force attacks, and exposed session IDs. Prevention involves securing the software supply chain, using multi-factor authentication, and proper session management.\n</li>\n<li>\n<strong>Software and data integrity failures</strong> occur when code and infrastructure don't protect against tampering, especially from untrusted sources or insecure CI/CD pipelines. Prevention includes segregating the CI/CD pipeline, using software supply chain security tools, and implementing digital signatures.\n</li>\n<li>\n<strong>Security logging and monitoring failures</strong> hinder the detection and response to breaches due to missing, weak, or quickly overwritten logs, and the absence of a monitoring system. Prevention involves proper log formatting, centralization, long-term storage, and implementing a robust monitoring system with alerts.\n</li>\n<li>\n<strong>Server-Side Request Forgery (SSRF)</strong> allows attackers to make malicious requests to internal systems by exploiting vulnerable web servers and bypassing firewalls. Prevention includes sanitizing input, using whitelists for URLs, and disabling HTTP redirects.\n</li>\n</ul>\n<h2>Identification and Authentication Failures</h2>\n<p>This category covers vulnerabilities where an application fails to properly identify and authenticate users.</p>\n<h3>Causes</h3>\n<ul>\n<li>\n<strong>Credential Stuffing and Brute Force Attacks:</strong> Attackers use lists of known usernames and passwords or automated tools to try and gain unauthorized access.\n</li>\n<li>\n<strong>Exposed Session Identifiers:</strong> Revealing session IDs in URLs allows anyone with the ID to impersonate the user.\n</li>\n<li>\n<strong><span style=\"background-color: #ff666680\">Lack of Session Timeouts:</span></strong><span style=\"background-color: #ff666680\"> Failure to automatically log out inactive users can lead to unauthorized access if a user leaves their computer unattended.</span>\n</li>\n</ul>\n<h3>Prevention</h3>\n<ul>\n<li>\n<strong>Secure Software Supply Chain:</strong> Regularly scan application components for known vulnerabilities and review configuration changes.\n</li>\n<li>\n<strong>Avoid Unencrypted Sensitive Data:</strong> Do not transmit sensitive data to untrusted sources without encryption.\n</li>\n<li>\n<strong>Implement Integrity Checks:</strong> Use digital signatures to ensure data security and prevent tampering.\n</li>\n<li>\n<strong>Use Multi-Factor Authentication (MFA):</strong> This adds an extra layer of security against automated attacks.\n</li>\n<li>\n<strong>Avoid Default Credentials:</strong> Do not deploy applications with default usernames and passwords enabled.\n</li>\n<li>\n<strong>Implement Server-Side Session Management:</strong> Generate new, random session IDs, store them securely, and invalidate them upon logout or after idle and absolute timeouts. <span style=\"background-color: #5fb23680\">Ensure session IDs are not exposed in URLs.</span>\n</li>\n</ul>\n<h2>Software and Data Integrity Failures</h2>\n<p>This category focuses on vulnerabilities where the integrity of software and data is not protected.</p>\n<h3>Causes</h3>\n<ul>\n<li>\n<strong>Untrusted Components:</strong> Applications relying on components from untrusted sources can introduce vulnerabilities.\n</li>\n<li>\n<strong>Insecure CI/CD Pipelines:</strong> Attackers might upload malicious updates to insecure pipelines, affecting all installations.\n</li>\n<li>\n<strong>Lack of Integrity Verification:</strong> Automatic updates without sufficient integrity checks can lead to the installation of compromised software.\n</li>\n<li>\n<strong>Unsigned or Unencrypted Data:</strong> Sending unsigned or unencrypted data to untrusted clients increases the risk of tampering.\n</li>\n</ul>\n<h3>Prevention</h3>\n<ul>\n<li>\n<strong>Segregate and Secure CI/CD Pipelines:</strong> Ensure proper configuration and access control to maintain code integrity.\n</li>\n<li>\n<strong>Use Software Supply Chain Security Tools:</strong> Scan application components for known vulnerabilities.\n</li>\n<li>\n<strong>Implement Digital Signatures and Integrity Checks:</strong> Verify that data or code comes from a legitimate source and hasn't been tampered with, especially when sending data to untrusted clients.\n</li>\n</ul>\n<h2>Security Logging and Monitoring Failures</h2>\n<p>This category highlights the importance of proper logging and monitoring for detecting and responding to security incidents.</p>\n<h3>Causes</h3>\n<ul>\n<li>\n<strong>Inadequate Logging:</strong> Missing, weak, or confusing log entries hinder troubleshooting and forensic analysis. Failure to log auditable events like intrusion attempts and failed logins is detrimental.\n</li>\n<li>\n<strong>Rapid Log Overwriting:</strong> Overwriting logs too quickly can prevent delayed forensic analysis after a breach.\n</li>\n<li>\n<strong>Lack of Monitoring:</strong> Without a monitoring system, it's difficult to detect suspicious activities, trends, and other problems in the infrastructure.\n</li>\n</ul>\n<h3>Prevention</h3>\n<ul>\n<li>\n<strong>Log Correct Information in the Proper Format at the Right Time:</strong> Ensure comprehensive logging of relevant events.\n</li>\n<li>\n<strong>Centralize Logging and Implement Long-Term Storage:</strong> Use tools like Logstash and Elasticsearch with visualization through Kibana. Back up raw log files.\n</li>\n<li>\n<strong>Include Auditable Events:</strong> Log logins, access control activities, and server-side input validation.\n</li>\n<li>\n<strong>Provide Sufficient Context in Logs:</strong> Include details that help identify suspicious or malicious accounts.\n</li>\n<li>\n<strong>Implement a Sound Monitoring System:</strong> Use thresholds, dashboards, and alerting to detect and respond to suspicious activities quickly.\n</li>\n<li>\n<strong>Audit Logs Periodically:</strong> Look for evidence of tampering or logfile manipulation attempts.\n</li>\n</ul>\n<h2>Server-Side Request Forgery (SSRF)</h2>\n<p>This category describes vulnerabilities that allow attackers to <span style=\"background-color: #5fb23680\">make malicious requests to internal systems from a vulnerable server.</span></p>\n<h3>How it Works</h3>\n<p>Attackers exploit a web server to make requests to other internal systems, bypassing firewalls and access controls by abusing the trust relationship between internal systems. This can be used to scan internal networks, access local files, discover IP addresses, and potentially achieve remote code execution.</p>\n<p><img alt=\"\" data-attachment-key=\"3LIELQ64\" width=\"1158\" height=\"514\"></p>\n<h3>Types of SSRF</h3>\n<p><img alt=\"\" data-attachment-key=\"SX9TRW9Y\" width=\"1156\" height=\"451\"></p>\n<ul>\n<li>\n<strong>Basic (Blind) SSRF:</strong> The attacker provides a URL, but the response is not returned.\n</li>\n<li>\n<strong>Semi-blind SSRF:</strong> Some data from the URL is exposed to the attacker.\n</li>\n<li>\n<strong>Non-blind SSRF:</strong> Data from any provided URI is returned to the attacker.\n</li>\n</ul>\n<h3>Prevention</h3>\n<ul>\n<li>\n<strong>Sanitize and Validate <span style=\"background-color: #5fb23680\">All</span> Input Data:</strong> Ensure that all client-provided data is properly validated.\n</li>\n<li>\n<strong>Create a Whitelist for Permitted URLs, Ports, and Destinations:</strong> Restrict the targets that the server can access.\n</li>\n<li>\n<strong>Configure Web Servers to Disallow HTTP Redirects:</strong> Prevent attackers from redirecting requests to unintended targets.\n</li>\n<li>\n<strong><span style=\"background-color: #5fb23680\">Disallow Raw Response Sending:</span></strong><span style=\"background-color: #5fb23680\"> Prevent applications from sending raw responses to clients without validation.</span>\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "ISYQWLG8"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:25:25Z",
                "dateModified": "2025-03-31T10:31:39Z"
            }
        },
        {
            "key": "IMID3CVI",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/IMID3CVI",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/IMID3CVI",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "IMID3CVI",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>03 OWASP Top 4-6: Insecure Design, Security Misconfiguration, and Vulnerable and Outdated Components</h1>\n<ul>\n<li>\n<strong>Insecure Design:</strong> Lack of security controls in the design phase, leading to vulnerabilities. Prevention involves implementing security measures like firewalls during design and secure error handling.\n</li>\n<li>\n<strong>Security Misconfiguration:</strong> Overlooked configuration weaknesses, such as enabled debug mode in production. Prevention involves removing unnecessary features, disabling default settings, and considering security at all levels of the application stack.\n</li>\n<li>\n<strong>Vulnerable and Outdated Components:</strong> Using outdated software, libraries, and dependencies. Prevention involves regularly updating components, removing unused dependencies, and tracking component versions.\n</li>\n</ul>\n<h2>Insecure Design</h2>\n<p>Insecure design occurs when security controls are not effectively implemented during the application design phase. This fundamental flaw can lead to various vulnerabilities, making the application susceptible to attacks. Even perfectly implemented code cannot fix an inherently unsafe design.</p>\n<h3>Key Aspects of Insecure Design</h3>\n<ul>\n<li>\n<strong>Lack of Preventative Measures:</strong> Absence of mechanisms to prevent common attacks like brute force, OTP bypass, etc.\n</li>\n<li>\n<strong>Risk-Based Design:</strong> Emphasizes security risks inherent in the application's architecture.\n</li>\n<li>\n<strong>Importance of Design Phase Security:</strong> Security measures like firewalls should be planned and implemented from the beginning.\n</li>\n</ul>\n<h3>Prevention Strategies for Insecure Design</h3>\n<ul>\n<li>\n<strong>Implement Security Controls Early:</strong> Integrate security measures during the design phase.\n</li>\n<li>\n<p><strong>Secure Error Handling:</strong></p>\n<ul>\n<li>\nLog error details securely without exposing sensitive information to users.\n</li>\n<li>\nProvide generic, safe error messages to users.\n</li>\n<li>\n<span style=\"background-color: #5fb23680\">Avoid revealing specific details about incorrect inputs </span>(e.g., \"username and password incorrect\" instead of specifying which one is wrong).\n</li>\n<li>\nPrevent error messages from exposing internal system details like database structure.\n</li>\n</ul>\n</li>\n</ul>\n<p><img alt=\"\" data-attachment-key=\"CWXJCM8W\" width=\"1136\" height=\"500\"></p>\n<h2>Security Misconfiguration</h2>\n<p>Security misconfiguration happens when there are overlooked weaknesses in the application's configuration. Attackers often exploit these oversights.</p>\n<h3>Common Security Misconfigurations</h3>\n<ul>\n<li>\n<strong>Enabled Developer Features in Production:</strong> Leaving debug mode or Q/A features active in live environments.\n</li>\n<li>\n<strong>Unnecessary Features:</strong> Including components or functionalities that grant excessive permissions.\n</li>\n<li>\n<strong>Default Settings:</strong> Using default usernames, passwords, and permissions.\n</li>\n<li>\n<strong>Exposed Configuration Files:</strong> Storing sensitive information in clear text configuration files.\n</li>\n<li>\n<strong>Backdoor Accounts:</strong> Existence of hidden accounts that can bypass normal authentication.\n</li>\n</ul>\n<h3>Prevention Strategies for Security Misconfiguration</h3>\n<ul>\n<li>\n<strong>Minimize Application Footprint:</strong> Remove unnecessary parts, features, and documentation.\n</li>\n<li>\n<strong>Disable Unneeded Frameworks and Features:</strong> Eliminate any components not essential for functionality.\n</li>\n<li>\n<strong>Secure Default Settings:</strong> Change or disable default usernames, passwords, and permissions. Keep these details private.\n</li>\n<li>\n<strong>Regularly Check for Vulnerabilities:</strong> Review configurations for backdoor accounts and sensitive data in clear text.\n</li>\n<li>\n<strong><span style=\"background-color: #5fb23680\">Apply Principle of Least Privilege (PoLP):</span></strong><span style=\"background-color: #5fb23680\"> Grant users only the minimum permissions required for their tasks.</span>\n</li>\n<li>\n<strong>Consider Security at All Levels:</strong> Secure the entire application stack, including platform, web server, app server, database, and custom code.\n</li>\n<li>\n<strong>Team Collaboration:</strong> Involve system administrators in the security configuration process to leverage their expertise.\n</li>\n</ul>\n<h2>Vulnerable and Outdated Components</h2>\n<p>Software applications rely on various components, including operating systems, platforms, libraries, and hardware. If these components are not regularly updated, they can become vulnerable to attacks.</p>\n<h3>Risks of Outdated Components</h3>\n<ul>\n<li>\n<strong>Unpatched Vulnerabilities:</strong> Security fixes and patches released by vendors might not be applied, leaving known vulnerabilities exploitable.\n</li>\n<li>\n<strong>Unused Dependencies:</strong> Even components not actively used can introduce risks if they become outdated.\n</li>\n</ul>\n<h3>Prevention Strategies for Vulnerable and Outdated Components</h3>\n<ul>\n<li>\n<strong>Maintain Inventory of Components:</strong> Create and regularly update a list of all installed components and their versions, including nested dependencies.\n</li>\n<li>\n<strong><span style=\"background-color: #5fb23680\">Regularly Update and Upgrade:</span></strong><span style=\"background-color: #5fb23680\"> Apply bug fixes, new features, firmware updates, and security patches promptly.</span>\n</li>\n<li>\n<strong>Remove Unused Dependencies and Features:</strong> Eliminate any components that do not provide essential functionality.\n</li>\n<li>\n<strong>Track Security Advisories:</strong> Stay informed about the latest security risks and vulnerabilities published by organizations like OWASP and CISA.\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "ISYQWLG8"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:25:09Z",
                "dateModified": "2025-03-31T10:19:36Z"
            }
        },
        {
            "key": "7I7AAJ5E",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/7I7AAJ5E",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/7I7AAJ5E",
                    "type": "text/html"
                },
                "enclosure": {
                    "href": "file:///home/schweizer/Zotero/storage/7I7AAJ5E/00%20Disgression%20OWASP-Top-10-for-LLMs-2023-slides-v1_1.pdf",
                    "type": "application/pdf",
                    "title": "00 Disgression OWASP-Top-10-for-LLMs-2023-slides-v1_1.pdf",
                    "length": 51145248
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "7I7AAJ5E",
                "version": 0,
                "itemType": "attachment",
                "title": "00 Digression OWASP-Top-10-for-LLMs-2023-slides-v1_1",
                "linkMode": "imported_file",
                "contentType": "application/pdf",
                "charset": "",
                "filename": "00 Disgression OWASP-Top-10-for-LLMs-2023-slides-v1_1.pdf",
                "tags": [],
                "collections": [
                    "ISYQWLG8"
                ],
                "relations": {},
                "dateAdded": "2025-03-31T08:58:38Z",
                "dateModified": "2025-03-31T08:59:13Z"
            }
        },
        {
            "key": "XVKQSXH6",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/XVKQSXH6",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/XVKQSXH6",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "XVKQSXH6",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>00 Digression: Dangers of Prompt Injection Attacks on LLM-based Chatbots</h1>\n<ul>\n<li>\nPrompt injection attacks are a top security vulnerability for LLM-based chatbots.\n</li>\n<li>\nThese attacks manipulate LLMs to deviate from their intended behavior through crafted inputs.\n</li>\n<li>\nAttacks can be direct (user input) or indirect (embedded in external data).\n</li>\n<li>\nLLMs struggle to distinguish between instructions and data, making these attacks difficult to prevent.\n</li>\n<li>\nConsequences include data leakage, system compromise, misinformation spread, and legal liabilities.\n</li>\n<li>\nCurrent mitigation methods often limit LLM functionality, posing a security-usability trade-off.\n</li>\n</ul>\n<p>Prompt injection attacks represent the most significant security vulnerability for Large Language Model (LLM) based chatbots, ranked as the top concern in the OWASP Top 10 for LLMs. These attacks manipulate AI systems by providing crafted inputs that override their intended behavior, potentially causing severe security breaches, data leakage, and business disruption. The following comprehensive analysis details the various dangers posed by these attacks, drawing from recent research and real-world incidents that demonstrate how even sophisticated LLM systems remain susceptible to these threats.</p>\n<h2>Understanding Prompt Injection Attacks</h2>\n<p>Prompt injection attacks occur when hackers disguise malicious inputs as legitimate prompts, tricking generative AI systems into behaving contrary to their intended programming. <span style=\"background-color: #5fb23680\">Unlike traditional cybersecurity threats, prompt injections exploit a fundamental characteristic of LLMs - their ability to respond to natural language instructions without clearly distinguishing between developer instructions and user inputs[</span>1].</p>\n<p>These attacks come in two primary forms: direct and indirect. Direct prompt injections involve users directly manipulating the chatbot through carefully crafted prompts, while indirect prompt injections embed malicious instructions in external content that is later processed by the LLM[3]. This vulnerability is particularly concerning because current LLM technology has no reliable way to separate data from instructions, making these attacks fundamentally difficult to prevent[4].</p>\n<h2>Types of Prompt Injection Vulnerabilities</h2>\n<h3>Direct Prompt Injection</h3>\n<p>Direct prompt injection occurs when users explicitly input prompts designed to override the system's guardrails. A notable example is when a Stanford University student got Microsoft's Bing Chat to reveal its underlying programming by simply asking it to \"Ignore previous instructions\" and reveal what was written at the beginning of its document[1]. These attacks can range from basic attempts to bypass restrictions to sophisticated manipulations that extract sensitive information.</p>\n<h3>Indirect Prompt Injection</h3>\n<p>Indirect prompt injection represents a more insidious threat, where attackers embed malicious instructions in<span style=\"background-color: #5fb23680\"> external data sources like documents, websites, or emails</span> that the LLM later processes[3]. This attack vector is particularly dangerous because:</p>\n<ol>\n<li>\nUsers typically cannot detect these attacks by inspecting the sources themselves\n</li>\n<li>\nThe commands can be both hidden and encoded\n</li>\n<li>\nEven internal-facing applications are vulnerable if they process external data[4]\n</li>\n</ol>\n<h2>Comprehensive List of Dangers from Prompt Injection Attacks</h2>\n<h3>1. Unauthorized Data Exposure and Privacy Breaches</h3>\n<p>LLM-based chatbots may be tricked into revealing confidential information they have access to. This can include:</p>\n<ul>\n<li>\nLeaking sensitive business information and trade secrets\n</li>\n<li>\nExposing personal user data in violation of privacy laws\n</li>\n<li>\nRevealing system details that facilitate further attacks[1][2]\n</li>\n</ul>\n<p>AI assistants used in banking, legal, and medical settings are particularly vulnerable, as they often have access to highly confidential client information that could be extracted through injection techniques[2].</p>\n<h3>2. System Instruction Disclosure</h3>\n<p>Attackers can force chatbots to reveal their underlying programming instructions (system prompts), which:</p>\n<ul>\n<li>\nExposes security mechanisms and detection techniques\n</li>\n<li>\nProvides valuable information for crafting more sophisticated attacks\n</li>\n<li>\nAllows attackers to understand exactly what guardrails they need to overcome[1]\n</li>\n</ul>\n<h3>3. Circumvention of Safety Guardrails</h3>\n<p>Prompt injections can enable attackers to bypass the ethical and safety boundaries programmed into LLMs, potentially causing:</p>\n<ul>\n<li>\nGeneration of harmful, illegal, or inappropriate content\n</li>\n<li>\nProduction of responses that violate the organization's policies\n</li>\n<li>\nCreation of content that could damage brand reputation or violate regulations[1][6]\n</li>\n</ul>\n<h3>4. Spread of Misinformation and Manipulation</h3>\n<p>Compromised LLMs can be weaponized to:</p>\n<ul>\n<li>\nGenerate convincing false information that appears authoritative\n</li>\n<li>\nManipulate outputs to produce misleading content\n</li>\n<li>\nCreate biased responses that favor particular viewpoints[5][6]\n</li>\n</ul>\n<p>For example, financial research applications influenced by injected prompts could return incorrect stock market insights, leading to misinformed investment decisions[2].</p>\n<h3>5. Unauthorized Action Execution</h3>\n<p>When LLMs are integrated with other systems via APIs, prompt injections can trigger unauthorized actions with significant consequences:</p>\n<ul>\n<li>\nForwarding private documents to unauthorized recipients\n</li>\n<li>\nEditing or deleting sensitive files\n</li>\n<li>\nSending emails or messages under the user's identity\n</li>\n<li>\nPublishing private information to public repositories[1][3][4]\n</li>\n</ul>\n<h3>6. Business Email Compromise</h3>\n<p>Attackers can use LLM-powered email assistants to:</p>\n<ul>\n<li>\nProcess malicious emails containing injected prompts\n</li>\n<li>\nExecute embedded instructions that exfiltrate sensitive information\n</li>\n<li>\nAccess email accounts and extract information from recent communications[3][4]\n</li>\n</ul>\n<h3>7. Financial and Reputational Damage</h3>\n<p>Real-world examples demonstrate significant business impacts:</p>\n<ul>\n<li>\nA Chevrolet dealership chatbot was manipulated to offer vehicles at $1, creating both financial and reputational risks[3]\n</li>\n<li>\nA DPD chatbot was tricked into insulting its own company, causing public embarrassment[3]\n</li>\n<li>\nManipulated financial advice could lead to poor investment decisions and potential liability[2]\n</li>\n</ul>\n<h3>8. Compliance Violations and Legal Liability</h3>\n<p>LLM prompt injections can trigger serious legal consequences:</p>\n<ul>\n<li>\nExposure of personally identifiable information in violation of GDPR\n</li>\n<li>\nLeaking of protected health information contrary to HIPAA requirements\n</li>\n<li>\nCreation of liability for incorrect advice or information provided to customers[2][3]\n</li>\n</ul>\n<h3>9. Social Engineering Through Chatbots</h3>\n<p>Compromised chatbots can be weaponized for social engineering by:</p>\n<ul>\n<li>\nPrompting users to visit malicious links\n</li>\n<li>\nAttempting to obtain sensitive information like credit card details\n</li>\n<li>\nBuilding false trust with users through seemingly legitimate interactions[4][6]\n</li>\n</ul>\n<h3>10. Container Breakouts and System Compromise</h3>\n<p>In more severe cases involving autonomous LLM agents:</p>\n<ul>\n<li>\nAttackers could break out of containers hosting LLM applications\n</li>\n<li>\nGain root privileges on the target system\n</li>\n<li>\nAccess other sensitive systems within the organization's infrastructure[4]\n</li>\n</ul>\n<h3>11. Phishing and Credential Harvesting</h3>\n<p>Manipulated chatbots can conduct sophisticated phishing by:</p>\n<ul>\n<li>\nRequesting authentication credentials under false pretenses\n</li>\n<li>\nCreating convincing but deceptive explanations for why credentials are needed\n</li>\n<li>\nHarvesting sensitive information through seemingly legitimate interactions[5][6]\n</li>\n</ul>\n<h3>12. Plugin and Integration Exploitation</h3>\n<p>LLMs with activated plugins or system integrations are particularly vulnerable:</p>\n<ul>\n<li>\nChatbots could be forced to call additional plugins and perform unwanted actions\n</li>\n<li>\nAccess connected systems with the chatbot's privileges\n</li>\n<li>\nChain together multiple system actions to achieve complex attack objectives[4][5]\n</li>\n</ul>\n<h2>Mitigation Challenges</h2>\n<p>What makes prompt injection particularly concerning is that there is currently no foolproof solution to prevent these attacks. The Federal Office for Information Security in Germany (BSI) notes that this is \"an intrinsic weakness of the current technology\" since there is no clear separation between data and instructions in LLM-based systems[4].</p>\n<p>Current mitigation approaches often significantly limit LLM functionality, creating a challenging security-usability tradeoff[4]. This fundamental vulnerability exists because LLMs process both information and commands through the same channel - natural language - making the distinction between legitimate requests and attacks extremely difficult to determine reliably[6].</p>\n<h2>Conclusion</h2>\n<p>Prompt injection attacks represent a significant and evolving threat to LLM-based chatbot systems. As organizations increasingly deploy these AI systems across sensitive domains like healthcare, finance, and customer service, understanding and addressing these vulnerabilities becomes critical. The dangers span from data leakage and misinformation to system compromise and regulatory violations, with potential impacts on individual privacy, organizational reputation, and financial stability.</p>\n<p>What makes these threats particularly concerning is that they exploit fundamental features of how LLMs work rather than implementation errors, making them difficult to eliminate completely without significant functionality trade-offs. As LLM adoption continues to accelerate, developing robust detection and mitigation strategies for prompt injection attacks remains an urgent priority for the AI security community.</p>\n<p>Citations: [1] <a href=\"https://www.ibm.com/think/topics/prompt-injection\" rel=\"noopener noreferrer nofollow\">https://www.ibm.com/think/topics/prompt-injection</a> [2] <a href=\"https://www.lakera.ai/blog/guide-to-prompt-injection\" rel=\"noopener noreferrer nofollow\">https://www.lakera.ai/blog/guide-to-prompt-injection</a> [3] <a href=\"https://blue41.cs.kuleuven.be/blog/real-world-attacks-on-llm-applications/\" rel=\"noopener noreferrer nofollow\">https://blue41.cs.kuleuven.be/blog/real-world-attacks-on-llm-applications/</a> [4] <a href=\"https://www.bsi.bund.de/SharedDocs/Cybersicherheitswarnungen/EN/2023/2023-249034-1032.pdf?__blob=publicationFile&amp;v=5\" rel=\"noopener noreferrer nofollow\">https://www.bsi.bund.de/SharedDocs/Cybersicherheitswarnungen/EN/2023/2023-249034-1032.pdf?__blob=publicationFile&amp;v=5</a> [5] <a href=\"https://www.keysight.com/blogs/en/inds/ai/prompt-injection-101-for-llm\" rel=\"noopener noreferrer nofollow\">https://www.keysight.com/blogs/en/inds/ai/prompt-injection-101-for-llm</a> [6] <a href=\"https://www.lrqa.com/en/cyber-labs/artificial-intelligenceai-prompt-injection/\" rel=\"noopener noreferrer nofollow\">https://www.lrqa.com/en/cyber-labs/artificial-intelligenceai-prompt-injection/</a> [7] <a href=\"https://www.altimetrik.com/blog/ai-security-prompt-injection-attacks\" rel=\"noopener noreferrer nofollow\">https://www.altimetrik.com/blog/ai-security-prompt-injection-attacks</a> [8] <a href=\"https://www.netspi.com/blog/technical-blog/ai-ml-pentesting/how-to-exploit-a-generative-ai-chatbot-using-prompt-injection/\" rel=\"noopener noreferrer nofollow\">https://www.netspi.com/blog/technical-blog/ai-ml-pentesting/how-to-exploit-a-generative-ai-chatbot-using-prompt-injection/</a> [9] <a href=\"https://www.datadoghq.com/blog/monitor-llm-prompt-injection-attacks/\" rel=\"noopener noreferrer nofollow\">https://www.datadoghq.com/blog/monitor-llm-prompt-injection-attacks/</a> [10] <a href=\"https://learnprompting.org/docs/prompt_hacking/injection\" rel=\"noopener noreferrer nofollow\">https://learnprompting.org/docs/prompt_hacking/injection</a> [11] <a href=\"https://www.deepchecks.com/prompt-injection-attacks-impact-and-prevention/\" rel=\"noopener noreferrer nofollow\">https://www.deepchecks.com/prompt-injection-attacks-impact-and-prevention/</a> [12] <a href=\"https://www.codementor.io/@danielamah/understanding-sql-injection-vulnerabilities-in-llm-chatbots-chatgpt-claude-and-gemini-2hs2lmhiit\" rel=\"noopener noreferrer nofollow\">https://www.codementor.io/@danielamah/understanding-sql-injection-vulnerabilities-in-llm-chatbots-chatgpt-claude-and-gemini-2hs2lmhiit</a> [13] <a href=\"https://developer.nvidia.com/blog/securing-llm-systems-against-prompt-injection/\" rel=\"noopener noreferrer nofollow\">https://developer.nvidia.com/blog/securing-llm-systems-against-prompt-injection/</a> [14] <a href=\"https://www.wiz.io/academy/prompt-injection-attack\" rel=\"noopener noreferrer nofollow\">https://www.wiz.io/academy/prompt-injection-attack</a> [15] <a href=\"https://genai.owasp.org/llmrisk2023-24/llm01-24-prompt-injection/\" rel=\"noopener noreferrer nofollow\">https://genai.owasp.org/llmrisk2023-24/llm01-24-prompt-injection/</a> [16] <a href=\"https://www.apriorit.com/dev-blog/prompt-injection-protection-for-ai-chatbots\" rel=\"noopener noreferrer nofollow\">https://www.apriorit.com/dev-blog/prompt-injection-protection-for-ai-chatbots</a> [17] <a href=\"https://portswigger.net/web-security/llm-attacks\" rel=\"noopener noreferrer nofollow\">https://portswigger.net/web-security/llm-attacks</a> [18] <a href=\"https://academy.test.io/en/articles/9353170-llm-testing-prompt-injection\" rel=\"noopener noreferrer nofollow\">https://academy.test.io/en/articles/9353170-llm-testing-prompt-injection</a> [19] <a href=\"https://www.invicti.com/white-papers/prompt-injection-attacks-on-llm-applications-ebook/\" rel=\"noopener noreferrer nofollow\">https://www.invicti.com/white-papers/prompt-injection-attacks-on-llm-applications-ebook/</a> [20] <a href=\"https://genai.owasp.org/llmrisk/llm01-prompt-injection/\" rel=\"noopener noreferrer nofollow\">https://genai.owasp.org/llmrisk/llm01-prompt-injection</a></p>\n</div>",
                "tags": [],
                "collections": [
                    "ISYQWLG8"
                ],
                "relations": {},
                "dateAdded": "2025-03-31T08:46:31Z",
                "dateModified": "2025-03-31T08:59:03Z"
            }
        },
        {
            "key": "3LUXVEJU",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/3LUXVEJU",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/3LUXVEJU",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "3LUXVEJU",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>02 OWASP Top 1-3: Broken Access Control, Cryptographic Failures, and Injection</h1>\n<ul>\n<li>\n<strong>Broken Access Control:</strong> Attackers can perform actions outside their intended permissions. Prevention includes limited privileges, regular checks, limiting public information, disabling directory listings, and monitoring server logs.\n</li>\n<li>\n<strong>Cryptographic Failures:</strong> Sensitive data is exposed due to weak or traditional encryption. Prevention involves authenticated encryption for data at rest and in transit, using HTTPS, avoiding old protocols, and secure key management.\n</li>\n<li>\n<strong>Injection:</strong> Untrusted data is sent to an interpreter, causing unintended command execution. Prevention includes secure APIs, parameterized interfaces, blocking keywords, and sanitizing statements.\n</li>\n</ul>\n<h2>Broken Access Control</h2>\n<p>Broken access control is the top vulnerability in the 2022 OWASP Top 10. It occurs when attackers can bypass security restrictions and gain unauthorized access to features or data within an application or system. This can lead to serious consequences like data breaches, reputational damage, and financial losses. Attackers often manipulate URLs, for example, by changing user IDs, to see if they can access resources they shouldn't.</p>\n<p><strong>Prevention Methods:</strong></p>\n<ul>\n<li>\n<strong>Assign Limited Privileges:</strong> Grant users only the necessary permissions for their roles, preventing them from accessing other parts of the system.\n</li>\n<li>\n<strong>Regular Access Control Checks:</strong> Periodically review and update user access rights to ensure they align with their current roles and responsibilities, both horizontally (accessing different resources at the same level) and vertically (accessing higher-level resources).\n</li>\n<li>\n<strong>Limit Public Information:</strong> Avoid exposing unnecessary details about your application's internal workings, as this can provide attackers with valuable information.\n</li>\n<li>\n<strong>Disable Directory Listings:</strong> Prevent attackers from seeing the structure of your web server's directories by disabling directory listing in URLs.\n</li>\n<li>\n<strong>Monitor Server Logs:</strong> Regularly check server logs for any recorded access control failures and take immediate action if any are detected.\n</li>\n</ul>\n<h2>Cryptographic Failures</h2>\n<p>Cryptographic failures happen when sensitive data is not properly protected using encryption. If weak or outdated encryption methods are used, attackers can easily decrypt the data and gain access to confidential information like user IDs or credit card numbers. Using HTTP instead of HTTPS also makes data transmission vulnerable.</p>\n<p><img alt=\"\" data-attachment-key=\"Y658WW9C\" width=\"1136\" height=\"500\"></p>\n<p><strong>Prevention Methods:</strong></p>\n<ul>\n<li>\n<strong>Authenticated Encryption:</strong> Use strong, authenticated encryption algorithms for all sensitive data stored in the database. This ensures both confidentiality and integrity.\n</li>\n<li>\n<strong>Encrypt Data in Transit and at Rest:</strong> Encrypt all data while it's being transmitted (e.g., using HTTPS) and when it's stored (at rest).\n</li>\n<li>\n<strong>Use HTTPS:</strong> Always use HTTPS for your website to ensure that data transmitted between the user's browser and the server is encrypted.\n</li>\n<li>\n<strong>Avoid Old Protocols:</strong> Do not use outdated protocols like SMTP and FTP, as they are susceptible to man-in-the-middle attacks.\n</li>\n<li>\n<strong>Secure Key Management:</strong> <span style=\"background-color: #5fb23680\">Implement a robust key lifecycle and management process for encryption keys</span>. Never hardcode keys in the application. Limit each key to a specific purpose, back them up securely, and store them safely.\n</li>\n</ul>\n<h2>Injection</h2>\n<p>Injection attacks occur when attackers insert malicious code or data into an application's input fields, which is then executed by the system's interpreter. This can allow attackers to run unauthorized commands, access sensitive data, or even take control of the system. Common types of injection attacks include SQL injection, operating system command injection, HTTP Host header injection, LDAP injection, cross-site scripting (XSS) code injection, and general code injection.</p>\n<p><strong>Prevention Methods:</strong></p>\n<ul>\n<li>\n<strong>Use Secure APIs:</strong> Utilize secure APIs that are designed to prevent injection vulnerabilities by avoiding direct interaction with interpreters.\n</li>\n<li>\n<strong>Parameterized Interfaces:</strong> Employ parameterized queries or prepared statements when interacting with databases. This separates the SQL code from the user-supplied data, preventing malicious code from being injected.\n</li>\n<li>\n<strong>Block Keywords and Special Characters:</strong> Implement input validation and sanitization to block known malicious keywords and special characters. Regularly update the blacklist of such characters.\n</li>\n<li>\n<strong>Sanitize Statements:</strong> Check user input to identify and neutralize potentially harmful statements, such as specific SQL <code>SELECT</code> statements used in attacks.\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "ISYQWLG8"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:24:56Z",
                "dateModified": "2025-03-31T08:42:08Z"
            }
        },
        {
            "key": "JHRH59JZ",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/JHRH59JZ",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/JHRH59JZ",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "JHRH59JZ",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>01 Intro to OWASP (Top 10) Sec Vulnerabilities</h1>\n<ul>\n<li>\nOWASP is the Open Web Application Security Project, focusing on software security.\n</li>\n<li>\nThe OWASP Top 10 is a report identifying current software security vulnerabilities.\n</li>\n<li>\nThe current (2021) OWASP Top 10 includes: Broken Access Control, Cryptographic Failures, Injection, Insecure Design, Security Misconfiguration, Vulnerable and Outdated Components, Identification and Authentication Failures, Software and Data Integrity Failures, Security Logging and Monitoring Failures, and Server-Side Request Forgery.\n</li>\n<li>\nThe OWASP Top 10 is developed through a five-step process: planning and data call, industry survey, data analysis, drafting with data and survey categories, and reaching consensus for release.\n</li>\n<li>\nThe OWASP Top 10 can be used to identify risks, improve security processes, and secure code.\n</li>\n</ul>\n<h2>Introduction to OWASP</h2>\n<p>The Open Web Application Security Project (OWASP) is a foundation established in 2003 that centers on enhancing software security. It provides valuable resources to the security industry, most notably the OWASP Top 10.</p>\n<h2>The OWASP Top 10</h2>\n<p>The OWASP Top 10 is a widely recognized report that highlights the most critical current software security vulnerabilities. It is the result of a collaborative effort involving the OWASP core team, security analysts, organizations, and other experts. This report serves as a de facto standard for evaluating web application security globally. The OWASP Top 10 is updated periodically to reflect the evolving threat landscape. Each category in the Top 10 is supported by data such as Common Weakness Enumeration (CWE) mappings, incidence rates, and testing coverage. OWASP encourages community participation in contributing data and content to the list. Organizations and developers can leverage the OWASP Top 10 to understand potential risks, refine their security practices, and ensure the security of their software code.</p>\n<h2>Current OWASP Top 10 (2021)</h2>\n<p>The 2021 OWASP Top 10 list of security vulnerabilities includes:</p>\n<ol>\n<li>\n<strong>Broken Access Control:</strong> Failures in restricting user access to resources, potentially leading to unauthorized information disclosure or data manipulation.\n</li>\n<li>\n<strong>Cryptographic Failures:</strong> Issues related to the improper implementation or use of cryptography, which can result in sensitive data exposure.\n</li>\n<li>\n<strong>Injection:</strong> Vulnerabilities that occur when untrusted data is sent to an interpreter as part of a command or query, leading to potential attacks.\n</li>\n<li>\n<strong>Insecure Design:</strong> Flaws and weaknesses in the design and architecture of an application's controls.\n</li>\n<li>\n<strong>Security Misconfiguration:</strong> Improperly configured security settings, including features enabled incorrectly or other configuration errors.\n</li>\n<li>\n<strong>Vulnerable and Outdated Components:</strong> Security issues arising from using outdated or vulnerable software components, including libraries and frameworks.\n</li>\n<li>\n<strong>Identification and Authentication Failures:</strong> Weaknesses in verifying user identities and managing authentication, such as password issues and automated attacks.\n</li>\n<li>\n<strong>Software and Data Integrity Failures:</strong> Violations of data integrity, often originating from untrusted sources, without proper validation.\n</li>\n<li>\n<strong>Security Logging and Monitoring Failures:</strong> Insufficient logging and monitoring of security events, hindering the detection and response to breaches.\n</li>\n<li>\n<strong>Server-Side Request Forgery (SSRF):</strong> Vulnerabilities that allow an attacker to make the server send requests to unintended locations, often due to URL validation failures.\n</li>\n</ol>\n<p>The OWASP Top 10 provides guidance on identifying and mitigating these vulnerabilities.</p>\n<h2>Development Process of the OWASP Top 10</h2>\n<p>The OWASP core team follows a structured five-step process to develop the Top 10 list:</p>\n<ol>\n<li>\n<strong>Plan Schedule and Call for Data:</strong> The process begins with planning the timeline for the update and issuing a public call for security vulnerability data.\n</li>\n<li>\n<strong>Determine Survey Content and Request Industry Participation:</strong> OWASP defines the content for an industry survey and invites security professionals and organizations to participate.\n</li>\n<li>\n<strong>Collect, Normalize, and Analyze Data:</strong> The collected data from various sources, including the industry survey, is then processed, standardized, and analyzed to identify trends and prevalent vulnerabilities.\n</li>\n<li>\n<strong>Determine Categories and Release Draft:</strong> Based on the data analysis and survey results, eight categories are derived from the data, and two additional categories are selected from the survey. A draft version of the OWASP Top 10 list is then released for public review and feedback. This public review helps in identifying any overlooked issues and refining the list.\n</li>\n<li>\n<strong>Reach Consensus and Release:</strong> After considering the feedback from the public review and reaching a consensus among the OWASP core team, the final version of the OWASP Top 10 is released to the public.\n</li>\n</ol>\n<p><img alt=\"\" data-attachment-key=\"IEMK2T86\" width=\"1188\" height=\"503\"></p>\n<h2>Conclusion</h2>\n<p>The OWASP Top 10 is a crucial resource for understanding and addressing the most significant web application security risks. By understanding the vulnerabilities listed and the process behind its creation, developers and organizations can proactively improve their security posture and develop more secure software.</p>\n</div>",
                "tags": [],
                "collections": [
                    "ISYQWLG8"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:24:37Z",
                "dateModified": "2025-03-31T08:34:16Z"
            }
        },
        {
            "key": "A9XKYQF3",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/A9XKYQF3",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/A9XKYQF3",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "A9XKYQF3",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>00 Cheat Sheet: Security Testing and Mitigation Strategies</h1>\n<p></p>\n<table>\n<tbody>\n<tr>\n<th>\n<p>Package/Method</p>\n</th>\n<th>\n<p>Description</p>\n</th>\n<th>\n<p>Code Example</p>\n</th>\n</tr>\n<tr>\n<td>\n<p>bash</p>\n</td>\n<td>\n<p>Bash, or the Bourne Again Shell command, is a command-line interpreter commonly used in Unix-based operating systems. It runs in a text window where the user can interpret commands to carry out various actions.</p>\n</td>\n<td>\n<p><code>bash #!/bin/bash # Loop from 1 to 3 and print the numbers for i in {1..3}; do echo \"Number: $i\" done</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>alias</p>\n</td>\n<td>\n<p>Lets you create a shortcut name for a command, file name, or any shell text. Using aliases saves a lot of time when performing frequent tasks.</p>\n</td>\n<td>\n<p><code>bash alias [new-name[=command] </code>Example 1: <code>alias cdv=\"cd C:\\Users\\Videos\"</code> <code>cdv</code> Example 2: <code>alias -p</code> Example 3: <code>unalias -a</code> Example 4: <code>unalias cdv</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>cd</p>\n</td>\n<td>\n<p>Used to move efficiently from the existing working directory to different directories on your system.</p>\n</td>\n<td>\n<p><code>bash cd [options] [directory] </code>Example 1: <code>cd /usr/local/folder1</code> Example 2: <code>cd -</code> Example 3: <code>cd ..</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>dependency-check</p>\n</td>\n<td>\n<p>OWASP dependency-check is a software composition analysis utility that detects publicly disclosed vulnerabilities in application dependencies.</p>\n</td>\n<td>\n<p><code>bash dependency-check.bat [options] --scan[directory] --out [directory] </code>Options: <code>project</code>: The name of your project as it should appear in the report <code>scan [directory]</code>: The folder which contains the 3rd party dependency libraries <code>out [directory]</code>: The folder where the vulnerability analysis reports should be exported to Example 1: <code>dependency-check.bat --project \"my_project\" --scan \"c:\\java\\application\\lib\"</code> Example 2: <code>dependency-check.sh --project \"my_project\" --scan \"/java/application/lib\"</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>docker network</p>\n</td>\n<td>\n<p>You can use this code to manage networks. The subcommands can be used to create, inspect, list, remove, prune, connect, and disconnect networks.</p>\n</td>\n<td>\n<p><code>bash docker network create my_network docker network inspect my_network</code> <code>docker network ls</code> <code>docker network rm NETWORK_NAME_OR_ID</code> <code>docker network prune</code> <code>docker network connect NETWORK_NAME CONTAINER_NAME_OR_ID</code> <code>docker network disconnect NETWORK_NAME CONTAINER_NAME_OR_ID</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>docker ps</p>\n</td>\n<td>\n<p>Lists the running containers by default. We can use different flags to get the list of other containers that are in stopped or exited status.</p>\n</td>\n<td>\n<p><code>bash docker ps [OPTIONS] docker ps -a</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>docker pull</p>\n</td>\n<td>\n<p>You can download Docker images from the internet.</p>\n</td>\n<td>\n<p><code>bash docker pull [OPTIONS] IMAGE_NAME[:TAG]</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>docker run</p>\n</td>\n<td>\n<p>It runs a command in a new container, getting the image and starting the container if needed.</p>\n</td>\n<td>\n<p><code>bash docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>git clone</p>\n</td>\n<td>\n<p>You can create a copy of a specific repository or branch within a repository.</p>\n</td>\n<td>\n<p><code>bash git clone REPOSITORY_URL [DESTINATION_DIRECTORY]</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>jake</p>\n</td>\n<td>\n<p>Jake is a simple JavaScript build program with capabilities similar to the regular make or rake command.</p>\n</td>\n<td>\n<p><code>bash jake ddt</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>jq</p>\n</td>\n<td>\n<p>Used to transform JSON data into a more readable format and print it to the standard output on Linux.</p>\n</td>\n<td>\n<p><code>bash jq [options] [filter] [file] </code>Example 1: <code>jq '.' example.json</code> Example 2: <code>jq '.[].color' example.json</code> <code>jq 'map(has(\"color\"))' example.json</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>ls</p>\n</td>\n<td>\n<p>Basic Linux command used for listing information regarding files and directories within the file system.</p>\n</td>\n<td>\n<p><code>bash ls [options] [file/directory] </code>Example 1: <code>ls -lt</code> <code>ls -ltr</code> Example 2: <code>ls -a</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>pip</p>\n</td>\n<td>\n<p>To ensure that requests will function, the pip program searches for the package in the Python Package Index (PyPI), resolves any dependencies and installs everything in your current Python environment.</p>\n</td>\n<td>\n<p><code>bash pip list pip install example_package</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>sonar-scanner</p>\n</td>\n<td>\n<p>The SonarScanner CLI is the scanner to use when there is no specific scanner for your build system.</p>\n</td>\n<td>\n<p><code>bash sonar-scanner [options] </code>Example: <code>sonar-scanner -h</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>wget</p>\n</td>\n<td>\n<p>Stands for web get. The <code>wget</code> is a free non-interactive file downloader command. Non-interactive means it can work in the background when the user is not logged in.</p>\n</td>\n<td>\n<p><code>bash wget [options] </code>Example 1: <code>wget http://example.com/file.txt</code> Example 2: <code>wget -b http://www.example.org/files/archive.zip</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>which</p>\n</td>\n<td>\n<p>Used to locate the executable file associated with the given command by searching it in the path environment variable.</p>\n</td>\n<td>\n<p><code>bash which [option] [filename1] [filename2] </code>Example 1: <code>which java</code> Example 2: <code>which java python</code> Example 3: <code>which -a python</code></p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>",
                "tags": [],
                "collections": [
                    "7MX6TR9K"
                ],
                "relations": {},
                "dateAdded": "2025-03-31T08:21:46Z",
                "dateModified": "2025-03-31T08:25:55Z"
            }
        },
        {
            "key": "96BC9E2D",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/96BC9E2D",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/96BC9E2D",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "96BC9E2D",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>00 Summary and Glossary</h1>\n<ul>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Secure code review focuses on threats that are exposed or source code that contains security-critical components.\u202f</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Automated code reviews evaluate large codebases quickly and efficiently.\u202f</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Three vulnerability tools you can use are Burp Suite, Nessus, and ZAP.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Training, policy updating, and process automation are best practices to follow in vulnerability analysis.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Runtime protection is a security mechanism that protects your applications against vulnerabilities while they are running.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">The goal of software component analysis (SCA) is to discover open-source components in a codebase so that you can better manage security and license compliance risks.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Continuous security analysis reduces risks, removes bottlenecks in software development, and accelerates new feature development.</span></span>\n</li>\n</ul>\n<h1>Application Security for Developers and DevOps Professionals</h1>\n<table>\n<tbody>\n<tr>\n<th>\n<p>Term</p>\n</th>\n<th>\n<p>Definition</p>\n</th>\n</tr>\n<tr>\n<td>\n<p>Ad hoc testing</p>\n</td>\n<td>\n<p>Random, informal testing without a plan for the discovery of a vulnerability.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>BDD-Security</p>\n</td>\n<td>\n<p>A security testing framework that uses behavior-driven development.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Burp Suite</p>\n</td>\n<td>\n<p>A vulnerability scanner that is popular for scanning web applications. You can set up automated scans of a website or perform manual scanning by crawling the overall structure of a website or web application.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Code review</p>\n</td>\n<td>\n<p>In code review, you use automated static analysis security testing and perform manual code inspection.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>DAST</p>\n</td>\n<td>\n<p>Dynamic application security testing (or DAST) evaluates the application from the outside in through the front end.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Dynamic analysis</p>\n</td>\n<td>\n<p>Dynamic analysis is the process of testing and evaluating an application as it is executing.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Exploratory testing</p>\n</td>\n<td>\n<p>Takes place outside of formal testing.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>GitHub SCA</p>\n</td>\n<td>\n<p>It is for viewing dependency packages and vulnerabilities while using GitHub.com.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>GPL</p>\n</td>\n<td>\n<p>General Public License.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Guantlt</p>\n</td>\n<td>\n<p>A security framework that hooks into security tools for simplified integration.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Integration tests</p>\n</td>\n<td>\n<p>For testing the integration of several coded classes within an application. You can perform integration tests across application tiers and a wide testing scope.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>IAST</p>\n</td>\n<td>\n<p>Interactive Application Self-testing (or IAST) scans for vulnerabilities during testing.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>JSON</p>\n</td>\n<td>\n<p>JavaScript Object Notation.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Mittn</p>\n</td>\n<td>\n<p>Popular tool suite to include in continuous integration.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Nessus</p>\n</td>\n<td>\n<p>It is a vulnerability scanner that scans operating systems, network devices, and critical infrastructure for vulnerabilities, threats, and compliance violations.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>OWASP</p>\n</td>\n<td>\n<p>Open Web Application Security Project.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>OWASP Dependency-Check</p>\n</td>\n<td>\n<p>It is an SCA for checking for vulnerabilities within project dependencies.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>OWASP Dependency-Track</p>\n</td>\n<td>\n<p>It is an SCA for identifying any risks within the software supply chain.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>OWASP Software Component Verification Standard</p>\n</td>\n<td>\n<p>It is a community-supported effort to build a sustainable framework for reducing risk within a software supply chain.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>RASP</p>\n</td>\n<td>\n<p>Runtime Application Self-Protection (or RASP) looks for assaults in the production environment.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Runtime protection</p>\n</td>\n<td>\n<p>Runtime protection is a modern security mechanism that shields applications against threats while the applications are running.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>SALSA</p>\n</td>\n<td>\n<p>Supply-chain Levels for Software Artifacts (or SALSA) provides a security framework for improving integrity and preventing tampering by implementing standards and controls.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>SAST</p>\n</td>\n<td>\n<p>Static application security testing (or SAST) examines source code to identify security flaws that render your organization's applications vulnerable to attack.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>SCA</p>\n</td>\n<td>\n<p>Software component analysis (or SCA) is the process of determining which open-source components and dependencies are used in your application.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>SCM</p>\n</td>\n<td>\n<p>Source control management.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Security testing</p>\n</td>\n<td>\n<p>Security testing provides a secure code baseline for development. It should be performed on all new codes to reduce the risk of impacts.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Snyk</p>\n</td>\n<td>\n<p>A developer security platform for securing code, dependencies, containers, and infrastructure as code.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Static analysis</p>\n</td>\n<td>\n<p>Static analysis examines all code or runtime binaries to help detect common vulnerabilities without executing code or running programs.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>SWID Tags</p>\n</td>\n<td>\n<p>Software Identification Tags (or SWID Tags) are standard to track software installed on managed devices.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Unit testing</p>\n</td>\n<td>\n<p>For testing classes and methods to evaluate application programming interface (or API) contracts. You can perform unit testing on individual classes with limited scope.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Vulnerability analysis</p>\n</td>\n<td>\n<p>It is a method of identifying possible application flaws that could jeopardize your application.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>XML</p>\n</td>\n<td>\n<p>Extensible Markup Language.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>ZAP</p>\n</td>\n<td>\n<p>Zed Attack Proxy (or Zap) is a vulnerability scanner. It is an OWASP tool and open-source software that uses spiders to crawl web applications.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>",
                "tags": [],
                "collections": [
                    "7MX6TR9K"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:24:23Z",
                "dateModified": "2025-03-31T08:25:21Z"
            }
        },
        {
            "key": "3JHIAGVR",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/3JHIAGVR",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/3JHIAGVR",
                    "type": "text/html"
                },
                "enclosure": {
                    "href": "file:///home/schweizer/Zotero/storage/3JHIAGVR/08%20Hands-on%20Lab%20Evaluate%20Software%20Component%20Analysis.pdf",
                    "type": "application/pdf",
                    "title": "08 Hands-on Lab Evaluate Software Component Analysis.pdf",
                    "length": 573407
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "3JHIAGVR",
                "version": 0,
                "itemType": "attachment",
                "title": "08 Hands-on Lab Evaluate Software Component Analysis",
                "linkMode": "imported_file",
                "contentType": "application/pdf",
                "charset": "",
                "filename": "08 Hands-on Lab Evaluate Software Component Analysis.pdf",
                "tags": [],
                "collections": [
                    "7MX6TR9K"
                ],
                "relations": {},
                "dateAdded": "2025-03-31T07:47:52Z",
                "dateModified": "2025-03-31T07:47:52Z"
            }
        },
        {
            "key": "IJQEXH8F",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/IJQEXH8F",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/IJQEXH8F",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "IJQEXH8F",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>07 Evaluate Software component analysis</h1>\n<ul>\n<li>\n<strong>Definition:</strong> SCA is an automated process that scans software to identify open-source components and libraries used.\n</li>\n<li>\n<strong>Purpose:</strong> To detect known vulnerabilities and licensing issues associated with open-source components.\n</li>\n<li>\n<strong>Scanning Scope:</strong> Can analyze raw source code, container binaries, and OS components.\n</li>\n<li>\n<p><strong>Benefits:</strong></p>\n<ul>\n<li>\n<strong>Licensing Clarity:</strong> Avoids fines by identifying license requirements for open-source components.\n</li>\n<li>\n<strong>Vulnerability Management:</strong> Quickly spots known vulnerabilities in open-source parts for faster remediation.\n</li>\n<li>\n<strong>S-BOMs:</strong> Generates a Software Bill of Materials, listing all components for transparency and compliance.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Comparison with SAST:</strong></p>\n<ul>\n<li>\n<span style=\"background-color: #5fb23680\">SCA focuses on vulnerabilities in </span><em><span style=\"background-color: #5fb23680\">open-source</span></em><span style=\"background-color: #5fb23680\"> components</span>.\n</li>\n<li>\nStatic Application Security Testing (SAST) focuses on <span style=\"background-color: #5fb23680\">vulnerabilities in </span><em><span style=\"background-color: #5fb23680\">closed-source</span></em><span style=\"background-color: #5fb23680\"> (custom) code.</span>\n</li>\n<li>\nSCA often offers simpler solutions for identified open-source issues compared to fixing bugs in custom code.\n</li>\n</ul>\n</li>\n<li>\n<strong>Implementation:</strong> Can be used before and after compilation; tools like OWASP Dependency Check identify dependencies and known vulnerabilities.\n</li>\n<li>\n<strong>Importance:</strong> Crucial for secure software development, API security, regulatory compliance, and maintaining service availability.\n</li>\n</ul>\n<hr>\n<h1>Software Composition Analysis (SCA) Overview</h1>\n<h2>Introduction to SCA</h2>\n<p>Software Composition Analysis (SCA) is a vital automated process in software security. It focuses on scanning open-source software used within a project. The primary goal is to identify all the open-source libraries and components being utilized, helping security experts ensure software integrity and guard against potential security weaknesses.</p>\n<h2>Understanding SCA</h2>\n<p>SCA functions by automatically examining various parts of a software project, including:</p>\n<ul>\n<li>\nRaw source code\n</li>\n<li>\nContainer binaries\n</li>\n<li>\nOperating system components\n</li>\n</ul>\n<p>The process involves parsing the code and comparing the identified open-source components against extensive databases of known vulnerabilities associated with those components.</p>\n<h2>Benefits of Utilizing SCA</h2>\n<p>Implementing SCA offers several key advantages for software development teams and organizations:</p>\n<h3>Licensing Clarity</h3>\n<p>SCA tools meticulously analyze the licenses associated with all identified open-source components. This helps organizations avoid legal issues and potentially large fines that can arise from non-compliance with open-source licensing terms. It ensures awareness of all license obligations for components included in software products.</p>\n<h3>Vulnerability Management</h3>\n<p>A major benefit is the rapid identification of known security vulnerabilities within the open-source components. This provides security teams with a clear view of existing risks, enabling them to prioritize and address these weaknesses promptly, thereby reducing the window of opportunity for attackers.</p>\n<h3>Software Bill of Materials (S-BOMs)</h3>\n<p>SCA tools facilitate the creation of a Software Bill of Materials (S-BOM). An S-BOM is a comprehensive list of all software components (both open-source and proprietary) included in a project. This document is increasingly important for regulatory compliance and can be requested by customers seeking transparency about the software they use.</p>\n<h2>Comparison with Static Application Security Testing (SAS)</h2>\n<p>While sometimes compared, SCA and SAS tools address different aspects of security:</p>\n<ul>\n<li>\n<strong>Focus:</strong> SCA targets vulnerabilities within <em>third-party open-source</em> components, while SAS tools focus on finding vulnerabilities in the <em>first-party, custom-written code</em>.\n</li>\n<li>\n<strong>Remediation:</strong> Fixing vulnerabilities flagged by SCA (often by updating a library) can be simpler than the potentially complex process of debugging and fixing flaws in proprietary code identified by SAS.\n</li>\n</ul>\n<h2>Implementing SCA</h2>\n<p>SCA tools offer flexibility, as they can assess software both before (source code) and after (binaries) compilation. In contrast, SAS tools typically operate only on the source code. For API security, SCA provides valuable code-level insights, helping to detect malicious code inclusions or unresolved vulnerabilities in the underlying open-source dependencies. A popular tool for performing SCA is the OWASP Dependency Check, which specifically identifies project dependencies and flags any associated known, publicly disclosed vulnerabilities.</p>\n<h2>Conclusion</h2>\n<p>SCA is indispensable in modern secure software development practices. By automatically identifying component vulnerabilities and license issues, and by generating S-BOMs, it helps organizations mitigate risks, manage compliance, and enhance overall security posture, particularly for APIs.</p>\n</div>",
                "tags": [],
                "collections": [
                    "7MX6TR9K"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:23:50Z",
                "dateModified": "2025-03-31T07:45:43Z"
            }
        },
        {
            "key": "L6EPPHT5",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/L6EPPHT5",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/L6EPPHT5",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "L6EPPHT5",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>06 Software Component Analysis</h1>\n<ul>\n<li>\n<strong>Software Component Analysis (SCA):</strong> The process of identifying open-source components and dependencies within an application.\n</li>\n<li>\n<strong>Importance:</strong> Essential for tracking components, managing security risks, and ensuring legal compliance, especially with the increasing use of open-source software.\n</li>\n<li>\n<strong>Key Features:</strong> Identifies <em>all</em> dependencies (direct and indirect/transitive), checks for security vulnerabilities, and verifies license compliance (e.g., avoiding GPL licenses in proprietary code).\n</li>\n<li>\n<strong>Goals:</strong> Discover and track all open-source components, ensure license compliance, identify vulnerabilities, and run appropriate scans.\n</li>\n<li>\n<strong>Identification Efforts:</strong> Industry standards like NIST CPE Dictionary, SWID Tags, and Package URL specifications help identify software components.\n</li>\n<li>\n<strong>Verification Standards:</strong> Frameworks like OWASP Software Component Verification Standard (SCVS) and Supply-chain Levels for Software Artifacts (SLSA - pronounced \"salsa\") help verify components and reduce supply chain risks.\n</li>\n<li>\n<strong>SCA Tools:</strong> Examples include GitHub SCA, OWASP Dependency-Check, OWASP Dependency-Track, and Snyk.\n</li>\n</ul>\n<hr>\n<h2>What is SCA?</h2>\n<p>Software Component Analysis (SCA) is the process used to identify and list all the open-source software components and their associated dependencies that are incorporated into an application. As the use of open-source software grows, tracking these components becomes crucial for security and compliance. SCA tools can be integrated throughout the software development lifecycle to detect potential security vulnerabilities or legal issues related to licenses introduced by imported libraries or dependencies. Implementing SCA is a significant step towards enhancing the security and integrity of software.</p>\n<h2>Key Features of SCA</h2>\n<ul>\n<li>\n<strong>Dependency Discovery:</strong> SCA identifies <em>all</em> dependencies linked to the code, including transitive dependencies (dependencies of dependencies) which developers might not be directly aware of. For instance, importing a library like Flask might bring in its own set of dependencies, and even if the version of Flask used is secure, one of its dependencies could have a vulnerability.\n</li>\n<li>\n<strong>Security Vulnerability Detection:</strong> It scans components for known security flaws.\n</li>\n<li>\n<strong>License Compliance:</strong> SCA verifies the licenses associated with open-source components. This is critical for businesses, especially regarding licenses like the GNU General Public License (GPL). Using a GPL-licensed library might legally require the company to release its own source code, which is often undesirable for proprietary software.\n</li>\n<li>\n<strong>Visibility and Control:</strong> SCA provides developers with insight into the open-source components they are using, allowing them to manage potential security risks effectively.\n</li>\n</ul>\n<h2>Goals of SCA</h2>\n<p>The primary objectives of performing Software Component Analysis are:</p>\n<ol>\n<li>\n<strong>Discovery and Tracking:</strong> Ensure all open-source components within the codebase are identified and continuously monitored.\n</li>\n<li>\n<strong>License Compliance:</strong> Track open-source licenses to mitigate legal risks and ensure compliance with organizational policies.\n</li>\n<li>\n<strong>Vulnerability Identification:</strong> Detect known security vulnerabilities present in the open-source components.\n</li>\n<li>\n<strong>Flexible Scanning:</strong> Perform various types of scans tailored to specific situations and requirements.\n</li>\n</ol>\n<h2>Identifying Software Components</h2>\n<p>Several industry initiatives standardize the identification of software components:</p>\n<ul>\n<li>\n<strong>NIST CPE Dictionary:</strong> A centralized database from the National Institute of Standards and Technology for Common Platform Enumeration (CPE) of software and hardware products.\n</li>\n<li>\n<strong>Software Identification (SWID) Tags:</strong> A standard format for describing software products, primarily commercial ones.\n</li>\n<li>\n<strong>Package URL (purl) Specification:</strong> A standardized string format to uniquely identify software packages across different ecosystems (e.g., <code>pkg:type/namespace/name@version?qualifiers#subpath</code>).\n</li>\n</ul>\n<p><img alt=\"\" data-attachment-key=\"MMBC7XPA\" width=\"1217\" height=\"151\"></p>\n<h2>Verifying Software Components</h2>\n<p>Following industry standards is essential for verifying the integrity and security of software components:</p>\n<ul>\n<li>\n<strong>OWASP Software Component Verification Standard (SCVS):</strong> A community-driven framework aimed at establishing best practices for reducing risk within the software supply chain.\n</li>\n<li>\n<strong>Supply-chain Levels for Software Artifacts (SLSA - \"salsa\"):</strong> A security framework providing standards and controls to enhance software artifact integrity and prevent tampering throughout the supply chain.\n</li>\n</ul>\n<h2>Popular SCA Tools</h2>\n<p>Several tools are available to perform SCA:</p>\n<ul>\n<li>\n<strong>GitHub SCA:</strong> Integrated features within GitHub.com for viewing dependency packages and their vulnerabilities.\n</li>\n<li>\n<strong>OWASP Dependency-Check:</strong> An OWASP tool specifically designed to scan project dependencies for known vulnerabilities.\n</li>\n<li>\n<strong>OWASP Dependency-Track:</strong> An OWASP platform that helps identify and manage risks within the software supply chain over time.\n</li>\n<li>\n<strong>Snyk:</strong> A commercial tool that analyzes codebases for security vulnerabilities, code quality issues, and license compliance.\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "7MX6TR9K"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:23:38Z",
                "dateModified": "2025-03-31T07:41:36Z"
            }
        },
        {
            "key": "V7L4KWR4",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/V7L4KWR4",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/V7L4KWR4",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "V7L4KWR4",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>03 Demo: Evaluating Vulnerability Analysis</h1>\n<ul>\n<li>\nApplication developers need tools to evaluate and analyze potential vulnerabilities before releasing applications.\n</li>\n<li>\nSoftware composition analysis (SCA) tools identify and repair open-source or proprietary vulnerabilities and third-party issues.\n</li>\n<li>\nPenetration tools discover software vulnerabilities through internal or external testing.\n</li>\n<li>\nDefect-tracking tools like Jira and Bugzilla help track, categorize, and prioritize vulnerabilities.\n</li>\n<li>\nPrioritizing vulnerabilities is crucial, with mission-critical issues being the highest priority.\n</li>\n<li>\nOWASP ZAP is a tool that can scan websites for vulnerabilities.\n</li>\n<li>\nBug bounties can be implemented to help resolve a large number of vulnerabilities.\n</li>\n<li>\nVulnerability policies are important for managing software vulnerabilities.\n</li>\n</ul>\n<h2>Introduction to Vulnerability Analysis</h2>\n<p>Application developers must use tools to find and analyze potential security vulnerabilities in their code, including packages and third-party libraries, before releasing their applications. This process involves scanning the application's codebase and related resources like containers. It also includes analyzing software licenses for compliance.</p>\n<h2>Software Composition Analysis (SCA)</h2>\n<p>Open-source software vulnerabilities require careful analysis. Developers need to address compliance and legal issues and check for known vulnerabilities in all open-source components.</p>\n<p><strong>Key aspects of SCA:</strong></p>\n<ul>\n<li>\nAggregating and listing all open-source software used.\n</li>\n<li>\nVerifying the compliance of these components.\n</li>\n<li>\nUsing SCA tools to identify and fix open-source or proprietary vulnerabilities.\n</li>\n<li>\nIdentifying third-party issues by referencing databases like the National Vulnerability Database (NVD).\n</li>\n</ul>\n<h2>Penetration Testing</h2>\n<p>Penetration testing helps discover vulnerabilities within software applications.</p>\n<p><strong>Types of penetration tests:</strong></p>\n<ul>\n<li>\n<strong>Internal tests:</strong> Conducted by a security team to identify vulnerabilities.\n</li>\n<li>\n<strong>External tests:</strong> Performed by an outside party to report any existing vulnerabilities.\n</li>\n</ul>\n<h2>Defect Tracking Tools</h2>\n<p>Defect-tracking tools are essential for managing discovered vulnerabilities.</p>\n<p><strong>Popular tools:</strong></p>\n<ul>\n<li>\nJira\n</li>\n<li>\nBugzilla\n</li>\n</ul>\n<p><strong>Benefits of defect tracking tools:</strong></p>\n<ul>\n<li>\nTracking the progress of fixing vulnerabilities.\n</li>\n<li>\nRegistering newly discovered vulnerabilities.\n</li>\n<li>\nCategorizing the severity of vulnerabilities.\n</li>\n<li>\nCentralizing vulnerability information for multiple developers.\n</li>\n</ul>\n<h2>Prioritizing Vulnerabilities</h2>\n<p>Software developers need to prioritize vulnerabilities effectively.</p>\n<p><strong>Priority levels:</strong></p>\n<ul>\n<li>\n<strong>Mission-critical:</strong> Highest priority.\n</li>\n<li>\n<strong>High-severity:</strong> Next highest priority after mission-critical.\n</li>\n<li>\n<strong>Medium and low:</strong> Lower priorities.\n</li>\n</ul>\n<h2>Demonstration of OWASP ZAP</h2>\n<p>OWASP's ZAP (Zed Attack Proxy) tool can be used to scan websites for vulnerabilities.</p>\n<p><strong>Steps for using ZAP:</strong></p>\n<ol>\n<li>\nOpen ZAP and click on \"Automated Scan.\"\n</li>\n<li>\nEnter the URL of the website to be scanned (e.g., <a href=\"http://testphp.vulnweb.com\" rel=\"noopener noreferrer nofollow\">http://testphp.vulnweb.com</a>).\n</li>\n<li>\nClick \"Attack\" to start the automatic scan.\n</li>\n<li>\n<p>Review the scan results in the \"Alerts\" tab, which will list identified vulnerabilities such as:</p>\n<ul>\n<li>\nCross-Site Scripting\n</li>\n<li>\nAbsence of Anti-CSRF Tokens\n</li>\n<li>\nContent Security Policy Header Not Set\n</li>\n<li>\nMissing Anti-clickjacking Header\n</li>\n<li>\nServer Leaks Information via HTTP Response Header Fields\n</li>\n<li>\nServer Leaks Version Information via Server HTTP Response Header Field\n</li>\n<li>\nCross-Content-Type-Options Header Missing\n</li>\n<li>\nCharset Missing\n</li>\n<li>\nInformation Disclosure Suspicious Comments\n</li>\n<li>\nModern Web Application\n</li>\n<li>\nUser Controllable HTML Element Attribute (potentially Cross Site Scripting)\n</li>\n</ul>\n</li>\n</ol>\n<h2>Bug Bounties</h2>\n<p>If an organization faces a large number of vulnerabilities, a bug bounty program can be implemented. This involves offering rewards for reporting and resolving vulnerabilities. Bug bounties can be internal or public.</p>\n<h2>Conclusion</h2>\n<p>Having vulnerability policies in place is crucial for effectively managing software vulnerabilities. This includes using tools like SCA, penetration testing, and defect tracking systems, as well as understanding the importance of prioritizing vulnerabilities and potentially implementing bug bounties.</p>\n</div>",
                "tags": [],
                "collections": [
                    "7MX6TR9K"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:23:11Z",
                "dateModified": "2025-03-29T17:17:27Z"
            }
        },
        {
            "key": "X2TXBWV8",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/X2TXBWV8",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/X2TXBWV8",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "X2TXBWV8",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>02 Vulnerability Analysis</h1>\n<ul>\n<li>\nVulnerability analysis identifies application flaws.\n</li>\n<li>\nCode vulnerabilities can emerge daily, even in previously secure code.\n</li>\n<li>\nTools like Snyk, Burp Suite, Nessus, and Zed Attack Proxy (Zap) aid in vulnerability scanning.\n</li>\n<li>\nBest practices include developer security training, policy updates, and automated scanning.\n</li>\n</ul>\n<h2>Vulnerability Analysis</h2>\n<p><strong>What is Vulnerability Analysis?</strong></p>\n<p>Vulnerability analysis is a process that identifies potential flaws in applications that could compromise their security. These flaws, or vulnerabilities, can arise even in code that was previously considered secure, due to newly discovered exploits or vulnerabilities in dependencies.</p>\n<h2>The Dynamic Nature of Vulnerabilities</h2>\n<p>Code that is secure one day can become vulnerable the next.</p>\n<ul>\n<li>\n<span style=\"background-color: #ff666680\">New vulnerabilities are discovered daily, affecting libraries and plugins.</span>\n</li>\n<li>\nAttackers can exploit even minor flaws to gain unauthorized access.\n</li>\n</ul>\n<h2>Tools for Vulnerability Scanning</h2>\n<p>Several tools can assist in identifying vulnerabilities:</p>\n<ul>\n<li>\n<strong>Snyk:</strong> A developer security platform for securing code, dependencies, containers, and infrastructure as code. It\u2019s a SaaS.\n</li>\n<li>\n<strong>Burp Suite:</strong> A web application vulnerability scanner with passive, active, and JavaScript analysis capabilities.\n</li>\n<li>\n<strong>Nessus:</strong> A vulnerability scanner compatible with Mac, Linux, and Windows, allowing for custom scripting (own scripting language), also plugins.\n</li>\n<li>\n<strong>Zed Attack Proxy (Zap):</strong> An open-source OWASP tool that uses spiders to crawl and scan web applications. Has active and passive scanning of HTML and AJAX.\n</li>\n</ul>\n<h2>Best Practices for Vulnerability Prevention</h2>\n<p>To minimize vulnerabilities, consider these best practices:</p>\n<ul>\n<li>\n<strong><span style=\"background-color: #5fb23680\">Developer Security Training:</span></strong><span style=\"background-color: #5fb23680\"> Educate development teams on secure coding practices.</span>\n</li>\n<li>\n<strong>Policy Analysis and Updating:</strong> Regularly review and update security policies to reflect current threats.\n</li>\n<li>\n<strong>Process Automation:</strong> Automate vulnerability scanning to ensure consistent and timely detection.\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "7MX6TR9K"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:23:01Z",
                "dateModified": "2025-03-29T17:15:58Z"
            }
        },
        {
            "key": "THR25489",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/THR25489",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/THR25489",
                    "type": "text/html"
                },
                "enclosure": {
                    "href": "file:///home/schweizer/Zotero/storage/THR25489/05%20Hands-on%20Lab%20Using%20Dynamic%20Analysis.pdf",
                    "type": "application/pdf",
                    "title": "05 Hands-on Lab Using Dynamic Analysis.pdf",
                    "length": 1660744
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "THR25489",
                "version": 0,
                "itemType": "attachment",
                "title": "05 Hands-on Lab Using Dynamic Analysis",
                "linkMode": "imported_file",
                "contentType": "application/pdf",
                "charset": "",
                "filename": "05 Hands-on Lab Using Dynamic Analysis.pdf",
                "tags": [],
                "collections": [
                    "3M8EJ5FE"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T16:40:01Z",
                "dateModified": "2025-03-29T16:40:01Z"
            }
        },
        {
            "key": "ASUU2VXR",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/ASUU2VXR",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/ASUU2VXR",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "ASUU2VXR",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>01 Intro to Security Testing and Mitigation Strategies</h1>\n<ul>\n<li>\nSecurity tests compare application or system states.\n</li>\n<li>\nSecurity testing provides a secure code baseline for development.\n</li>\n<li>\nPerform security tests on all new code and after any code changes.\n</li>\n<li>\nSecurity testing primarily occurs during the Test stage of the SDLC, <span style=\"background-color: #5fb23680\">but secure coding should be throughout</span>.\n</li>\n<li>\nFunctional security testing ensures code meets security requirements.\n</li>\n<li>\nAd hoc and exploratory testing are types of functional testing.\n</li>\n<li>\nUnit and integration testing are popular automated security testing procedures.\n</li>\n<li>\nMitigation strategies reduce risks and impacts of security threats.\n</li>\n<li>\nFive key mitigation strategies include using JSON, secure coding practices, vulnerability scanners, threat modeling, and awareness of OWASP Top 10.\n</li>\n</ul>\n<h2>Security Testing</h2>\n<p>Security tests are procedures used to compare the states of an application or a system. The primary goal of security testing is to establish a secure code baseline for development. It is crucial to perform these tests on any new code to minimize potential risks. Furthermore, any modifications to existing code can introduce vulnerabilities, making security testing necessary even for previously secure code.</p>\n<h3>Security Testing in the Software Development Lifecycle (SDLC)</h3>\n<p>Security testing is typically conducted during the Test stage of the SDLC, often alongside code reviews. While the Test phase is a critical period for ensuring security, secure coding practices and consideration for security should be integrated throughout the entire SDLC.</p>\n<h3>Performing Security Testing</h3>\n<p>The initial step in security testing is to establish a secure baseline during the development process. Once this baseline is in place, you can then compare the current state of the application or system against it. Functional security testing should be an integral part of your overall security testing efforts.</p>\n<p><img alt=\"\" data-attachment-key=\"75CUB76K\" width=\"1541\" height=\"519\"></p>\n<h3>Functional Security Testing</h3>\n<p>Functional security testing involves verifying the expected behavior of software or a system to ensure it meets security requirements. This type of testing relies on a list of functional requirements. </p>\n<p><img alt=\"\" data-attachment-key=\"BL33WUM8\" width=\"1181\" height=\"431\"></p>\n<p>Two common types of functional testing are:</p>\n<ul>\n<li>\n<strong>Ad hoc testing:</strong> Specialized testing performed upon the discovery of a vulnerability.\n</li>\n<li>\n<strong>Exploratory testing:</strong> Testing that occurs outside of formal testing procedures, such as testing a theory or an idea.\n</li>\n</ul>\n<h3>Automated Security Testing</h3>\n<p>Automated security testing utilizes tools and frameworks to automatically execute security tests. Two popular procedures in this category are:</p>\n<ul>\n<li>\n<strong>Unit testing:</strong> Testing individual classes and methods to evaluate API contracts. Unit tests have a limited scope and focus on individual components.\n</li>\n<li>\n<strong>Integration testing:</strong> Testing the interaction and integration of multiple code classes within an application. Integration tests can span across different application tiers and have a broader testing scope.\n</li>\n</ul>\n<h3>Security Testing Automation Frameworks</h3>\n<p>Several frameworks can be used to automate security tests. Examples include:</p>\n<ul>\n<li>\n<strong>BDD-Security:</strong> A framework that employs behavior-driven development principles for security testing.\n</li>\n<li>\n<strong>Mittn:</strong> A tool suite often incorporated into continuous integration pipelines.\n</li>\n<li>\n<strong>Gauntlt:</strong> A security framework designed to integrate with various security tools for simplified use.\n</li>\n</ul>\n<h2>Mitigation Strategies</h2>\n<p>Mitigation strategies are essential for reducing the risks and potential impacts of security threats and vulnerabilities. Integrating these strategies during code development is crucial.</p>\n<h3>Key Mitigation Strategies</h3>\n<p>Here are five key mitigation strategies to implement during code development:</p>\n<h4>Use JSON for API Data Payloads</h4>\n<p>Employ JavaScript Object Notation (JSON) for your API data payloads. Compared to Extensible Markup Language (XML), JSON offers a simpler data encoding method using key-value pairs, which avoids complex nested elements and results in faster parsing.</p>\n<h4>Implement Secure Coding Practices</h4>\n<p>Establish and enforce secure coding practices within your team and organization. This includes communicating security standards and guidelines effectively. Utilizing vulnerability scanners to identify potential weaknesses in the code is also a vital part of secure coding practices. Automation of vulnerability scanning can further enhance this strategy.</p>\n<h4>Threat Modeling</h4>\n<p>Incorporate threat modeling into your development process. This involves understanding the potential behavior of malicious actors, predicting what aspects of the system could be compromised, and determining how to quickly contain any identified threats.</p>\n<h4>Maintain Awareness of OWASP Top 10</h4>\n<p>Stay informed about the Open Web Application Security Project (OWASP) Top 10 security vulnerability concerns. This regularly updated list highlights the most critical security risks and should be considered during security testing throughout the development lifecycle, before deploying code to production.</p>\n<h2>Key Takeaways</h2>\n<ul>\n<li>\nSecurity tests are procedures for comparing the state of an application or a system.\n</li>\n<li>\nFunctional security testing should be an integral part of your security testing processes.\n</li>\n<li>\nTwo automated security testing procedures are unit testing and integration testing.\n</li>\n<li>\nUsing secure coding practices and other mitigation strategies helps reduce risks and impacts of security threats and vulnerabilities.\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "3M8EJ5FE"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:22:14Z",
                "dateModified": "2025-03-29T15:59:45Z"
            }
        },
        {
            "key": "FJPHKFZJ",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/FJPHKFZJ",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/FJPHKFZJ",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "FJPHKFZJ",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>00 Summary and Glossary</h1>\n<ul>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Threat monitoring is scanning code repositories and containers to find security issues.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Integrating threat monitoring with repositories enables a code checker to scan source code for security issues.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Authentication verifies a user\u2019s identity, and authorization determines a user\u2019s access rights.&nbsp;</span></span>\n</li>\n<li>\n<span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Symmetric encryption means encrypting and decrypting with the same keys, whereas asymmetric encryption means encrypting and decrypting with different keys.&nbsp;</span></span>\n</li>\n</ul>\n<table>\n<tbody>\n<tr>\n<th>\n<p><code>Term</code></p>\n</th>\n<th>\n<p><code>Definition</code></p>\n</th>\n</tr>\n<tr>\n<td>\n<p><code>Access control</code></p>\n</td>\n<td>\n<p><code>Security measures employed to govern and control the access and permissions provided to users, processes, or entities operating within a system or network.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Alerting</code></p>\n</td>\n<td>\n<p><code>Responsive component of a monitoring system that performs actions based on changes in metric values.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Application layer</code></p>\n</td>\n<td>\n<p><code>The seventh and topmost layer of the OSI model is used by developers for building and deploying applications.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Application Programming Interface (API)</code></p>\n</td>\n<td>\n<p><code>A collection of guidelines, protocols, and tools that allow diverse software applications to communicate with each other.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Asymmetric encryption</code></p>\n</td>\n<td>\n<p><code>When different keys are used to encrypt and decrypt.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Authentication</code></p>\n</td>\n<td>\n<p><code>Process of verifying a user's identity.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Authorization</code></p>\n</td>\n<td>\n<p><code>Process of determining a user's access rights.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Checksums</code></p>\n</td>\n<td>\n<p><code>Derived values from data employed to identify errors that may have occurred during the transmission or storage of that data.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>CI/CD</code></p>\n</td>\n<td>\n<p><code>CI/CD, which stands for continuous integration (CI) and continuous delivery (CD), creates a faster and more precise way of combining the work of different people into one cohesive product.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>CI/CD pipeline</code></p>\n</td>\n<td>\n<p><code>The continuous integration/continuous delivery (CI/CD) pipeline is an agile DevOps workflow focused on a frequent and reliable software delivery process.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Code scanners</code></p>\n</td>\n<td>\n<p><code>Provide vulnerability reporting and insights after they scan code in your repositories.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>CodeSonar</code></p>\n</td>\n<td>\n<p><code>A static code analysis tool from GrammaTech used to find and fix bugs and security vulnerabilities in source and binary code.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Container scanning</code></p>\n</td>\n<td>\n<p><code>Scans code deployed to containers, which may contain vulnerabilities and security threats.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Containers</code></p>\n</td>\n<td>\n<p><code>Executable software units in which application code is packaged along with its libraries and dependencies in common ways to run the code anywhere, whether it be on a desktop, traditional IT, or the cloud.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Coverity</code></p>\n</td>\n<td>\n<p><code>An incremental analysis scanner for programming languages such as C, C++, Java, and Python.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Cryptographic keys</code></p>\n</td>\n<td>\n<p><code>Essential tools used to secure data from cyberattacks during transmission and storage.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Cryptographic service</code></p>\n</td>\n<td>\n<p><code>A confidentiality service that keeps data secret. Its purpose is to secure data from others, even when the data traverses a non-secure network without the necessary credentials.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Data link layer</code></p>\n</td>\n<td>\n<p><code>The second layer of the OSI model transforms the transmitted raw data into a line free from undetected errors.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>DevSecOps</code></p>\n</td>\n<td>\n<p><code>DevSecOps (DevOps with an emphasis on security) is a set of practices that automate security integration across the software development lifecycle (or SDLC), from original design to integration, testing, deployment, and software delivery.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Dialog control</code></p>\n</td>\n<td>\n<p><code>Refers to the management and coordination of communication sessions between two devices or systems.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>E-commerce transactions</code></p>\n</td>\n<td>\n<p><code>Refer to the buying and selling of goods and services over the internet.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Encryption</code></p>\n</td>\n<td>\n<p><code>Process of encoding information so that only those users with authorized access can decode it.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Endpoint security</code></p>\n</td>\n<td>\n<p><code>Detects application and system anomalies and protects systems, servers, and various types of devices connected to a network.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Exhaustive documentation</code></p>\n</td>\n<td>\n<p><code>Security pattern documentation that is accessible, precise, easy to read, and follow through. Software developers are inclined to refer to such documentation.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>eXtensible Access Control Markup Language (XACML)</code></p>\n</td>\n<td>\n<p><code>A standard used to define and implement access control policies. It offers a comprehensive framework for managing and enforcing access control decisions across different systems, applications, and services. This empowers organizations to regulate resource access and specific actions based on established policies.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>eXtensible Markup Language (XML)</code></p>\n</td>\n<td>\n<p><code>A widely utilized markup language created to organize, transport, and structure data in a format that is human-readable and platform-independent.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Firewall</code></p>\n</td>\n<td>\n<p><code>A network security device or software that acts as a barrier between a trusted internal network and an untrusted external network like the internet.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Functional Verification Test (FVT)</code></p>\n</td>\n<td>\n<p><code>Validates the software's functionality using the solution specification document, design papers, and use case documents.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>GitHub</code></p>\n</td>\n<td>\n<p><code>An online platform that offers version control for software development projects, enabling developers to collaborate on code, monitor changes, and manage their source code repositories in a distributed manner.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Hash algorithms</code></p>\n</td>\n<td>\n<p><code>A hash algorithm, also referred to as a hash function, is a mathematical procedure that accepts input of any size and generates a fixed-size output called the hash value or hash code.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Hashicorp's Vault</code></p>\n</td>\n<td>\n<p><code>An open-source, identity-based secret and encryption management tool.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Hijacking</code></p>\n</td>\n<td>\n<p><code>A type of cyberattack in which an unauthorized person or entity intercepts and manipulates communication between two parties who believe that they are directly communicating with each other.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Hypertext Transport Protocol Secure (HTTPS)</code></p>\n</td>\n<td>\n<p><code>Used for secure communication between computers over the World Wide Web (WWW). It ensures that the data exchanged between the browser and the website remains confidential and protected from unauthorized access.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Identification and Access Management (IAM)</code></p>\n</td>\n<td>\n<p><code>Important security mechanisms to grant permissions to applications and systems within cloud infrastructures.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Integrity</code></p>\n</td>\n<td>\n<p><code>A cryptographic service that guarantees data has not been modified or tampered with during or after reception and helps support the anti-tampering of data for users needing data verification between sender and receiver.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Interoperable</code></p>\n</td>\n<td>\n<p><code>The ability of diverse systems, software, or components to collaborate, function cohesively, and exchange information effectively and seamlessly.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Intrusion detection</code></p>\n</td>\n<td>\n<p><code>The ongoing detection of any cyberattacks, threats, or intrusions that may compromise an application or system.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Linux kernel</code></p>\n</td>\n<td>\n<p><code>Core component of an operating system that provides a platform for running programs and various services on top of it.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Man-in-the-middle attacks</code></p>\n</td>\n<td>\n<p><code>A type of cyberattack wherein the attacker covertly intercepts and potentially modifies the communication between two parties who are under the impression that they are directly communicating with each other.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Message digests</code></p>\n</td>\n<td>\n<p><code>Cryptographic hash functions used to compute checksums of data blocks. It can also be used to sign and verify signatures.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Network firewall</code></p>\n</td>\n<td>\n<p><code>A security device or software that serves as a protective barrier between an internal network, like a corporate network, and an external network, such as the internet. Its role is to regulate and observe incoming and outgoing network traffic.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Network layer</code></p>\n</td>\n<td>\n<p><code>The third layer of the OSI model handles data transmission and control of the subnet.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Network mapper (Nmap)</code></p>\n</td>\n<td>\n<p><code>Used to discover hosts and services on a computer network by sending packets and analyzing responses.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Network security</code></p>\n</td>\n<td>\n<p><code>Detects application and system anomalies and monitors a network using a network tool such as Nmap or Snort.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Open Systems Interconnection (OSI model)</code></p>\n</td>\n<td>\n<p><code>Enables communication between diverse communication systems using standard protocols.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Open-source software library (OpenSSL)</code></p>\n</td>\n<td>\n<p><code>A library of software that implements the Secure Socket Layer (or SSL) protocol. It is an open-source toolkit to ensure secure communication with cryptography for all types of communication, from personal to commercial and e-commerce transactions.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Orchestration</code></p>\n</td>\n<td>\n<p><code>The automated configuration, management, and coordination of computer systems, applications, and services.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>OWASP</code></p>\n</td>\n<td>\n<p><code>Open Web Application Security Project</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>PGP</code></p>\n</td>\n<td>\n<p><code>Pretty good privacy</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Physical layer</code></p>\n</td>\n<td>\n<p><code>The lowest layer of the OSI model transmits bits of raw information.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Presentation layer</code></p>\n</td>\n<td>\n<p><code>The sixth layer of the OSI model focuses on the syntax and semantics of data being transmitted from one point to another.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Private key</code></p>\n</td>\n<td>\n<p><code>A confidential piece of information utilized to demonstrate ownership of digital assets.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Process for Attack Simulation and Threat Analysis (PASTA)</code></p>\n</td>\n<td>\n<p><code>A risk-based model that connects to business objectives and technical requirements.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Public key</code></p>\n</td>\n<td>\n<p><code>A cryptographic key used for the encryption and validation of digital signatures.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Public key cryptography</code></p>\n</td>\n<td>\n<p><code>A public cryptographic algorithm that uses public and private keys. Rivest, Shamir, and Adleman (or RSA) is the most popular implementation of public key cryptography. RSA provides secrecy, authentication, and encryption for anyone to use. It is also used to implement prime number generation to generate private keys using different sizes of key lengths depending upon the level of encryption needed.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Role-based access control (RBAC)</code></p>\n</td>\n<td>\n<p><code>An access control framework that regulates resource access according to predefined roles. In an RBAC system, users are allocated specific roles, each linked to a set of permissions that determine the actions or resources accessible to users within that role.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Scrum framework</code></p>\n</td>\n<td>\n<p><code>A framework under which individuals may handle complicated adaptive challenges while producing high-value goods in a productive and creative manner.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Secure shell (SSH)</code></p>\n</td>\n<td>\n<p><code>Secure connection protection for connecting with remote devices, such as physical and cloud servers.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Secure Socket Layer (SSL)</code></p>\n</td>\n<td>\n<p><code>A protocol based on encryption technology that provides secure data transmission over the internet. It ensures that data exchanged between a web browser and a web server remains confidential and protected from unauthorized access during transit.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Security Assertion Markup Language (SAML)</code></p>\n</td>\n<td>\n<p><code>Facilitates the exchange of authentication and authorization data among various entities. It enables smooth and secure authentication across diverse domains, empowering users to access multiple applications and services using a single set of credentials.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Security pattern</code></p>\n</td>\n<td>\n<p><code>A set of rules that represent and define a reusable solution to recurring security threats or issues. By following security patterns, organizations establish robust security frameworks while ensuring the confidentiality, integrity, and availability of the system's data.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Security pattern catalog</code></p>\n</td>\n<td>\n<p><code>Empowers software developers to review and choose security patterns for developing necessary and additional security features for their application code. When developing for deployment, a well-classified security pattern catalog enables developers to reuse security patterns across multiple applications. Software developers also rely on security pattern catalogs to become more aware of the associated security mechanisms.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Serverless computing</code></p>\n</td>\n<td>\n<p><code>A cloud application development and execution model that lets developers build and run code without managing servers or paying for idle cloud infrastructure.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Session layer</code></p>\n</td>\n<td>\n<p><code>The fifth OSI model layer establishes multiple sessions from different machines while establishing consistent sessions if a crash occurs.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Snort</code></p>\n</td>\n<td>\n<p><code>A network intrusion detection and prevention system that provides real-time analysis of network traffic.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Snyk Code</code></p>\n</td>\n<td>\n<p><code>An integrated development tool that performs semantic analysis to discover coding and security bugs throughout the development phase.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Software Development Lifecycle (SDLC)</code></p>\n</td>\n<td>\n<p><code>A framework that specifies the steps involved in software development at each stage. It details the strategy for developing, deploying, and maintaining a program.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Spoofing</code></p>\n</td>\n<td>\n<p><code>A form of network attack that involves manipulating network traffic or data to gain unauthorized access to systems, services, or users.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Static Reviewer</code></p>\n</td>\n<td>\n<p><code>Eliminates well-known vulnerabilities. It is a component within the Security Reviewer suite, compliant with frameworks including the Open Web Application Security Project (or OWASP), Common Vulnerabilities and Exposures (or CVEs), and the National Institute of Standards and Technology (or NIST).</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>STRIDE</code></p>\n</td>\n<td>\n<p><code>STRIDE means Spoofing identity, Tampering with data, Repudiation, Information disclosure, Denial of service, and Elevation of privileges. STRIDE, which came from Microsoft, evaluates applications and systems to find threats and vulnerabilities.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Subnets</code></p>\n</td>\n<td>\n<p><code>A subnetwork (or subnet) is a smaller portion of a larger network partitioned to create more feasible segments of the network with higher efficiency.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Symmetric ciphers</code></p>\n</td>\n<td>\n<p><code>Cryptographic algorithms that use the same key for both encryption and decryption of data.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Symmetric encryption</code></p>\n</td>\n<td>\n<p><code>When the same key is used for both encrypting and decrypting.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>System-call auditing</code></p>\n</td>\n<td>\n<p><code>The retrieval and review of system-call information from a kernel, such as the Linux kernel.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Threat modeling</code></p>\n</td>\n<td>\n<p><code>Provides a process to analyze ongoing threats and eliminate the potential for software coding weaknesses and vulnerabilities.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Threat monitoring</code></p>\n</td>\n<td>\n<p><code>Scanning code repositories and containers to find security issues. Password mishandling, protocol insecurities, and incorrect permissions are examples of issues that you can discover with threat monitoring.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Token management</code></p>\n</td>\n<td>\n<p><code>Involves the procedures and protocols employed in handling and controlling tokens, which are unique pieces of data or strings used in diverse systems and applications.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Transport layer</code></p>\n</td>\n<td>\n<p><code>The fourth layer of the OSI model accepts transmissions or data from the network layer and chops them into smaller units or packets for passing them back to the network layer.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Transport Layer Security (TLS)</code></p>\n</td>\n<td>\n<p><code>A protocol based on encryption technology used to secure communications over a computer network. It is the successor to SSL and is designed using an advanced encryption algorithm.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Two-factor authentication</code></p>\n</td>\n<td>\n<p><code>This added security measure is employed to safeguard user accounts and digital data. It demands that users present two distinct forms of identification before obtaining access to a system, service, or application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Unified Modelling Language (UML)</code></p>\n</td>\n<td>\n<p><code>Can visually model and represent a system for a better understanding of the system's architecture and design.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Visual, Agile, and Simple Threat (VAST)</code></p>\n</td>\n<td>\n<p><code>An agile methodology with application and operational threat models. VAST uses process-flow diagrams to represent the architectural perspective.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vulnerability patching</code></p>\n</td>\n<td>\n<p><code>The distribution of security updates or patches improves functionality or eliminates vulnerabilities in an IT system or service.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vulnerability scanner</code></p>\n</td>\n<td>\n<p><code>A specialized software tool designed to detect and evaluate security ineffectiveness in computer systems, networks, applications, and other digital assets.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vulnerability scanning</code></p>\n</td>\n<td>\n<p><code>The search for security vulnerabilities from within the code and outside of an application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Web services security</code></p>\n</td>\n<td>\n<p><code>A set of measures and protocols implemented to ensure confidentiality, integrity, and authentication of data exchanged between web services and their clients over the internet.</code></p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>",
                "tags": [],
                "collections": [
                    "GI4MBUY7"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:21:45Z",
                "dateModified": "2025-03-29T15:47:08Z"
            }
        },
        {
            "key": "IWZXFN9K",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/IWZXFN9K",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/IWZXFN9K",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "IWZXFN9K",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>02 Threat Monitoring</h1>\n<ul>\n<li>\nThreat monitoring involves scanning code repositories and containers for security issues.\n</li>\n<li>\nIt is integrated into the Develop, Test, and Deploy stages of the Software Development Life Cycle (SDLC).\n</li>\n<li>\nCode checkers are used to scan source code for vulnerabilities.\n</li>\n<li>\nRepository scanning integrates with Source Control Management (SCM) tools like GitHub.\n</li>\n<li>\nContainer scanning scans container images for vulnerabilities, including base and layered images.\n</li>\n</ul>\n<h2>Introduction to Threat Monitoring</h2>\n<p>Threat monitoring is a security practice that involves scanning code repositories and containers to identify potential security issues. These issues can include password mishandling, protocol insecurities, and incorrect permissions.</p>\n<h2>Threat Monitoring in the SDLC</h2>\n<p><img alt=\"\" data-attachment-key=\"HN3NLIPT\" width=\"1520\" height=\"662\"></p>\n<p>Threat modeling is integrated into three key stages of the Software Development Life Cycle (SDLC):</p>\n<ul>\n<li>\n<strong>Develop:</strong> Security checks are integrated into Integrated Development Environments (IDEs).\n</li>\n<li>\n<strong>Test:</strong> Security scanning occurs during the testing phase.\n</li>\n<li>\n<strong>Deploy:</strong> Security is considered during the deployment phase.\n</li>\n</ul>\n<p>Code scanning tools, utilizing databases like the OWASP Top 10, support these stages by identifying vulnerabilities. Code checker tools analyze source code for issues related to syntax, style, and documentation, providing insights for remediation.</p>\n<h2>Repository Scanning</h2>\n<p>Integrating threat monitoring into code repositories is crucial due to their collaborative and often open-source nature, which increases the risk of security vulnerabilities. This integration allows for:</p>\n<ul>\n<li>\nScanning with Source Control Management (SCM) tools like GitHub.\n</li>\n<li>\nAutomatic \"fix\" pull requests.\n</li>\n<li>\nVulnerability reporting and insights.\n</li>\n<li>\nScanning of every pull request.\n</li>\n<li>\nCommit signing with PGP keys for verification.\n</li>\n</ul>\n<h2>Container Scanning</h2>\n<p>Container scanning involves scanning container images, which contain application code and dependencies, for vulnerabilities. This process is essential because:</p>\n<ul>\n<li>\nContainers can inherit vulnerabilities from external dependencies.\n</li>\n<li>\n<span style=\"background-color: #ff666680\">Scanning must include both the base image and all layered container images.</span>\n</li>\n<li>\nMonitoring all container images reduces security risks.\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "GI4MBUY7"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:21:07Z",
                "dateModified": "2025-03-29T15:15:52Z"
            }
        },
        {
            "key": "EIF2CE8B",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/EIF2CE8B",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/EIF2CE8B",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "EIF2CE8B",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>01 Vulnerability Scanning and Threat Modeling</h1>\n<ul>\n<li>\nVulnerability scanning identifies security weaknesses within and outside an application's code.\n</li>\n<li>\nVulnerability scans should consider platform configuration, patch levels, and application composition.\n</li>\n<li>\nVulnerability scans should cover the entire application flow.\n</li>\n<li>\nSAST tools like Coverity, CodeSonar, Snyk Code, and Static Reviewer are used for vulnerability scanning.\n</li>\n<li>\nThreat modeling identifies, categorizes, and enumerates security threats.\n</li>\n<li>\nThreat modeling is best performed during the design phase of the SDLC.\n</li>\n<li>\nPopular threat modeling methodologies include PASTA, VAST, and STRIDE.\n</li>\n</ul>\n<h2>Vulnerability Scanning</h2>\n<p>Vulnerability scanning is the process of searching for security weaknesses both within the source code of an application and from an external perspective. This involves analyzing the application to identify potential entry points for malicious actors and flaws in the code that could be exploited. Vulnerability scanners are designed to work with various programming languages, including C, C++, Java, Python, and PHP.</p>\n<h3>Common Code Vulnerabilities</h3>\n<p>Vulnerability scans typically look for common weaknesses such as:</p>\n<ul>\n<li>\n<strong>SQL Injection:</strong> Exploiting vulnerabilities in database queries to gain unauthorized access or manipulate data.\n</li>\n<li>\n<strong>Cross-Site Scripting (XSS):</strong> Injecting malicious scripts into websites viewed by other users.\n</li>\n<li>\n<strong>Path Traversal:</strong> Exploiting insufficient security validation to access files and directories outside the intended scope in web applications.\n</li>\n</ul>\n<h3>Guidelines for Performing Vulnerability Scanning</h3>\n<p>To ensure effective vulnerability scanning and a secure design, consider the following guidelines:</p>\n<ul>\n<li>\n<strong>Platform Specificity:</strong> Base scans on the specific configuration of the platform, including operating systems and server software.\n</li>\n<li>\n<strong>Patch Levels:</strong> Account for the current patch levels of all software components, as outdated software often contains known vulnerabilities.\n</li>\n<li>\n<strong>Application Composition:</strong> Consider all the different parts and dependencies of the application.\n</li>\n<li>\n<strong>User Credentials (for Web Applications):</strong> For web applications, providing user credentials may be necessary to scan the application flow as a user would interact with it.\n</li>\n<li>\n<strong>Full Application Coverage:</strong> Vulnerability scans should not be limited to specific parts but should cover the entire application flow, including all components, the underlying technology stack, and any supporting platforms.\n</li>\n</ul>\n<h3>Vulnerability Scanning Tools</h3>\n<p>Several tools are available to assist with vulnerability scanning. Some popular examples of Static Application Security Testing (SAST) tools include:</p>\n<ul>\n<li>\n<strong>Coverity:</strong> An incremental analysis scanner that supports languages like C, C++, Java, and Python.\n</li>\n<li>\n<strong>CodeSonar:</strong> Utilizes abstraction techniques to model code behavior and identify weaknesses in program paths and variables.\n</li>\n<li>\n<strong>Snyk Code:</strong> An integrated development environment (IDE) tool that performs semantic analysis to find coding and security bugs during the development process.\n</li>\n<li>\n<strong><span style=\"background-color: #5fb23680\">Static Reviewer:</span></strong><span style=\"background-color: #5fb23680\"> A component of the Security Reviewer suite that focuses on eliminating well-known vulnerabilities and aligns with frameworks like OWASP, CVEs, and NIST.</span>\n</li>\n</ul>\n<h2>Threat Modeling</h2>\n<p>Threat modeling is a structured process for identifying, categorizing, and enumerating potential security threats to an application or system. It provides a framework for analyzing ongoing threats and proactively addressing potential software coding weaknesses and vulnerabilities.</p>\n<p><img alt=\"\" data-attachment-key=\"ZUV63TMM\" width=\"899\" height=\"599\"></p>\n<h3>Threat Modeling Process</h3>\n<p>Threat models often use diagrams to visually represent data flows within software applications, making it easier to understand potential attack vectors and vulnerabilities.</p>\n<h3>Threat Modeling in the Software Development Lifecycle (SDLC)</h3>\n<p>The optimal time to implement threat modeling is during the design phase of the Software Development Lifecycle (SDLC). By identifying and mitigating potential threats early in the development process, you can significantly reduce the likelihood of software vulnerabilities and eliminate weaknesses before they are coded into the application.</p>\n<p><img alt=\"\" data-attachment-key=\"4U8GDCHZ\" width=\"1520\" height=\"662\"></p>\n<h3>Popular Threat Modeling Methodologies</h3>\n<p>Several established threat modeling methodologies can be used:</p>\n<ul>\n<li>\n<strong>Process for Attack Simulation and Threat Analysis (PASTA):</strong> A risk-based model that emphasizes aligning security efforts with business objectives and technical requirements.\n</li>\n<li>\n<strong>Visual, Agile, and Simple Threat (VAST):</strong> An agile methodology that focuses on creating application threat models and operational threat models, utilizing process-flow diagrams to represent the architectural perspective.\n</li>\n<li>\n<p><strong>STRIDE:</strong> An acronym representing six common threat categories:</p>\n<ul>\n<li>\n<strong>Spoofing identity:</strong> Pretending to be someone or something else.\n</li>\n<li>\n<strong>Tampering with data:</strong> Modifying data in an unauthorized manner.\n</li>\n<li>\n<strong>Repudiation:</strong> Denying that an action took place.\n</li>\n<li>\n<strong>Information disclosure:</strong> Exposing confidential information to unauthorized individuals.\n</li>\n<li>\n<strong>Denial of service:</strong> Preventing legitimate users from accessing resources.\n</li>\n<li>\n<strong>Elevation of privileges:</strong> Gaining unauthorized access to higher-level functions or data.\n</li>\n</ul>\n<p>Developed by Microsoft, STRIDE is used to evaluate applications and systems to identify potential threats and vulnerabilities within these categories.</p>\n</li>\n</ul>\n<h3>Conclusion</h3>\n<p>In summary, vulnerability scanning is a crucial process for finding security flaws in code, while threat modeling is a proactive approach to identify and mitigate potential security threats early in the software development lifecycle. Both practices are essential for building secure and resilient applications.</p>\n</div>",
                "tags": [],
                "collections": [
                    "GI4MBUY7"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:20:54Z",
                "dateModified": "2025-03-29T15:10:36Z"
            }
        },
        {
            "key": "38MVYV5Y",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/38MVYV5Y",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/38MVYV5Y",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "38MVYV5Y",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>00 Course Glossary</h1>\n<h2>Application Security for Developers and DevOps Professionals</h2>\n<table>\n<tbody>\n<tr>\n<th>\n<p><code>Term</code></p>\n</th>\n<th>\n<p><code>Definition</code></p>\n</th>\n</tr>\n<tr>\n<td>\n<p><code>Access control</code></p>\n</td>\n<td>\n<p><code>A security measure employed to govern and control the access and permissions provided to users, processes, or entities operating within a system or network.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Ad hoc testing</code></p>\n</td>\n<td>\n<p><code>Random, informal testing without a plan for the discovery of a vulnerability.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Alerting</code></p>\n</td>\n<td>\n<p><code>Responsive component of a monitoring system that performs actions based on changes in metric values.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Application layer</code></p>\n</td>\n<td>\n<p><code>The seventh and topmost layer of the OSI model is used by developers for building and deploying applications.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Application Programming Interface (API)</code></p>\n</td>\n<td>\n<p><code>A collection of guidelines, protocols, and tools that allow diverse software applications to communicate with each other.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Asymmetric encryption</code></p>\n</td>\n<td>\n<p><code>When different keys are used to encrypt and decrypt.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Authentication</code></p>\n</td>\n<td>\n<p><code>Process of verifying a user's identity.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Authorization</code></p>\n</td>\n<td>\n<p><code>Process of determining a user's access rights.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>BDD-Security</code></p>\n</td>\n<td>\n<p><code>A security testing framework that uses behavior-driven development.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Blind cross-site scripting</code></p>\n</td>\n<td>\n<p><code>Injects a script that has a payload to be executed on the back-end of an application by the user or the administrator without their knowing about it.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Broken access control</code></p>\n</td>\n<td>\n<p><code>When attackers can access, modify, delete, or perform actions outside of an application or system's intended permissions.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Buffer overflows</code></p>\n</td>\n<td>\n<p><code>One of the four pervasive types of SQL injection attacks. This happens when a program allocates more data in a buffer than the buffer can store. A buffer overflow causes a system or program to crash or execute malicious code.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Burp Suite</code></p>\n</td>\n<td>\n<p><code>A vulnerability scanner that is popular for scanning web applications. You can set up automated scans of a website or perform manual scanning by crawling the overall structure of a website or web application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Checksums</code></p>\n</td>\n<td>\n<p><code>Derived values from data employed to identify errors that may have occurred during the transmission or storage of that data.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>CI/CD</code></p>\n</td>\n<td>\n<p><code>CI/CD, which stands for continuous integration (CI) and continuous delivery (CD), creates a faster and more precise way of combining the work of different people into one cohesive product.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>CI/CD pipeline</code></p>\n</td>\n<td>\n<p><code>The continuous integration/continuous delivery (CI/CD) pipeline is an agile DevOps workflow focused on a frequent and reliable software delivery process.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Click</code></p>\n</td>\n<td>\n<p><code>A framework for writing command line applications.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Code injection</code></p>\n</td>\n<td>\n<p><code>One of the four pervasive types of SQL injection attacks.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Code practices</code></p>\n</td>\n<td>\n<p><code>They are part of the software development process for secure software development.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Code review</code></p>\n</td>\n<td>\n<p><code>In code review, you use automated static analysis security testing and perform manual code inspection.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Code scanners</code></p>\n</td>\n<td>\n<p><code>Provide vulnerability reporting and insights after they scan code in your repositories.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>CodeSonar</code></p>\n</td>\n<td>\n<p><code>A static code analysis tool from GrammaTech is used to find and fix bugs and security vulnerabilities in source and binary code.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Container scanning</code></p>\n</td>\n<td>\n<p><code>Scans code deployed to containers, which may contain vulnerabilities and security threats.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Containers</code></p>\n</td>\n<td>\n<p><code>Executable software units in which application code is packaged along with its libraries and dependencies in common ways to run the code anywhere, whether it be on a desktop, traditional IT, or the cloud.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Coverity</code></p>\n</td>\n<td>\n<p><code>An incremental analysis scanner for programming languages such as C, C++, Java, and Python.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Credential stuffing</code></p>\n</td>\n<td>\n<p><code>Occurs when an attacker has a list of legitimate usernames and passwords. The attacker employs automation to use those passwords in an attack.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Cross-site scripting</code></p>\n</td>\n<td>\n<p><code>When an application takes untrusted data and then sends it to a web browser without proper validation or escaping. You may see cross-site scripting represented as \"XSS.\"</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Cross-site scripting attack</code></p>\n</td>\n<td>\n<p><code>It can deface websites by replacing or removing images or content.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Cryptographic keys</code></p>\n</td>\n<td>\n<p><code>Essential tools used to secure data from cyberattacks during transmission and storage.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Cryptographic service</code></p>\n</td>\n<td>\n<p><code>A confidentiality service that keeps data secret. Its purpose is to secure data from others, even when the data traverses a non-secure network without the necessary credentials.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>DAST</code></p>\n</td>\n<td>\n<p><code>Dynamic application security testing (or DAST) evaluates the application from the outside in through the front end.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Data link layer</code></p>\n</td>\n<td>\n<p><code>The second layer of the OSI model transforms the transmitted raw data into a line free from undetected errors.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Dependencies</code></p>\n</td>\n<td>\n<p><code>It adds features and functionality to the software without writing it from scratch. Dependencies are reusable codes found in a library (package or module) that your code makes calls to.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>DevSecOps</code></p>\n</td>\n<td>\n<p><code>DevSecOps (DevOps with an emphasis on security) is a set of practices that automate security integration across the software development lifecycle (or SDLC), from original design to integration, testing, deployment, and software delivery.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Dialog control</code></p>\n</td>\n<td>\n<p><code>Refers to the management and coordination of communication sessions between two devices or systems.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Dynamic analysis</code></p>\n</td>\n<td>\n<p><code>Dynamic analysis is the process of testing and evaluating an application as it is executing.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>E-commerce transactions</code></p>\n</td>\n<td>\n<p><code>Refer to the buying and selling of goods and services over the internet.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Encryption</code></p>\n</td>\n<td>\n<p><code>Process of encoding information so that only those users with authorized access can decode it.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Endpoint security</code></p>\n</td>\n<td>\n<p><code>Detects application and system anomalies and protects systems, servers, and various types of devices connected to a network.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Exhaustive documentation</code></p>\n</td>\n<td>\n<p><code>Security pattern documentation that is accessible, precise, easy to read, and follow through. Software developers are inclined to refer to such documentation.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Exploratory testing</code></p>\n</td>\n<td>\n<p><code>Takes place outside of formal testing.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>eXtensible Access Control Markup Language (XACML)</code></p>\n</td>\n<td>\n<p><code>A standard used to define and implement access control policies. It offers a comprehensive framework for managing and enforcing access control decisions across different systems, applications, and services. This empowers organizations to regulate resource access and specific actions based on established policies.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>eXtensible Markup Language (XML)</code></p>\n</td>\n<td>\n<p><code>A widely utilized markup language created to organize, transport, and structure data in a format that is human-readable and platform-independent.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Firewall</code></p>\n</td>\n<td>\n<p><code>A network security device or software that acts as a barrier between a trusted internal network and an untrusted external network like the internet.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Flask</code></p>\n</td>\n<td>\n<p><code>It is a web framework written in Python that provides you with tools, libraries, and other features for building web applications.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Function call injection</code></p>\n</td>\n<td>\n<p><code>One of the four pervasive types of SQL injection attacks.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Functional Verification Test (FVT)</code></p>\n</td>\n<td>\n<p><code>Validates the software's functionality using the solution specification document, design papers, and use case documents.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>GitHub</code></p>\n</td>\n<td>\n<p><code>An online platform that offers version control for software development projects, enabling developers to collaborate on code, monitor changes, and manage their source code repositories in a distributed manner.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>GitHub SCA</code></p>\n</td>\n<td>\n<p><code>It is for viewing dependency packages and vulnerabilities while using GitHub.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>GPL</code></p>\n</td>\n<td>\n<p><code>General Public License.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Guantlt</code></p>\n</td>\n<td>\n<p><code>A security framework that hooks into security tools for simplified integration.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Hash algorithms</code></p>\n</td>\n<td>\n<p><code>A hash algorithm, also referred to as a hash function, is a mathematical procedure that accepts input of any size and generates a fixed-size output called the hash value or hash code.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Hashicorp's Vault</code></p>\n</td>\n<td>\n<p><code>An open-source, identity-based secret and encryption management tool.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Hijacking</code></p>\n</td>\n<td>\n<p><code>A type of cyberattack in which an unauthorized person or entity intercepts and manipulates communication between two parties who believe that they are directly communicating with each other.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>HTTP Host header injection</code></p>\n</td>\n<td>\n<p><code>When creating URIs for links in web applications, developers typically use the HTTP host header available in the HTTP request that is sent from the client side. An attacker can exploit this practice by sending a fake header that contains a domain name that, for example, can be used to corrupt the web cache or password reset emails.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Hypertext Transport Protocol Secure (HTTPS)</code></p>\n</td>\n<td>\n<p><code>Used for secure communication between computers over the World Wide Web (WWW).</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>IAST</code></p>\n</td>\n<td>\n<p><code>Interactive Application Self-testing (or IAST) scans for vulnerabilities during testing.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Identification and Access Management (IAM)</code></p>\n</td>\n<td>\n<p><code>Important security mechanisms to grant permissions to applications and systems within cloud infrastructures.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Insecure development environment</code></p>\n</td>\n<td>\n<p><code>It is an environment where production systems are secure, but the development environment where coding is built and deployed is a free-for-all with direct connections to the production infrastructure.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Integration tests</code></p>\n</td>\n<td>\n<p><code>For testing the integration of several coded classes within an application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Integrity</code></p>\n</td>\n<td>\n<p><code>A cryptographic service that guarantees data has not been modified or tampered with during or after reception and helps support the anti-tampering of data for users needing data verification between sender and receiver.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Interoperable</code></p>\n</td>\n<td>\n<p><code>The ability of diverse systems, software, or components to collaborate, function cohesively, and exchange information effectively and seamlessly.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Intrusion detection</code></p>\n</td>\n<td>\n<p><code>The ongoing detection of any cyberattacks, threats, or intrusions that may compromise an application or system.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>ItsDangerous</code></p>\n</td>\n<td>\n<p><code>A secure data integrity dependency.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Jinja</code></p>\n</td>\n<td>\n<p><code>A template language for rendering web pages.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>JSON</code></p>\n</td>\n<td>\n<p><code>JavaScript Object Notation.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>LDAP</code></p>\n</td>\n<td>\n<p><code>Lightweight Directory Access Protocol</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Lightweight Directory Access Protocol (LDAP) injection</code></p>\n</td>\n<td>\n<p><code>Exploits websites that construct LDAP statements from data provided by users. In this type of attack, an attacker might modify LDAP statements using a local proxy in order to execute arbitrary commands (granting permissions to unauthorized queries) or modify the content of the LDAP tree.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Linux kernel</code></p>\n</td>\n<td>\n<p><code>A core component of an operating system that provides a platform for running programs and various services on top of it.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Logstash</code></p>\n</td>\n<td>\n<p><code>A data processing pipeline that collects, parses, and stores logs for future use. IBM Financial Crimes Alerts Insight with Watson (FCAI) uses Logstash to collect and normalize log files.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Man-in-the-middle attacks</code></p>\n</td>\n<td>\n<p><code>A type of cyberattack wherein the attacker covertly intercepts and potentially modifies the communication between two parties who are under the impression that they are directly communicating with each other.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>MarkupSafe</code></p>\n</td>\n<td>\n<p><code>A security dependency for untrusted input.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Message digests</code></p>\n</td>\n<td>\n<p><code>Cryptographic hash functions are used to compute checksums of data blocks. It can also be used to sign and verify signatures.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Mittn</code></p>\n</td>\n<td>\n<p><code>Popular tool suite to include in continuous integration.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Multi-factor authentication (MFA)</code></p>\n</td>\n<td>\n<p><code>It is an identity verification method that requires users to provide at least one authentication factor in addition to a password, or at least two authentication factors instead of a password, to gain access to a website, application, or network.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Nessus</code></p>\n</td>\n<td>\n<p><code>It is a vulnerability scanner that scans operating systems, network devices, and critical infrastructure for vulnerabilities, threats, and compliance violations.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Network firewall</code></p>\n</td>\n<td>\n<p><code>A security device or software that serves as a protective barrier between an internal network, like a corporate network, and an external network, such as the internet. Its role is to regulate and observe incoming and outgoing network traffic.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Network layer</code></p>\n</td>\n<td>\n<p><code>The third layer of the OSI model handles data transmission and control of the subnet.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Network mapper (Nmap)</code></p>\n</td>\n<td>\n<p><code>Used to discover hosts and services on a computer network by sending packets and analyzing responses.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Network security</code></p>\n</td>\n<td>\n<p><code>Detects application and system anomalies and monitors a network using a network tool such as Nmap or Snort.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Open Systems Interconnection (OSI model)</code></p>\n</td>\n<td>\n<p><code>Enables communication between diverse communication systems using standard protocols.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Open-source software library (OpenSSL)</code></p>\n</td>\n<td>\n<p><code>A library of software that implements the Secure Socket Layer (or SSL) protocol. It is an open-source toolkit to ensure secure communication with cryptography for all types of communication, from personal to commercial and e-commerce transactions.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Operating system command injection</code></p>\n</td>\n<td>\n<p><code>OS command injection, also termed shell injection, is a web security vulnerability where an attacker can execute arbitrary operating system (OS) commands on a server running an application and can fully compromise it along with all its data.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Orchestration</code></p>\n</td>\n<td>\n<p><code>The automated configuration, management, and coordination of computer systems, applications, and services.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>OWASP</code></p>\n</td>\n<td>\n<p><code>Open Web Application Security Project, launched in 2001 and formally formed in 2004, is a foundation that focuses on software security.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>OWASP Dependency-Check</code></p>\n</td>\n<td>\n<p><code>It is an SCA for checking for vulnerabilities within project dependencies.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>OWASP Dependency-Track</code></p>\n</td>\n<td>\n<p><code>It is an SCA for identifying any risks within the software supply chain.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>OWASP Software Component Verification Standard</code></p>\n</td>\n<td>\n<p><code>It is a community-supported effort to build a sustainable framework for reducing risk within a software supply chain.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>OWASP Top 10</code></p>\n</td>\n<td>\n<p><code>A report that identifies current software security vulnerability concerns and represents a consensus from the OWASP core team, security analysts, security organizations, and other security experts. The OWASP Top 10 is used globally as a standard check for web application security.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>PGP</code></p>\n</td>\n<td>\n<p><code>Pretty good privacy</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Physical layer</code></p>\n</td>\n<td>\n<p><code>The lowest layer of the OSI model transmits bits of raw information.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Presentation layer</code></p>\n</td>\n<td>\n<p><code>The sixth layer of the OSI model focuses on the syntax and semantics of data being transmitted from one point to another.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Principle of Least Privilege (PoLP)</code></p>\n</td>\n<td>\n<p><code>Users should only have the minimum permissions necessary to perform their tasks.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Private key</code></p>\n</td>\n<td>\n<p><code>A confidential piece of information utilized to demonstrate ownership of digital assets.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Process for Attack Simulation and Threat Analysis (PASTA)</code></p>\n</td>\n<td>\n<p><code>A risk-based model that connects to business objectives and technical requirements.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Public key</code></p>\n</td>\n<td>\n<p><code>A cryptographic key is used for the encryption and validation of digital signatures.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Public key cryptography</code></p>\n</td>\n<td>\n<p><code>A public cryptographic algorithm that uses public and private keys. Rivest, Shamir, and Adleman (or RSA) is the most popular implementation of public key cryptography. RSA provides secrecy, authentication, and encryption for anyone to use. It is also used to implement prime number generation to generate private keys using different sizes of key lengths depending upon the level of encryption needed.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>RASP</code></p>\n</td>\n<td>\n<p><code>Runtime Application Self-Protection (or RASP) looks for assaults in the production environment.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Reflected cross-site scripting attack</code></p>\n</td>\n<td>\n<p><code>A reflected cross-site scripting attack injects a script to be reflected from the attacked server to users on a system.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Role-based access control (RBAC)</code></p>\n</td>\n<td>\n<p><code>An access control framework that regulates resource access according to predefined roles. In an RBAC system, users are allocated specific roles, each linked to a set of permissions that determine the actions or resources accessible to users within that role.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Runtime protection</code></p>\n</td>\n<td>\n<p><code>Runtime protection is a modern security mechanism that shields applications against threats while the applications are running.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SALSA</code></p>\n</td>\n<td>\n<p><code>Supply-chain Levels for Software Artifacts (or SALSA) provides a security framework for improving integrity and preventing tampering by implementing standards and controls.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SAST</code></p>\n</td>\n<td>\n<p><code>Static application security testing (or SAST) examines source code to identify security flaws that render your organization's applications vulnerable to attack.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SCA</code></p>\n</td>\n<td>\n<p><code>Software component analysis (or SCA) is the process of determining which open-source components and dependencies are used in your application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SCM</code></p>\n</td>\n<td>\n<p><code>Source control management.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Scrum framework</code></p>\n</td>\n<td>\n<p><code>A framework under which individuals may handle complicated adaptive challenges while producing high-value goods in a productive and creative manner.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Secure development environment</code></p>\n</td>\n<td>\n<p><code>A secure development environment is an ongoing process of securing the network, compute resources and storage devices on-premises and in the cloud.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Secure shell (SSH)</code></p>\n</td>\n<td>\n<p><code>Secure connection protection for connecting with remote devices, such as physical and cloud servers.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Secure Socket Layer (SSL)</code></p>\n</td>\n<td>\n<p><code>A protocol based on encryption technology that provides secure data transmission over the internet. It ensures that data exchanged between a web browser and a web server remains confidential and protected from unauthorized access during transit.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Security Assertion Markup Language (SAML)</code></p>\n</td>\n<td>\n<p><code>Facilitates the exchange of authentication and authorization data among various entities. It enables smooth and secure authentication across diverse domains, empowering users to access multiple applications and services using a single set of credentials.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Security pattern</code></p>\n</td>\n<td>\n<p><code>A set of rules that represent and define a reusable solution to recurring security threats or issues. By following security patterns, organizations establish robust security frameworks while ensuring the confidentiality, integrity, and availability of the system's data.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Security pattern catalog</code></p>\n</td>\n<td>\n<p><code>Empowers software developers to review and choose security patterns for developing necessary and additional security features for their application code. When developing for deployment, a well-classified security pattern catalog enables developers to reuse security patterns across multiple applications.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Security testing</code></p>\n</td>\n<td>\n<p><code>Security testing provides a secure code baseline for development. It should be performed on all new codes to reduce the risk of impacts.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Serverless computing</code></p>\n</td>\n<td>\n<p><code>A cloud application development and execution model that lets developers build and run code without managing servers or paying for idle cloud infrastructure.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Server-side request forgeries (SSRF)</code></p>\n</td>\n<td>\n<p><code>A server site attack results in sensitive information being disclosed or leaked from the back-end server of the application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Session layer</code></p>\n</td>\n<td>\n<p><code>The fifth OSI model layer establishes multiple sessions from different machines while establishing consistent sessions if a crash occurs.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Snort</code></p>\n</td>\n<td>\n<p><code>A network intrusion detection and prevention system that provides real-time analysis of network traffic.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Snyk</code></p>\n</td>\n<td>\n<p><code>A developer security platform for securing code, dependencies, containers, and infrastructure as code.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Snyk Code</code></p>\n</td>\n<td>\n<p><code>An integrated development tool that performs semantic analysis to discover coding and security bugs throughout the development phase.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Software Development Lifecycle (SDLC)</code></p>\n</td>\n<td>\n<p><code>A framework that specifies the steps involved in software development at each stage. It details the strategy for developing, deploying, and maintaining a program.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Spoofing</code></p>\n</td>\n<td>\n<p><code>A form of network attack that involves manipulating network traffic or data to gain unauthorized access to systems, services, or users.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SQL</code></p>\n</td>\n<td>\n<p><code>Structured Query Language</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SQL injection</code></p>\n</td>\n<td>\n<p><code>Takes advantage of the SQL syntax to inject commands that can read or modify a database or compromise the meaning of the original SQL query. In this type of attack, an attacker can spoof an identity; expose, tamper with, destroy, or make existing data unavailable; or become the administrator of the database server.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SQL injection attacks</code></p>\n</td>\n<td>\n<p><code>Attempt to exploit web application vulnerabilities by concatenating user input with SQL queries. If successful, these attacks can execute malicious SQL commands using a legitimate web application connection.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SQL manipulation</code></p>\n</td>\n<td>\n<p><code>One of the most common types of SQL injection and an attack that modifies an SQL statement of set operations.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Static analysis</code></p>\n</td>\n<td>\n<p><code>Static analysis examines all code or runtime binaries to help detect common vulnerabilities without executing code or running programs.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Static Reviewer</code></p>\n</td>\n<td>\n<p><code>Eliminates well-known vulnerabilities.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Stored cross-site scripting</code></p>\n</td>\n<td>\n<p><code>A stored cross-site scripting attack injects a script that becomes permanently stored in a database or on a targeted server.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>STRIDE</code></p>\n</td>\n<td>\n<p><code>STRIDE means Spoofing identity, Tampering with data, Repudiation, Information disclosure, Denial of service, and Elevation of privileges. STRIDE, which came from Microsoft, evaluates applications and systems to find threats and vulnerabilities.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Subnets</code></p>\n</td>\n<td>\n<p><code>A subnetwork (or subnet) is a smaller portion of a larger network partitioned to create more feasible segments of the network with higher efficiency.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>SWID Tags</code></p>\n</td>\n<td>\n<p><code>Software Identification Tags (or SWID Tags) are standard to track software installed on managed devices.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Symmetric ciphers</code></p>\n</td>\n<td>\n<p><code>Cryptographic algorithms use the same key for both encryption and decryption of data.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Symmetric encryption</code></p>\n</td>\n<td>\n<p><code>When the same key is used for both encrypting and decrypting.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>System-call auditing</code></p>\n</td>\n<td>\n<p><code>The retrieval and review of system-call information from a kernel, such as the Linux kernel.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Threat modeling</code></p>\n</td>\n<td>\n<p><code>Provides a process to analyze ongoing threats and eliminate the potential for software coding weaknesses and vulnerabilities.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Threat monitoring</code></p>\n</td>\n<td>\n<p><code>Scanning code repositories and containers to find security issues. Password mishandling, protocol insecurities, and incorrect permissions are examples of issues that you can discover with threat monitoring.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Token management</code></p>\n</td>\n<td>\n<p><code>Involves the procedures and protocols employed in handling and controlling tokens, which are unique pieces of data or strings used in diverse systems and applications.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Transport layer</code></p>\n</td>\n<td>\n<p><code>The fourth layer of the OSI model accepts transmissions or data from the network layer and chops them into smaller units or packets for passing them back to the network layer.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Transport Layer Security (TLS)</code></p>\n</td>\n<td>\n<p><code>A protocol based on encryption technology used to secure communications over a computer network. It is the successor to SSL and is designed using an advanced encryption algorithm.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Two-factor authentication</code></p>\n</td>\n<td>\n<p><code>This added security measure is employed to safeguard user accounts and digital data. It demands that users present two distinct forms of identification before obtaining access to a system, service, or application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Unified Modelling Language (UML)</code></p>\n</td>\n<td>\n<p><code>Can visually model and represent a system for a better understanding of the system's architecture and design.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Unit testing</code></p>\n</td>\n<td>\n<p><code>For testing classes and methods to evaluate application programming interface (or API) contracts, you can perform unit testing on individual classes with limited scope.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Validating input</code></p>\n</td>\n<td>\n<p><code>Validating input means checking (on the server side) that the input provided by the user or attacker is what you expect it to be.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vault</code></p>\n</td>\n<td>\n<p><code>Developed by HashiCorp, Vault is a token-based storage solution for managing secrets. This tool provides policies that constrain user access and privileges when users interact with a Vault server.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Visual, Agile, and Simple Threat (VAST)</code></p>\n</td>\n<td>\n<p><code>An agile methodology with application and operational threat models. VAST uses process-flow diagrams to represent the architectural perspective.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vulnerability analysis</code></p>\n</td>\n<td>\n<p><code>It is a method of identifying possible application flaws that could jeopardize your application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vulnerability patching</code></p>\n</td>\n<td>\n<p><code>The distribution of security updates or patches improves functionality or eliminates vulnerabilities in an IT system or service.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vulnerability scanner</code></p>\n</td>\n<td>\n<p><code>A specialized software tool designed to detect and evaluate security ineffectiveness in computer systems, networks, applications, and other digital assets.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Vulnerability scanning</code></p>\n</td>\n<td>\n<p><code>The search for security vulnerabilities from within the code and outside of an application.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Web services security</code></p>\n</td>\n<td>\n<p><code>A set of measures and protocols implemented to ensure confidentiality, integrity, and authentication of data exchanged between web services and their clients over the internet.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>Werkzeug</code></p>\n</td>\n<td>\n<p><code>A web server gateway interface.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>XML</code></p>\n</td>\n<td>\n<p><code>Extensible Markup Language.</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>ZAP</code></p>\n</td>\n<td>\n<p><code>Zed Attack Proxy (or Zap) is a vulnerability scanner. It is an OWASP tool and open-source software that uses spiders to crawl web applications.</code></p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>",
                "tags": [],
                "collections": [
                    "NJPMMW3I"
                ],
                "relations": {},
                "dateAdded": "2025-03-29T11:29:41Z",
                "dateModified": "2025-03-29T11:30:19Z"
            }
        },
        {
            "key": "JM5NYIV5",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/JM5NYIV5",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/JM5NYIV5",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "JM5NYIV5",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>01 Helpful cybersecurity resources</h1>\n<blockquote>\n<ul>\n<li>\nEngage with the security community to stay updated.\n</li>\n<li>\nThe security industry is constantly evolving.\n</li>\n<li>\nContinuous learning is crucial for security professionals.\n</li>\n<li>\nThe OWASP Top 10 is an example of the field's evolution.\n</li>\n<li>\nStaying current gives you an edge in your career.\n</li>\n<li>\n<p>Recommended resources:</p>\n<ul>\n<li>\n<strong>CSO Online:</strong> News, analysis, and research on security and risk management.\n</li>\n<li>\n<strong>Krebs on Security:</strong> In-depth security news and cyberattack investigations.\n</li>\n<li>\n<strong>Dark Reading:</strong> Information on various security topics like application, mobile, cloud, and IoT security.\n</li>\n</ul>\n</li>\n<li>\nActively seek new information to stay up-to-date in the evolving security landscape.\n</li>\n</ul>\n</blockquote>\n<h2>The Importance of Continuous Learning</h2>\n<p>The security industry is constantly evolving. Staying up-to-date with the latest trends and news is crucial for security professionals. The OWASP Top 10, a globally recognized standard for web application security risks that is updated every three to four years, exemplifies this evolving nature. Continuing your security education beyond formal programs demonstrates a willingness to remain current, which can be advantageous for career advancement.</p>\n<h2>Recommended Security Resources</h2>\n<p>Several websites and blogs offer valuable insights into the security landscape:</p>\n<h3>CSO Online</h3>\n<p>This site provides news, analysis, and research on various security and risk management topics. It is a resource frequently consulted by Chief Security Officers (CSOs) for tips and ideas. Regularly reviewing CSO Online can help you stay informed.</p>\n<h3>Krebs on Security</h3>\n<p>Created by former Washington Post reporter Brian Krebs, this blog offers in-depth coverage of security news and investigations into cyberattacks. Following this blog is a good way to stay abreast of the latest security happenings worldwide.</p>\n<h3>Dark Reading</h3>\n<p>This popular website caters to security professionals and provides information on a wide range of security topics, including analytics, application security, mobile and cloud security, and the Internet of Things (IoT).</p>\n<h2>Conclusion</h2>\n<p>As security professionals, it is essential to continuously seek out new information to evolve with the industry. Exploring the recommended websites and blogs will help you stay up-to-date with the latest developments.</p>\n</div>",
                "tags": [],
                "collections": [
                    "CKBYWNAT"
                ],
                "relations": {},
                "dateAdded": "2025-03-24T09:18:48Z",
                "dateModified": "2025-03-24T09:20:44Z"
            }
        },
        {
            "key": "TDYTZ4GQ",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/TDYTZ4GQ",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/TDYTZ4GQ",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "TDYTZ4GQ",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>02 Automating Tasks in CI/CD</h1>\n<h2>Introduction to DevSecOps and Automation</h2>\n<ul>\n<li>\nAutomation is crucial for security in software development.\n</li>\n<li>\nPython can be used to automate security tasks within CI/CD pipelines.\n</li>\n<li>\nThis practice is known as <strong>DevSecOps</strong>: integrating security into Development and Operations from the beginning.\n</li>\n<li>\nDevSecOps promotes shared security responsibility and automates security practices in the daily workflow.\n</li>\n</ul>\n<h2>Why Automate Security Tasks in CI/CD with Python?</h2>\n<ul>\n<li>\n<strong>Increases Speed and Efficiency:</strong> Python scripts make security checks fast, ensuring rapid and secure software releases.\n</li>\n<li>\n<strong>Finds Problems Early:</strong> Automation helps identify security issues during development, making them easier and cheaper to fix.\n</li>\n<li>\n<strong>Remains Consistent:</strong> Python scripts ensure consistent execution of security checks, reducing human error.\n</li>\n<li>\n<strong>Reduces workload for Security Teams:</strong> Automation frees up security teams to focus on more complex security challenges.\n</li>\n<li>\n<strong>Supports a culture of security:</strong> Integrating Python-based automation fosters a DevSecOps culture where security is a primary concern for everyone.\n</li>\n</ul>\n<h2>What Security Tasks Can You Automate in CI/CD with Python?</h2>\n<h3>Security Testing</h3>\n<ul>\n<li>\n<p><strong>Static Application Security Testing (SAST):</strong></p>\n<ul>\n<li>\nPython scripts can initiate SAST tools to analyze code for vulnerabilities before building.\n</li>\n<li>\nPython can process SAST results, generate reports, and halt the process if critical issues are found.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Dynamic Application Security Testing (DAST):</strong></p>\n<ul>\n<li>\nPython can automatically run DAST tools to test running software in a test environment.\n</li>\n<li>\nPython scripts can analyze DAST results and provide feedback in the CI/CD pipeline.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Software Composition Analysis (SCA):</strong></p>\n<ul>\n<li>\nPython can integrate with SCA tools to check software dependencies for known vulnerabilities.\n</li>\n<li>\nScripts can manage the SCA process, report issues, and enforce policies based on vulnerability severity.\n</li>\n</ul>\n</li>\n</ul>\n<h3>Automated Vulnerability Scanning</h3>\n<ul>\n<li>\nPython scripts can orchestrate vulnerability scans of container images, infrastructure configurations, and the CI/CD pipeline itself.\n</li>\n<li>\nPython can schedule scans, collect results, and send alerts for new vulnerabilities.\n</li>\n</ul>\n<h3>Compliance Checks</h3>\n<ul>\n<li>\nPython scripts can automatically verify compliance with security standards and regulations.\n</li>\n<li>\nExamples include checking for secure coding practices or infrastructure security guidelines.\n</li>\n<li>\nPython can generate compliance reports and ensure adherence to security standards.\n</li>\n</ul>\n<h3>Secrets Management Automation</h3>\n<ul>\n<li>\nPython is vital for automating secure secrets management.\n</li>\n<li>\nScripts can scan code to prevent hardcoding of sensitive credentials.\n</li>\n<li>\nPython can interact with secret management tools (e.g., HashiCorp Vault) to securely retrieve and inject secrets during automated releases.\n</li>\n</ul>\n<h3>Policy Enforcement</h3>\n<ul>\n<li>\nPython scripts can implement \"Policy as Code\" to automatically enforce security policies.\n</li>\n<li>\nPython can define and interpret security policies.\n</li>\n<li>\nScripts can check pipeline steps against these policies and automatically stop releases if violations occur (e.g., too many vulnerabilities).\n</li>\n</ul>\n<h2>How Python Works with CI/CD Tools</h2>\n<ul>\n<li>\n<strong>Run Scripts:</strong> CI/CD tools (like Jenkins, GitLab CI, CircleCI) allow easy execution of Python scripts as part of the release process.\n</li>\n<li>\n<p><strong>API Connections:</strong> Python excels at interacting with APIs of both CI/CD and security tools.</p>\n<ul>\n<li>\nScripts can use CI/CD APIs to manage releases, trigger jobs, and access build artifacts.\n</li>\n<li>\nScripts can use security tool APIs to initiate scans and retrieve results.\n</li>\n</ul>\n</li>\n<li>\n<strong>Add-ons and Extensions:</strong> Some CI/CD systems offer Python-based add-ons or extensions, simplifying security automation integration.\n</li>\n</ul>\n<h2>Using Python for Other CI/CD Tasks with Security Considerations</h2>\n<ul>\n<li>\n<strong>Set Up Environments:</strong> Python can automate the creation of secure staging environments with proper network configurations and security controls.\n</li>\n<li>\n<strong>Code Quality Checks:</strong> Python can run code quality tools (linters) to identify style issues and potential security flaws early in development.\n</li>\n<li>\n<strong>Automate Secure Releases:</strong> Python scripts can manage the release process to staging and production, ensuring adherence to security best practices, including secure configurations and file transfers.\n</li>\n</ul>\n<h2>Conclusion: Python - Your Automation Ally for Secure CI/CD</h2>\n<ul>\n<li>\nAutomating security tasks with Python is essential for building secure and efficient CI/CD pipelines.\n</li>\n<li>\nPython's flexibility and integration capabilities make it a powerful tool for DevSecOps.\n</li>\n<li>\nBy leveraging Python for automation, organizations can proactively identify and address security issues, reduce manual effort, enforce security policies, and ultimately deliver more secure software with greater confidence and speed.\n</li>\n</ul>\n<h2>Key Takeaways</h2>\n<ul>\n<li>\nAutomating security in your CI/CD pipeline is now a necessity for robust software development.\n</li>\n<li>\nDevSecOps emphasizes building security into the development process from the outset.\n</li>\n<li>\nPython is a highly effective tool for automating crucial security tasks throughout the software release lifecycle.\n</li>\n<li>\nUtilizing Python for automation leads to faster, more efficient, and significantly more secure CI/CD pipelines, enabling the delivery of strong, secure software from the beginning.\n</li>\n</ul>\n<h2>Resources</h2>\n<ul>\n<li>\nBest Python Libraries for Cybersecurity in 2024. <a href=\"https://medium.com/@Scofield_Idehen/best-python-libraries-for-cybersecurity-in-2024-037a870f39d1\" rel=\"noopener noreferrer nofollow\">https://medium.com/@Scofield_Idehen/best-python-libraries-for-cybersecurity-in-2024-037a870f39d1</a>\n</li>\n<li>\nVulnerability Scanning for Secure Python Development. <a href=\"https://safetycli.com/\" rel=\"noopener noreferrer nofollow\">https://safetycli.com/</a>\n</li>\n<li>\nArticle 3 - OWASP Dependency-Check and Vulnerability Scanning. <a href=\"https://www.linkedin.com/pulse/article-3-owasp-dependency-check-vulnerability-scanning-adorsys-p73fe\" rel=\"noopener noreferrer nofollow\">https://www.linkedin.com/pulse/article-3-owasp-dependency-check-vulnerability-scanning-adorsys-p73fe</a>\n</li>\n<li>\nPython library for Hashicorp Vault implementation. <a href=\"https://discuss.hashicorp.com/t/python-library-for-hashicorp-vault-implementation/55805\" rel=\"noopener noreferrer nofollow\">https://discuss.hashicorp.com/t/python-library-for-hashicorp-vault-implementation/55805</a>\n</li>\n<li>\nContinuous Integration With Python: An Introduction. <a href=\"https://realpython.com/python-continuous-integration/\" rel=\"noopener noreferrer nofollow\">https://realpython.com/python-continuous-integration/</a>\n</li>\n<li>\nPython for DevOps: An Ultimate Guide. <a href=\"https://code-b.dev/blog/python-devops\" rel=\"noopener noreferrer nofollow\">https://code-b.dev/blog/python-devops</a>\n</li>\n<li>\nBuilding Custom Cybersecurity Tools with Python: A Guide for Beginners. <a href=\"https://www.linkedin.com/pulse/building-custom-cybersecurity-tools-python-bi6if\" rel=\"noopener noreferrer nofollow\">https://www.linkedin.com/pulse/building-custom-cybersecurity-tools-python-bi6if</a>\n</li>\n<li>\nSecure Coding in Python: Essential Practices for Data Engineers. <a href=\"https://www.linkedin.com/pulse/secure-coding-python-essential-practices-data-engineers-priyanka-sain-wewkc\" rel=\"noopener noreferrer nofollow\">https://www.linkedin.com/pulse/secure-coding-python-essential-practices-data-engineers-priyanka-sain-wewkc</a>\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "CKA53VUV"
                ],
                "relations": {},
                "dateAdded": "2025-03-23T12:47:17Z",
                "dateModified": "2025-03-23T12:51:26Z"
            }
        },
        {
            "key": "295LAGP4",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/295LAGP4",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/295LAGP4",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "295LAGP4",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>03 Prevent injection attacks</h1>\n<h2>Introduction</h2>\n<ul>\n<li>\nSQL (Structured Query Language) is a common language used to interact with databases.\n</li>\n<li>\nSQL injections are attacks that execute unexpected queries on a database, allowing attackers to modify, delete, or steal information.\n</li>\n<li>\nSQL injections are a common attack vector due to the popularity of SQL and developers focusing on functionality over security.\n</li>\n</ul>\n<h2>SQL Queries</h2>\n<ul>\n<li>\nDatabases store organized information in tables.\n</li>\n<li>\nSQL queries request data from a database.\n</li>\n<li>\nQueries are often initiated through user input fields (login forms, search bars, etc.).\n</li>\n<li>\nSQL injections occur when input fields are not properly filtered.\n</li>\n</ul>\n<h2>SQL Injection Categories</h2>\n<ul>\n<li>\n<p><strong>In-band (Classic):</strong></p>\n<ul>\n<li>\nUses the same communication channel for attack and results.\n</li>\n<li>\nExample: Malicious query in a search box returning sensitive data.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Out-of-band:</strong></p>\n<ul>\n<li>\nUses a different communication channel for attack and results.\n</li>\n<li>\nExample: Creating a connection to an attacker-controlled database.\n</li>\n<li>\nLess common, requires specific server configurations.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Inferential:</strong></p>\n<ul>\n<li>\nAttacker infers results by analyzing system behavior.\n</li>\n<li>\nExample: Analyzing error messages to understand database structure.\n</li>\n</ul>\n</li>\n</ul>\n<h2>Injection Prevention</h2>\n<ul>\n<li>\nKey principle: Escape user inputs to prevent unexpected code execution.\n</li>\n<li>\n<p><strong>Methods:</strong></p>\n<ul>\n<li>\n<strong>Prepared statements:</strong> Execute SQL statements before passing them to the database.\n</li>\n<li>\n<strong>Input sanitization:</strong> Remove potentially harmful user input.\n</li>\n<li>\n<strong>Input validation:</strong> Ensure user input meets system expectations.\n</li>\n</ul>\n</li>\n<li>\nUsing a combination of these techniques is recommended.\n</li>\n<li>\nCollaboration with application developers is crucial.\n</li>\n<li>\n<strong>OWASP's SQL injection detection techniques</strong> : is a useful resource for further investigation. <u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection\" rel=\"noopener noreferrer nofollow\">OWASP's SQL injection detection techniques</a></span></span></u><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\"><br></span></span>\n</li>\n</ul>\n<h2>Key Takeaways</h2>\n<ul>\n<li>\nSQL injections are common due to the widespread use of SQL.\n</li>\n<li>\nThey result from unexpected user input.\n</li>\n<li>\nCollaboration with developers is essential for implementing effective defenses.\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "XRCWD4VP"
                ],
                "relations": {},
                "dateAdded": "2025-03-19T07:50:02Z",
                "dateModified": "2025-03-19T08:55:36Z"
            }
        },
        {
            "key": "G5AA59DI",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/G5AA59DI",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/G5AA59DI",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "G5AA59DI",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>05 The OWASP Top 10</h1>\n<h2>What is OWASP?</h2>\n<ul>\n<li>\n<p><strong>Open Worldwide Application Security Project\u00ae (OWASP):</strong></p>\n<ul>\n<li>\nA nonprofit foundation focused on improving software security.\n</li>\n<li>\nAn open platform for sharing security information, tools, and events.\n</li>\n</ul>\n</li>\n</ul>\n<h2>OWASP Top 10</h2>\n<ul>\n<li>\nA list of the most critical web application security risks.\n</li>\n<li>\nPublished since 2003.\n</li>\n<li>\nUpdated every few years to reflect evolving threats.\n</li>\n<li>\nUsed by organizations during application development and audits.\n</li>\n<li>\nFocuses on vulnerabilities in new or custom software.\n</li>\n</ul>\n<h2>Common Vulnerabilities</h2>\n<ul>\n<li>\n<p><strong>Broken Access Control:</strong></p>\n<ul>\n<li>\nFailures in limiting user actions, leading to unauthorized access.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Cryptographic Failures:</strong></p>\n<ul>\n<li>\nInsufficient protection of sensitive data through weak encryption.\n</li>\n<li>\nExample: Using weak hashing algorithms like MD5.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Injection:</strong></p>\n<ul>\n<li>\nInsertion of malicious code into vulnerable applications.\n</li>\n<li>\nExample: SQL injection attacks on login forms.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Insecure Design:</strong></p>\n<ul>\n<li>\nLack of secure design principles during application development.\n</li>\n<li>\nResults in vulnerabilities to various attacks.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Security Misconfiguration:</strong></p>\n<ul>\n<li>\nImproperly set or maintained security settings.\n</li>\n<li>\nExample: Using default settings on network servers.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Vulnerable and Outdated Components:</strong></p>\n<ul>\n<li>\nUse of outdated or vulnerable open-source libraries.\n</li>\n<li>\nIncreases risk of exploitation.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Identification and Authentication Failures:</strong></p>\n<ul>\n<li>\nFailures in verifying user identity and authorization.\n</li>\n<li>\nExample: Weak Wi-Fi router authentication.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Software and Data Integrity Failures:</strong></p>\n<ul>\n<li>\nInadequate review of software updates and patches.\n</li>\n<li>\nCan lead to supply chain attacks.\n</li>\n<li>\nExample: SolarWinds cyber attack (2020).\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Security Logging and Monitoring Failures:</strong></p>\n<ul>\n<li>\nInsufficient logging and monitoring of security events.\n</li>\n<li>\nHinders incident response and problem resolution.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Server-Side Request Forgery (SSRF):</strong></p>\n<ul>\n<li>\nManipulation of server requests to access unauthorized resources.\n</li>\n<li>\nExploits vulnerabilities in server applications.\n</li>\n</ul>\n</li>\n</ul>\n<h2>Key Takeaways</h2>\n<ul>\n<li>\nOWASP Top 10 is a crucial resource for understanding and mitigating web application vulnerabilities.\n</li>\n<li>\nIt is different from the CVE list, in that it focuses on preventing vulnerabilities in new applications, where the CVE list focuses on reporting known vulnerabilities in existing applications.\n</li>\n<li>\nStaying informed about these vulnerabilities is essential for cybersecurity professionals.\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "ZZZLV8QA"
                ],
                "relations": {},
                "dateAdded": "2025-03-18T12:02:28Z",
                "dateModified": "2025-03-18T12:35:47Z"
            }
        },
        {
            "key": "UXP7UD2C",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/UXP7UD2C",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/UXP7UD2C",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "UXP7UD2C",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>02 More about OWASP security principles</h1>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Previously, you learned that cybersecurity analysts help keep data safe and reduce risk for an organization by using a variety of security frameworks, controls, and security principles. In this reading, you will learn about more Open Web Application Security Project, recently renamed Open Worldwide Application Security Project\u00ae (OWASP), security principles and how entry-level analysts use them.&nbsp;</span></span></p>\n<h2><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Security principles</span></span></h2>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">In the workplace, security principles are embedded in your daily tasks. Whether you are analyzing logs, monitoring a security information and event management (SIEM) dashboard, or using a </span></span><u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://csrc.nist.gov/glossary/term/vulnerability_scanner\" rel=\"noopener noreferrer nofollow\">vulnerability scanner</a></span></span></u>, you will use these principles in some way.&nbsp;</p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Previously, you were introduced to several OWASP security principles. These included:</span></span></p>\n<ul>\n<li>\n<strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Minimize attack surface area</span></span></strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">: Attack surface refers to all the potential vulnerabilities a threat actor could exploit.</span></span>\n</li>\n<li>\n<strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Principle of least privilege</span></span></strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">: Users have the least amount of access required to perform their everyday tasks.</span></span>\n</li>\n<li>\n<strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Defense in depth</span></span></strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">: Organizations should have varying&nbsp;security controls that mitigate risks and threats.</span></span>\n</li>\n<li>\n<strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Separation of duties</span></span></strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">: Critical actions should rely on multiple people, each of whom follow the principle of least privilege.&nbsp;</span></span>\n</li>\n<li>\n<strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Keep security simple</span></span></strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">: Avoid unnecessarily complicated solutions. Complexity makes security difficult.&nbsp;</span></span>\n</li>\n<li>\n<strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Fix security issues correctly</span></span></strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">: When security incidents occur, identify the root cause, contain the impact, identify vulnerabilities, and conduct tests to ensure that remediation is successful.</span></span>\n</li>\n</ul>\n<h2><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Additional OWASP security principles</span></span></h2>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Next, you\u2019ll learn about four additional OWASP security principles that cybersecurity analysts and their teams use to keep organizational operations and people safe.</span></span></p>\n<h3><strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Establish secure defaults</span></span></strong></h3>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">This principle means that the optimal security state of an application is also its default state for users; it should take extra work to make the application insecure.&nbsp;</span></span></p>\n<h3><strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Fail securely</span></span></strong></h3>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Fail securely means that when a control fails or stops, it should do so by defaulting to its most secure option. For example, when a firewall fails it should simply close all connections and block all new ones, rather than start accepting everything.</span></span></p>\n<h3><strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Don\u2019t trust services</span></span></strong></h3>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Many organizations work with third-party partners. These outside partners often have different security policies than the organization does. And the organization shouldn\u2019t explicitly trust that their partners\u2019 systems are secure. For example, if a third-party vendor tracks reward points for airline customers, the airline should ensure that the balance is accurate before sharing that information with their customers.</span></span></p>\n<h3><strong><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Avoid security by obscurity</span></span></strong></h3>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">The security of key systems should not rely on keeping details hidden. Consider the following example from OWASP (2016): </span></span><u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/\" rel=\"noopener noreferrer nofollow\">OWASP Mobile Top 10</a></span></span></u></p>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">The security of an application should not rely on keeping the source code secret. Its security should rely upon many other factors, including reasonable password policies, defense in depth, business transaction limits, solid network architecture, and fraud and audit controls.</span></span></p>\n<h2><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Key takeaways</span></span></h2>\n<p><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">Cybersecurity professionals are constantly applying security principles to safeguard organizations and the people they serve. As an entry-level security analyst, you can use these security principles to promote safe development practices that reduce risks to companies and users alike.&nbsp;</span></span></p>\n</div>",
                "tags": [],
                "collections": [
                    "5MI26MGC"
                ],
                "relations": {},
                "dateAdded": "2025-03-12T12:31:13Z",
                "dateModified": "2025-03-12T14:43:53Z"
            }
        },
        {
            "key": "G3YD7N5H",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/G3YD7N5H",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/G3YD7N5H",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "G3YD7N5H",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>01 OWASP security principles</h1>\n<p>Understanding how to protect an organization's data and assets is crucial for a security analyst. Principles and guidelines, along with NIST frameworks and the CIA triad, can help minimize threats and risks.</p>\n<p>Here are some OWASP security principles:</p>\n<p><strong>Minimize the attack surface area:</strong></p>\n<ul>\n<li>\nAn attack surface refers to potential vulnerabilities.\n</li>\n<li>\nAttack vectors are pathways attackers use to penetrate security defenses (e.g., phishing emails, weak passwords).\n</li>\n<li>\nTo minimize the attack surface, security teams might disable software features, restrict access, or establish complex password requirements.\n</li>\n</ul>\n<p><strong>Principle of least privilege:</strong></p>\n<ul>\n<li>\nUsers should have the minimum access required for their tasks.\n</li>\n<li>\nThis reduces the potential damage of a security breach.\n</li>\n</ul>\n<p><strong>Defense in depth:</strong></p>\n<ul>\n<li>\nOrganizations should have multiple security controls that address risks and threats in different ways.\n</li>\n<li>\nExamples of security controls include multi-factor authentication (MFA), firewalls, intrusion detection systems, and permission settings.\n</li>\n</ul>\n<p><strong>Separation of duties:</strong></p>\n<ul>\n<li>\nThis prevents individuals from misusing the system.\n</li>\n<li>\nNo one person should have excessive privileges.\n</li>\n</ul>\n<p><strong>Keep security simple:</strong></p>\n<ul>\n<li>\nAvoid overly complicated security solutions, as they can become unmanageable.\n</li>\n<li>\nComplex controls can hinder collaboration.\n</li>\n</ul>\n<p><strong>Fix security issues correctly:</strong></p>\n<ul>\n<li>\nIdentify the root cause of security incidents quickly.\n</li>\n<li>\nCorrect vulnerabilities and test to ensure repairs are successful.\n</li>\n<li>\nExample: Addressing weak passwords with stricter password policies.\n</li>\n</ul>\n<p>Understanding these principles enhances overall security knowledge and can help individuals excel as security professionals.</p>\n</div>",
                "tags": [],
                "collections": [
                    "5MI26MGC"
                ],
                "relations": {},
                "dateAdded": "2025-03-12T12:30:56Z",
                "dateModified": "2025-03-12T14:41:45Z"
            }
        },
        {
            "key": "WZXUDE6Z",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/WZXUDE6Z",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/WZXUDE6Z",
                    "type": "text/html"
                },
                "enclosure": {
                    "href": "file:///home/schweizer/Zotero/storage/WZXUDE6Z/Google-Cybersecurity-Certificate-glossary.pdf",
                    "type": "application/pdf",
                    "title": "Google-Cybersecurity-Certificate-glossary.pdf",
                    "length": 202030
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "WZXUDE6Z",
                "version": 0,
                "itemType": "attachment",
                "title": "Google-Cybersecurity-Certificate-glossary",
                "linkMode": "imported_file",
                "contentType": "application/pdf",
                "charset": "",
                "filename": "Google-Cybersecurity-Certificate-glossary.pdf",
                "tags": [],
                "collections": [
                    "6AJZW6X6"
                ],
                "relations": {},
                "dateAdded": "2025-03-12T12:20:44Z",
                "dateModified": "2025-03-12T12:20:44Z"
            }
        },
        {
            "key": "UHHZWH7W",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/UHHZWH7W",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/UHHZWH7W",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "UHHZWH7W",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>05 Manage common threats, risks, and vulnerabilities</h1>\n<p>Previously, you learned that security involves protecting organizations and people from threats, risks, and vulnerabilities. Understanding the current threat landscapes gives organizations the ability to create policies and processes designed to help prevent and mitigate these types of security issues. In this reading, you will further explore how to manage risk and some common threat actor tactics and techniques, so you are better prepared to protect organizations and the people they serve when you enter the cybersecurity field.&nbsp;</p>\n<h2><span style=\"color: inherit\">Risk management</span></h2>\n<p>A primary goal of organizations is to protect assets. An<strong> asset </strong>is an item perceived as having value to an organization. Assets can be digital or physical. Examples of digital assets include the personal information of employees, clients, or vendors, such as:&nbsp;</p>\n<ul>\n<li>\nSocial Security Numbers (SSNs), or unique national identification numbers assigned to individuals&nbsp;\n</li>\n<li>\nDates of birth\n</li>\n<li>\nBank account numbers\n</li>\n<li>\nMailing addresses\n</li>\n</ul>\n<p>Examples of physical assets include:</p>\n<ul>\n<li>\nPayment kiosks\n</li>\n<li>\nServers\n</li>\n<li>\nDesktop computers\n</li>\n<li>\nOffice spaces\n</li>\n</ul>\n<p>Some common strategies used to manage risks include:</p>\n<ul>\n<li>\n<strong>Acceptance</strong>: Accepting a risk to avoid disrupting business continuity\n</li>\n<li>\n<strong>Avoidance</strong>: Creating a plan to avoid the risk altogether\n</li>\n<li>\n<strong>Transference</strong>: Transferring risk to a third party to manage\n</li>\n<li>\n<strong>Mitigation</strong>: Lessening the impact of a known risk\n</li>\n</ul>\n<p>Additionally, organizations implement risk management processes based on widely accepted frameworks to help protect digital and physical assets from various threats, risks, and vulnerabilities. Examples of frameworks commonly used in the cybersecurity industry include the National Institute of Standards and Technology Risk Management Framework (<u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://csrc.nist.gov/projects/risk-management/about-rmf\" rel=\"noopener noreferrer nofollow\">NIST RMF</a></span></span></u>) and Health Information Trust Alliance (<u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://hitrustalliance.net/product-tool/hitrust-csf/?utm_term=&amp;utm_campaign=HITRUST_i1_PaidSearch&amp;utm_source=adwords&amp;utm_medium=ppc&amp;hsa_acc=2724012343&amp;hsa_cam=16641331914&amp;hsa_grp=136906352837&amp;hsa_ad=598980848547&amp;hsa_src=g&amp;hsa_tgt=dsa-1659695676388&amp;hsa_kw=&amp;hsa_mt=&amp;hsa_net=adwords&amp;hsa_ver=3&amp;gclid=Cj0KCQiAorKfBhC0ARIsAHDzsluRN5tSpCQal-rYnZLo2wUNppQdUHUba82LMX3JMGOoRPEJ6wG6-LgaAryYEALw_wcB\" rel=\"noopener noreferrer nofollow\">HITRUST</a></span></span></u>).</p>\n<p>Following are some common types of threats, risks, and vulnerabilities you\u2019ll help organizations manage as a security professional.</p>\n<h2><span style=\"color: inherit\">Today\u2019s most common threats, risks, and vulnerabilities</span></h2>\n<h3><strong><span style=\"color: inherit\">Threats</span></strong></h3>\n<p>A <strong>threat</strong> is any circumstance or event that can negatively impact assets. As an entry-level security analyst, your job is to help defend the organization\u2019s assets from inside and outside threats. Therefore, understanding common types of threats is important to an analyst\u2019s daily work.&nbsp;As a reminder, common threats include:</p>\n<ul>\n<li>\n<strong>Insider threats: </strong>Staff members or vendors<strong> </strong>abuse their authorized access to obtain data that may harm an organization.\n</li>\n<li>\n<strong>Advanced persistent threats (APTs): </strong>A threat actor maintains unauthorized access to a system for an extended period of time.\n</li>\n</ul>\n<h3><strong><span style=\"color: inherit\">Risks</span></strong></h3>\n<p>A <strong>risk</strong> is anything that can impact the confidentiality, integrity, or availability of an asset. A basic formula for determining the level of risk is that risk equals the likelihood of a threat. One way to think about this is that a risk is being late to work and threats are traffic, an accident, a flat tire, etc.&nbsp;</p>\n<p>There are different factors that can affect the likelihood of a risk to an organization\u2019s assets, including:</p>\n<ul>\n<li>\n<strong>External risk: </strong>Anything outside the organization that has the potential to harm organizational assets, such as threat actors attempting to gain access to private information\n</li>\n<li>\n<strong>Internal risk:</strong> A current or former employee, vendor, or trusted partner who poses a security risk\n</li>\n<li>\n<strong>Legacy systems:</strong> Old systems that might not be accounted for or updated, but can still impact assets, such as workstations or old mainframe systems. For example, an organization might have an old vending machine that takes credit card payments or a workstation that is still connected to the legacy accounting system.\n</li>\n<li>\n<strong>Multiparty risk:</strong> Outsourcing work to third-party vendors can give them access to intellectual property, such as trade secrets, software designs, and inventions.\n</li>\n<li>\n<strong>Software compliance/licensing:</strong> Software that is not updated or in compliance, or patches that are not installed in a timely manner\n</li>\n</ul>\n<p>There are many resources, such as the NIST, that provide lists of <u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://www.nist.gov/itl/smallbusinesscyber/cybersecurity-basics/cybersecurity-risks\" rel=\"noopener noreferrer nofollow\">cybersecurity risks</a></span></span></u>. Additionally, the Open Web Application Security Project (OWASP) publishes a standard awareness document about the <u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://owasp.org/www-project-top-ten/\" rel=\"noopener noreferrer nofollow\">top 10 most critical security risks</a></span></span></u> to web applications, which is updated regularly.</p>\n<p><strong>Note:</strong> The OWASP\u2019s common attack types list contains three new risks for the years 2017 to 2021: insecure design, software and data integrity failures, and server-side request forgery. This update emphasizes the fact that security is a constantly evolving field. It also demonstrates the importance of staying up to date on current threat actor tactics and techniques, so you can be better prepared to manage these types of risks.</p>\n<p><img src=\"https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/szc-NuF5QlGxA_zoi9LvEg_f089df6d2f2b4fd0bf7ebd806ed63cf1_S33G012.png?expiry=1741910400000&amp;hmac=mVmA1Z9TF2NK4cdhIXjREpTKYnOABMHMDF4Qg4f10wI\" alt=\"Lists that compare the top 10 most common attack types between 2017 and 2021\" data-attachment-key=\"4DB3LZT9\" width=\"6517\" height=\"3371\"></p>\n<h3><strong><span style=\"color: inherit\">Vulnerabilities</span></strong></h3>\n<p>A <strong>vulnerability</strong> is a weakness that can be exploited by a threat. Therefore, organizations need to regularly inspect for vulnerabilities within their systems. Some vulnerabilities include:</p>\n<ul>\n<li>\n<strong>ProxyLogon:</strong> A pre-authenticated vulnerability that affects the Microsoft Exchange server. This means a threat actor can complete a user authentication process to deploy malicious code from a remote location.\n</li>\n<li>\n<strong>ZeroLogon:</strong> A vulnerability in Microsoft\u2019s Netlogon authentication protocol. An authentication protocol is a way to verify a person's identity. Netlogon is a service that ensures a user\u2019s identity before allowing access to a website's location.\n</li>\n<li>\n<strong>Log4Shell:</strong> Allows attackers to run Java code on someone else\u2019s computer or leak sensitive information. It does this by enabling a remote attacker to take control of devices connected to the internet and run malicious code.\n</li>\n<li>\n<strong>PetitPotam:</strong> Affects Windows New Technology Local Area Network (LAN) Manager (NTLM). It is a theft technique that allows a LAN-based attacker to initiate an authentication request.\n</li>\n<li>\n<strong>Security logging and monitoring failures:</strong> Insufficient logging and monitoring capabilities that result in attackers exploiting vulnerabilities without the organization knowing it\n</li>\n<li>\n<strong>Server-side request forgery:</strong> Allows attackers to manipulate a server-side application into accessing and updating backend resources. It can also allow threat actors to steal data.\n</li>\n</ul>\n<p>As an entry-level security analyst, you might work in vulnerability management, which is monitoring a system to identify and mitigate vulnerabilities. Although patches and updates may exist, if they are not applied, intrusions can still occur. For this reason, constant monitoring is important. The sooner an organization identifies a vulnerability and addresses it by patching it or updating their systems, the sooner it can be mitigated, reducing the organization\u2019s exposure to the vulnerability.</p>\n<p>To learn more about the vulnerabilities explained in this section of the reading, as well as other vulnerabilities, explore the <u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://nvd.nist.gov/vuln\" rel=\"noopener noreferrer nofollow\">NIST National Vulnerability Database</a></span></span></u> and <u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://www.cisa.gov/known-exploited-vulnerabilities-catalog\" rel=\"noopener noreferrer nofollow\">CISA Known Exploited Vulnerabilities Catalog</a></span></span></u>.</p>\n<h2><span style=\"color: inherit\">Key takeaways</span></h2>\n<p>In this reading, you learned about some risk management strategies and frameworks that can be used to develop organization-wide policies and processes to mitigate threats, risks, and vulnerabilities. You also learned about some of today\u2019s most common threats, risks, and vulnerabilities to business operations. Understanding these concepts can better prepare you to not only protect against, but also mitigate, the types of security-related issues that can harm organizations and people alike.</p>\n<h2><span style=\"color: inherit\">Resources for more information</span></h2>\n<p>To learn more, click the linked terms in this reading. Also, consider exploring the following sites:</p>\n<ul>\n<li>\n<u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://owasp.org/www-project-top-ten/\" rel=\"noopener noreferrer nofollow\">OWASP Top Ten</a></span></span></u>&nbsp;\n</li>\n<li>\n<u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://csrc.nist.gov/projects/risk-management/about-rmf\" rel=\"noopener noreferrer nofollow\">NIST RMF</a></span></span></u>\n</li>\n</ul>\n<p><span style=\"color: var(--cds-color-neutral-primary-invert)\"><span style=\"background-color: var(--cds-color-interactive-primary)\">Mark as completed</span></span></p>\n<p><span style=\"color: var(--cds-color-interactive-primary)\"><span style=\"background-color: transparent\">Like</span></span></p>\n<p><span style=\"color: var(--cds-color-interactive-primary)\"><span style=\"background-color: transparent\">Dislike</span></span></p>\n<p><span style=\"color: var(--cds-color-interactive-primary)\"><span style=\"background-color: transparent\">Report an issue</span></span></p>\n</div>",
                "tags": [],
                "collections": [
                    "V6FG9H4C"
                ],
                "relations": {},
                "dateAdded": "2025-03-12T11:56:14Z",
                "dateModified": "2025-03-12T12:09:19Z"
            }
        },
        {
            "key": "7G78YA4A",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/7G78YA4A",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/7G78YA4A",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "7G78YA4A",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>02 Use tools to protect business operations</h1>\n<p><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">This text expands on the tools cybersecurity professionals use, focusing on how they protect business operations:</span></span></p>\n<p><strong><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Programming:</span></span></strong></p>\n<ul>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Emphasizes automation through languages like Python to reduce manual work and errors.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Explains SQL's role in database interaction for efficient data retrieval.</span></span>\n</li>\n</ul>\n<p><strong><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Operating Systems:</span></span></strong></p>\n<ul>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Reinforces Linux's open-source nature and command-line interface.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Mentions other operating systems like macOS and Windows.</span></span>\n</li>\n</ul>\n<p><strong><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Web Vulnerability:</span></span></strong></p>\n<ul>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Defines web vulnerabilities and their potential exploitation.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Highlights the importance of OWASP Top 10 for staying informed about critical web application risks. </span></span><u><span style=\"color: var(--cds-color-blue-700)\"><span style=\"background-color: transparent\"><a href=\"https://owasp.org/www-project-top-ten/\" rel=\"noopener noreferrer nofollow\"><br>Open Web Application Security Project (OWASP) Top 10</a></span></span></u><span style=\"color: rgb(31, 31, 31)\"><span style=\"background-color: rgb(255, 255, 255)\">.</span></span>\n</li>\n</ul>\n<p><strong><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Antivirus Software:</span></span></strong></p>\n<ul>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Explains its function in preventing, detecting, and eliminating malware.</span></span>\n</li>\n</ul>\n<p><strong><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Intrusion Detection System (IDS):</span></span></strong></p>\n<ul>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Describes its role in monitoring system activity and detecting potential intrusions through network packet analysis.</span></span>\n</li>\n</ul>\n<p><strong><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Encryption:</span></span></strong></p>\n<ul>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Explains how it ensures data confidentiality by converting plaintext to ciphertext.</span></span>\n</li>\n<li>\n<p><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Distinguishes encoding from encryption.</span></span></p>\n<ul>\n<li>\nEncoding and encryption serve different purposes. Encoding uses a public conversion algorithm to enable systems that use different data representations to share information. &nbsp; &nbsp;\n</li>\n</ul>\n</li>\n</ul>\n<p><strong><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Penetration Testing (Pen Testing):</span></span></strong></p>\n<ul>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Defines it as a simulated attack to identify vulnerabilities in various systems.</span></span>\n</li>\n</ul>\n<p><strong><span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Key Takeaways:</span></span></strong></p>\n<ul>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Reinforces the importance of familiarity with various tools for effective cybersecurity analysis.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Tools increase efficiency.</span></span>\n</li>\n<li>\n<span style=\"color: rgb(27, 28, 29)\"><span style=\"background-color: none\">Organizations use different sets of tools.</span></span>\n</li>\n</ul>\n</div>",
                "tags": [],
                "collections": [
                    "FLXSHGQT"
                ],
                "relations": {},
                "dateAdded": "2025-03-05T16:17:41Z",
                "dateModified": "2025-03-05T16:24:07Z"
            }
        },
        {
            "key": "V6DAJSAR",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/V6DAJSAR",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/V6DAJSAR",
                    "type": "text/html"
                },
                "up": {
                    "href": "http://localhost:23119/api/users/11338754/items/L7NHC5MY",
                    "type": "application/json"
                },
                "enclosure": {
                    "href": "file:///home/schweizer/Zotero/storage/V6DAJSAR/munro-et-al-2024-the-handbook-of-data-science-and-ai.pdf",
                    "type": "application/pdf",
                    "title": "munro-et-al-2024-the-handbook-of-data-science-and-ai.pdf",
                    "length": 43132870
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "V6DAJSAR",
                "version": 0,
                "itemType": "attachment",
                "title": "munro-et-al-2024-the-handbook-of-data-science-and-ai",
                "parentItem": "L7NHC5MY",
                "linkMode": "imported_file",
                "contentType": "application/pdf",
                "charset": "",
                "filename": "munro-et-al-2024-the-handbook-of-data-science-and-ai.pdf",
                "tags": [],
                "relations": {},
                "dateAdded": "2025-02-24T11:19:11Z",
                "dateModified": "2025-02-24T11:19:11Z"
            }
        }
    ],
    "parsed_items_metadata": [
        {
            "itemKey": "GU6KSWN3",
            "itemType": "attachment",
            "itemTitle": "00 Cheat Sheet OWASP Application Security Risks",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L07 Diving Deeper into OWASP Risks"
                ]
            ]
        },
        {
            "itemKey": "9EXFDQXU",
            "itemType": "note",
            "itemTitle": "00 Summary and Glossary",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L07 Diving Deeper into OWASP Risks"
                ]
            ]
        },
        {
            "itemKey": "CHNP9PCD",
            "itemType": "attachment",
            "itemTitle": "06 Introduction to Cross-Site Scripting",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L07 Diving Deeper into OWASP Risks"
                ]
            ]
        },
        {
            "itemKey": "MMQDZD6T",
            "itemType": "note",
            "itemTitle": "05b Cross-Site Scripting (XSS)",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L07 Diving Deeper into OWASP Risks"
                ]
            ]
        },
        {
            "itemKey": "QR3CAJ8X",
            "itemType": "note",
            "itemTitle": "Query Parameterization for SQL Injection Prevention",
            "itemParentTitle": "04 Hands-on Lab Understanding SQL Injections",
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L07 Diving Deeper into OWASP Risks"
                ]
            ]
        },
        {
            "itemKey": "LZ2FWAWU",
            "itemType": "webpage",
            "itemTitle": "00 OWASP Web Security Testing Guide | OWASP Foundation",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L07 Diving Deeper into OWASP Risks"
                ]
            ]
        },
        {
            "itemKey": "WREFLS3I",
            "itemType": "note",
            "itemTitle": "SQL Injection Prevention",
            "itemParentTitle": "04 Hands-on Lab Understanding SQL Injections",
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L07 Diving Deeper into OWASP Risks"
                ]
            ]
        },
        {
            "itemKey": "PJCZW56M",
            "itemType": "attachment",
            "itemTitle": "PDF",
            "itemParentTitle": "04 Hands-on Lab Understanding SQL Injections",
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L07 Diving Deeper into OWASP Risks"
                ]
            ]
        },
        {
            "itemKey": "6B76GNU8",
            "itemType": "note",
            "itemTitle": "00 Summary",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L06 Introducing OWASP Top 10"
                ]
            ]
        },
        {
            "itemKey": "6WXATIN8",
            "itemType": "note",
            "itemTitle": "04 OWASP Top 7-10",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L06 Introducing OWASP Top 10"
                ]
            ]
        },
        {
            "itemKey": "IMID3CVI",
            "itemType": "note",
            "itemTitle": "03 OWASP Top 4-6: Insecure Design, Security Misconfiguration, and Vulnerable and Outdated Components",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L06 Introducing OWASP Top 10"
                ]
            ]
        },
        {
            "itemKey": "7I7AAJ5E",
            "itemType": "attachment",
            "itemTitle": "00 Digression OWASP-Top-10-for-LLMs-2023-slides-v1_1",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L06 Introducing OWASP Top 10"
                ]
            ]
        },
        {
            "itemKey": "XVKQSXH6",
            "itemType": "note",
            "itemTitle": "00 Digression: Dangers of Prompt Injection Attacks on LLM-based Chatbots",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L06 Introducing OWASP Top 10"
                ]
            ]
        },
        {
            "itemKey": "3LUXVEJU",
            "itemType": "note",
            "itemTitle": "02 OWASP Top 1-3: Broken Access Control, Cryptographic Failures, and Injection",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L06 Introducing OWASP Top 10"
                ]
            ]
        },
        {
            "itemKey": "JHRH59JZ",
            "itemType": "note",
            "itemTitle": "01 Intro to OWASP (Top 10) Sec Vulnerabilities",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L06 Introducing OWASP Top 10"
                ]
            ]
        },
        {
            "itemKey": "A9XKYQF3",
            "itemType": "note",
            "itemTitle": "00 Cheat Sheet: Security Testing and Mitigation Strategies",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L05 Implementing Key Analysis in Applications"
                ]
            ]
        },
        {
            "itemKey": "96BC9E2D",
            "itemType": "note",
            "itemTitle": "00 Summary and Glossary",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L05 Implementing Key Analysis in Applications"
                ]
            ]
        },
        {
            "itemKey": "3JHIAGVR",
            "itemType": "attachment",
            "itemTitle": "08 Hands-on Lab Evaluate Software Component Analysis",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L05 Implementing Key Analysis in Applications"
                ]
            ]
        },
        {
            "itemKey": "IJQEXH8F",
            "itemType": "note",
            "itemTitle": "07 Evaluate Software component analysis",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L05 Implementing Key Analysis in Applications"
                ]
            ]
        },
        {
            "itemKey": "L6EPPHT5",
            "itemType": "note",
            "itemTitle": "06 Software Component Analysis",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L05 Implementing Key Analysis in Applications"
                ]
            ]
        },
        {
            "itemKey": "V7L4KWR4",
            "itemType": "note",
            "itemTitle": "03 Demo: Evaluating Vulnerability Analysis",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L05 Implementing Key Analysis in Applications"
                ]
            ]
        },
        {
            "itemKey": "X2TXBWV8",
            "itemType": "note",
            "itemTitle": "02 Vulnerability Analysis",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L05 Implementing Key Analysis in Applications"
                ]
            ]
        },
        {
            "itemKey": "THR25489",
            "itemType": "attachment",
            "itemTitle": "05 Hands-on Lab Using Dynamic Analysis",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L04 Intro to Security Testing and Mitigation Strategies"
                ]
            ]
        },
        {
            "itemKey": "ASUU2VXR",
            "itemType": "note",
            "itemTitle": "01 Intro to Security Testing and Mitigation Strategies",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L04 Intro to Security Testing and Mitigation Strategies"
                ]
            ]
        },
        {
            "itemKey": "FJPHKFZJ",
            "itemType": "note",
            "itemTitle": "00 Summary and Glossary",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L03 Inspecting Security in Application Development"
                ]
            ]
        },
        {
            "itemKey": "IWZXFN9K",
            "itemType": "note",
            "itemTitle": "02 Threat Monitoring",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L03 Inspecting Security in Application Development"
                ]
            ]
        },
        {
            "itemKey": "EIF2CE8B",
            "itemType": "note",
            "itemTitle": "01 Vulnerability Scanning and Threat Modeling",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals",
                    "Collection depth=3: L03 Inspecting Security in Application Development"
                ]
            ]
        },
        {
            "itemKey": "38MVYV5Y",
            "itemType": "note",
            "itemTitle": "00 Course Glossary",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: DevOps",
                    "Collection depth=1: IBM Applied DevOps Engineering Professional Certificate",
                    "Collection depth=2: C07 Application Security for Developers and DevOps Professionals"
                ]
            ]
        },
        {
            "itemKey": "JM5NYIV5",
            "itemType": "note",
            "itemTitle": "01 Helpful cybersecurity resources",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity",
                    "Collection depth=2: C08 Put it to Work: Prepare for Cybersecurity Jobs",
                    "Collection depth=3: L09 Reliable sources go a long way"
                ]
            ]
        },
        {
            "itemKey": "TDYTZ4GQ",
            "itemType": "note",
            "itemTitle": "02 Automating Tasks in CI/CD",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity",
                    "Collection depth=2: C07 Automate Cybersecurity Tasks with Python",
                    "Collection depth=3: L10 Python for automation"
                ]
            ]
        },
        {
            "itemKey": "295LAGP4",
            "itemType": "note",
            "itemTitle": "03 Prevent injection attacks",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity",
                    "Collection depth=2: C05 Assets, Threats, and Vulnerabilities",
                    "Collection depth=3: L12 Web-based exploits"
                ]
            ]
        },
        {
            "itemKey": "G5AA59DI",
            "itemType": "note",
            "itemTitle": "05 The OWASP Top 10",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity",
                    "Collection depth=2: C05 Assets, Threats, and Vulnerabilities",
                    "Collection depth=3: L07 Flaws in the system"
                ]
            ]
        },
        {
            "itemKey": "UXP7UD2C",
            "itemType": "note",
            "itemTitle": "02 More about OWASP security principles",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity",
                    "Collection depth=2: C02 Play It Safe: Manage Security Risks",
                    "Collection depth=3: L06 OWASP principles and security audits"
                ]
            ]
        },
        {
            "itemKey": "G3YD7N5H",
            "itemType": "note",
            "itemTitle": "01 OWASP security principles",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity",
                    "Collection depth=2: C02 Play It Safe: Manage Security Risks",
                    "Collection depth=3: L06 OWASP principles and security audits"
                ]
            ]
        },
        {
            "itemKey": "WZXUDE6Z",
            "itemType": "attachment",
            "itemTitle": "Google-Cybersecurity-Certificate-glossary",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity"
                ]
            ]
        },
        {
            "itemKey": "UHHZWH7W",
            "itemType": "note",
            "itemTitle": "05 Manage common threats, risks, and vulnerabilities",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity",
                    "Collection depth=2: C02 Play It Safe: Manage Security Risks",
                    "Collection depth=3: L02 Navigate threats, risks, and vulnerabilities"
                ]
            ]
        },
        {
            "itemKey": "7G78YA4A",
            "itemType": "note",
            "itemTitle": "02 Use tools to protect business operations",
            "itemParentTitle": null,
            "itemCollectionNames": [
                [
                    "Collection depth=0: Cybersecurity",
                    "Collection depth=1: Google Cybersecurity",
                    "Collection depth=2: C01 Foundations of Cybersecurity",
                    "Collection depth=3: L08 Core cybersecurity knowledge and skills"
                ]
            ]
        },
        {
            "itemKey": "V6DAJSAR",
            "itemType": "attachment",
            "itemTitle": "munro-et-al-2024-the-handbook-of-data-science-and-ai",
            "itemParentTitle": "The handbook of data science and AI: generate value from data with machine learning and data analytics",
            "itemCollectionNames": [
                [
                    "Collection depth=0: Machine Learning",
                    "Collection depth=1: Books"
                ]
            ]
        }
    ]
}