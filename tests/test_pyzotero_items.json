{
    "notes":
            [{
            "key": "XGQHZEGZ",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/XGQHZEGZ",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/XGQHZEGZ",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "XGQHZEGZ",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>02 Quickstart: For Server Developers</h1>\n<ul>\n<li>\nBuild a simple MCP weather server with <code>get-alerts</code> and <code>get-forecast</code> tools.\n</li>\n<li>\nConnect the server to Claude for Desktop (an MCP host).\n</li>\n<li>\nMCP servers can provide Resources, Tools, and Prompts. This tutorial focuses on Tools.\n</li>\n<li>\nRequires Python 3.10+, MCP SDK 1.2.0+, and familiarity with Python and LLMs like Claude.\n</li>\n<li>\nUse <code>uv</code> to set up the Python environment and install dependencies.\n</li>\n<li>\nThe server interacts with the National Weather Service (NWS) API.\n</li>\n<li>\n<code>FastMCP</code> framework simplifies building MCP servers in Python.\n</li>\n<li>\nTool definitions are automatically generated using type hints and docstrings.\n</li>\n<li>\nClaude for Desktop needs to be configured with the server details to use the tools.\n</li>\n<li>\nUsers can interact with the server's tools through commands in Claude for Desktop.\n</li>\n</ul>\n<h1>Quickstart for Server Developers</h1>\n<h2>Introduction</h2>\n<p>This tutorial guides server developers on how to build their own server to be used with MCP (Machine Communication Protocol) clients like Claude for Desktop. It demonstrates the process by building a simple MCP weather server that can fetch weather forecasts and severe weather alerts.</p>\n<h2>What We'll Be Building</h2>\n<p>The goal is to create a server that exposes two main tools: <code>get-alerts</code> and <code>get-forecast</code>. This server will then be connected to an MCP host, in this case, Claude for Desktop, allowing the LLM to access real-time weather information. While Claude for Desktop is used for simplicity, servers built using this protocol can connect to various other clients.</p>\n<h2>Core MCP Concepts</h2>\n<p>MCP servers offer three primary capabilities:</p>\n<ul>\n<li>\n<strong>Resources:</strong> These are file-like data that clients can read, such as API responses or file contents.\n</li>\n<li>\n<strong>Tools:</strong> These are functions that the LLM can call (with user approval) to perform specific actions. This tutorial focuses mainly on building tools.\n</li>\n<li>\n<strong>Prompts:</strong> These are pre-written templates designed to help users accomplish specific tasks more easily.\n</li>\n</ul>\n<h2>Prerequisites</h2>\n<p>Before starting, ensure you have the following:</p>\n<ul>\n<li>\nFamiliarity with Python.\n</li>\n<li>\nUnderstanding of LLMs like Claude.\n</li>\n<li>\n<p>System Requirements:</p>\n<ul>\n<li>\nPython 3.10 or higher installed.\n</li>\n<li>\nPython MCP SDK version 1.2.0 or higher.\n</li>\n</ul>\n</li>\n</ul>\n<h2>Setting Up Your Environment</h2>\n<p>The first step is to set up your development environment. This involves installing <code>uv</code>, a fast Python package installer and resolver, and creating a new Python project.</p>\n<ol>\n<li>\n<p><strong>Install </strong><code>uv</code>:</p>\n<ul>\n<li>\n<p><strong>MacOS/Linux:</strong></p>\n<pre>curl -LsSf https://astral.sh/uv/install.sh | sh</pre>\n</li>\n<li>\n<strong>Windows:</strong> Follow the instructions from the provided link.\n</li>\n<li>\nRestart your terminal after installation.\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Create and Set Up Project:</strong></p>\n<ul>\n<li>\n<p>Create a new directory for your project:</p>\n<pre>uv init weather\ncd weather</pre>\n</li>\n<li>\n<p>Create and activate a virtual environment:</p>\n<pre>uv venv\nsource .venv/bin/activate</pre>\n</li>\n<li>\n<p>Install necessary dependencies:</p>\n<pre>uv add \"mcp[cli]\" httpx</pre>\n</li>\n<li>\n<p>Create the main server file:</p>\n<pre>touch weather.py</pre>\n</li>\n</ul>\n</li>\n</ol>\n<h2>Building Your Server</h2>\n<h3>Importing Packages and Setting Up the Instance</h3>\n<p>In your <code>weather.py</code> file, start by importing the required packages and initializing the <code>FastMCP</code> server.</p>\n<pre>from typing import Any\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\n\n# Initialize FastMCP server\nmcp = FastMCP(\"weather\")\n\n# Constants\nNWS_API_BASE = \"https://api.weather.gov\"\nUSER_AGENT = \"weather-app/1.0\"</pre>\n<p>The <code>FastMCP</code> class simplifies tool creation by using Python type hints and docstrings to automatically generate tool definitions.</p>\n<h3>Helper Functions</h3>\n<p>Next, define helper functions to interact with the National Weather Service (NWS) API and format the responses.</p>\n<pre>async def make_nws_request(url: str) -&gt; dict[str, Any] | None:\n &nbsp; &nbsp;\"\"\"Make a request to the NWS API with proper error handling.\"\"\"\n &nbsp; &nbsp;headers = {\n &nbsp; &nbsp; &nbsp; &nbsp;\"User-Agent\": USER_AGENT,\n &nbsp; &nbsp; &nbsp; &nbsp;\"Accept\": \"application/geo+json\"\n &nbsp; &nbsp;}\n &nbsp; &nbsp;async with httpx.AsyncClient() as client:\n &nbsp; &nbsp; &nbsp; &nbsp;try:\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;response = await client.get(url, headers=headers, timeout=30.0)\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;response.raise_for_status()\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return response.json()\n &nbsp; &nbsp; &nbsp; &nbsp;except Exception:\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return None\n\ndef format_alert(feature: dict) -&gt; str:\n &nbsp; &nbsp;\"\"\"Format an alert feature into a readable string.\"\"\"\n &nbsp; &nbsp;props = feature[\"properties\"]\n &nbsp; &nbsp;return f\"\"\"Event: {props.get('event', 'Unknown')}\nArea: {props.get('areaDesc', 'Unknown')}\nSeverity: {props.get('severity', 'Unknown')}\nDescription: {props.get('description', 'No description available')}\nInstructions: {props.get('instruction', 'No specific instructions provided')}\"\"\"</pre>\n<h3>Implementing Tool Execution</h3>\n<p>Implement the logic for the <code>get-alerts</code> and <code>get-forecast</code> tools using the <code>@mcp.tool()</code> decorator.</p>\n<pre>@mcp.tool()\nasync def get_alerts(state: str) -&gt; str:\n &nbsp; &nbsp;\"\"\"Get weather alerts for a US state.\n &nbsp; &nbsp;Args:\n &nbsp; &nbsp; &nbsp; &nbsp;state: Two-letter US state code (e.g. CA, NY)\n &nbsp; &nbsp;\"\"\"\n &nbsp; &nbsp;url = f\"{NWS_API_BASE}/alerts/active/area/{state}\"\n &nbsp; &nbsp;data = await make_nws_request(url)\n &nbsp; &nbsp;if not data or \"features\" not in data:\n &nbsp; &nbsp; &nbsp; &nbsp;return \"Unable to fetch alerts or no alerts found.\"\n &nbsp; &nbsp;if not data[\"features\"]:\n &nbsp; &nbsp; &nbsp; &nbsp;return \"No active alerts for this state.\"\n &nbsp; &nbsp;alerts = [format_alert(feature) for feature in data[\"features\"]]\n &nbsp; &nbsp;return \"\\n---\\n\".join(alerts)\n\n@mcp.tool()\nasync def get_forecast(latitude: float, longitude: float) -&gt; str:\n &nbsp; &nbsp;\"\"\"Get weather forecast for a location.\n &nbsp; &nbsp;Args:\n &nbsp; &nbsp; &nbsp; &nbsp;latitude: Latitude of the location\n &nbsp; &nbsp; &nbsp; &nbsp;longitude: Longitude of the location\n &nbsp; &nbsp;\"\"\"\n &nbsp; &nbsp;# First get the forecast grid endpoint\n &nbsp; &nbsp;points_url = f\"{NWS_API_BASE}/points/{latitude},{longitude}\"\n &nbsp; &nbsp;points_data = await make_nws_request(points_url)\n &nbsp; &nbsp;if not points_data:\n &nbsp; &nbsp; &nbsp; &nbsp;return \"Unable to fetch forecast data for this location.\"\n &nbsp; &nbsp;# Get the forecast URL from the points response\n &nbsp; &nbsp;forecast_url = points_data[\"properties\"][\"forecast\"]\n &nbsp; &nbsp;forecast_data = await make_nws_request(forecast_url)\n &nbsp; &nbsp;if not forecast_data:\n &nbsp; &nbsp; &nbsp; &nbsp;return \"Unable to fetch detailed forecast.\"\n &nbsp; &nbsp;# Format the periods into a readable forecast\n &nbsp; &nbsp;periods = forecast_data[\"properties\"][\"periods\"]\n &nbsp; &nbsp;forecasts = []\n &nbsp; &nbsp;for period in periods[:5]: &nbsp;# Only show next 5 periods\n &nbsp; &nbsp; &nbsp; &nbsp;forecast = f\"\"\"{period['name']}:\nTemperature: {period['temperature']}\u00b0{period['temperatureUnit']}\nWind: {period['windSpeed']} {period['windDirection']}\nForecast: {period['detailedForecast']}\"\"\"\n &nbsp; &nbsp; &nbsp; &nbsp;forecasts.append(forecast)\n &nbsp; &nbsp;return \"\\n---\\n\".join(forecasts)</pre>\n<h2>Running the Server</h2>\n<p>Finally, add the code to initialize and run the server when the script is executed directly.</p>\n<pre>if __name__ == \"__main__\":\n &nbsp; &nbsp;# Initialize and run the server\n &nbsp; &nbsp;mcp.run(transport='stdio')</pre>\n<p>You can run your server using the command <code>uv run weather.py</code>.</p>\n<h2>Testing Your Server with Claude for Desktop</h2>\n<p>To test your server, you need to configure Claude for Desktop to recognize and connect to it.</p>\n<ol>\n<li>\n<strong>Install or Update Claude for Desktop:</strong> Ensure you have Claude for Desktop installed and updated to the latest version.\n</li>\n<li>\n<p><strong>Configure Claude for Desktop:</strong></p>\n<ul>\n<li>\nOpen the Claude for Desktop App configuration file located at <code>~/Library/Application Support/Claude/claude_desktop_config.json</code> (MacOS/Linux) or the equivalent location on Windows. Create the file if it doesn't exist.\n</li>\n<li>\n<p>Add your server configuration under the <code>mcpServers</code> key. For the weather server, it might look like this:</p>\n<pre>{\n &nbsp; &nbsp;\"mcpServers\": {\n &nbsp; &nbsp; &nbsp; &nbsp;\"weather\": {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"command\": \"uv\",\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"args\": [\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"--directory\",\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather\",\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"run\",\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"weather.py\"\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;]\n &nbsp; &nbsp; &nbsp; &nbsp;}\n &nbsp; &nbsp;}\n}</pre>\n<ul>\n<li>\nReplace <code>/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather</code> with the actual absolute path to the parent directory of your <code>weather</code> project.\n</li>\n<li>\nYou might need to provide the full path to the <code>uv</code> executable in the <code>command</code> field. Use <code>which uv</code> (MacOS/Linux) or <code>where uv</code> (Windows) to find it.\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Restart Claude for Desktop:</strong> Save the configuration file and restart Claude for Desktop.\n</li>\n<li>\n<p><strong>Test with Commands:</strong></p>\n<ul>\n<li>\nLook for the hammer icon in Claude for Desktop, which indicates that MCP servers are configured.\n</li>\n<li>\nClicking the hammer icon should display the <code>get-alerts</code> and <code>get-forecast</code> tools.\n</li>\n<li>\n<p>You can now test the server by asking questions like:</p>\n<ul>\n<li>\n<code>What\u2019s the weather in Sacramento?</code>\n</li>\n<li>\n<code>What are the active weather alerts in Texas?</code>\n</li>\n</ul>\n</li>\n</ul>\n<p>Note that the weather service used is the US National Weather Service, so queries should be for US locations.</p>\n</li>\n</ol>\n<h2>What\u2019s Happening Under the Hood</h2>\n<p>When you ask a question in Claude for Desktop that requires information from your weather server:</p>\n<ol>\n<li>\nThe client (Claude for Desktop) sends your question to Claude.\n</li>\n<li>\nClaude analyzes the available tools and determines if any of them can help answer the question.\n</li>\n<li>\nIf a tool is deemed necessary, the client executes the chosen tool through your MCP server.\n</li>\n<li>\nYour server processes the request (e.g., fetches data from the NWS API) and sends the results back to Claude.\n</li>\n<li>\nClaude uses the results to formulate a natural language response, which is then displayed to you.\n</li>\n</ol>\n</div>",
                "test_note_title": "02 Quickstart: For Server Developers",
                "tags": [],
                "collections": [
                    "8NXHKXXC"
                ],
                "relations": {},
                "dateAdded": "2025-04-08T09:35:03Z",
                "dateModified": "2025-04-08T09:37:32Z"
            }
        },
        {
            "key": "93JYGXDW",
            "version": 0,
            "library": {
                "type": "user",
                "id": 11338754,
                "name": "My Library",
                "links": {
                    "self": {
                        "href": "http://localhost:23119/api/users/11338754",
                        "type": "application/json"
                    },
                    "alternate": {
                        "href": "https://www.zotero.org/users/11338754",
                        "type": "text/html"
                    }
                }
            },
            "links": {
                "self": {
                    "href": "http://localhost:23119/api/users/11338754/items/93JYGXDW",
                    "type": "application/json"
                },
                "alternate": {
                    "href": "https://www.zotero.org/users/11338754/items/93JYGXDW",
                    "type": "text/html"
                }
            },
            "meta": {
                "numChildren": 0
            },
            "data": {
                "key": "93JYGXDW",
                "version": 0,
                "itemType": "note",
                "note": "<div data-schema-version=\"9\"><h1>01 Introduction to MCP (Model Context Protocol)</h1>\n<p><span style=\"color: rgb(62, 62, 62)\">MCP is an open protocol that standardizes how applications provide context to LLMs.&nbsp;</span></p>\n<h2>Why MCP?</h2>\n<p><span style=\"color: rgb(62, 62, 62)\">LLMs frequently need to integrate with data and tools, and MCP provides:</span></p>\n<ul>\n<li>\npre-built integrations that the LLM can plug-into\n</li>\n<li>\nvendor flexibity\n</li>\n<li>\nsecure implementation\n</li>\n</ul>\n<h2>General architecture</h2>\n<p><span style=\"color: rgb(62, 62, 62)\">LLMs frequently need to integrate with data and tools, and MCP provides:</span></p>\n<p><img alt=\"\" data-attachment-key=\"MA5BNJNN\" width=\"730\" height=\"514\"></p>\n<ul>\n<li>\n<strong><span style=\"color: rgb(var(--gray-900))\">MCP Hosts</span></strong>: Programs like Claude Desktop, IDEs, or AI tools that want to access data through MCP\n</li>\n<li>\n<strong><span style=\"color: rgb(var(--gray-900))\">MCP Clients</span></strong>: Protocol clients that maintain 1:1 connections with servers\n</li>\n<li>\n<strong><span style=\"color: rgb(var(--gray-900))\">MCP Servers</span></strong>: Lightweight programs that each expose specific capabilities through the standardized Model Context Protocol\n</li>\n<li>\n<strong><span style=\"color: rgb(var(--gray-900))\">Local Data Sources</span></strong>: Your computer\u2019s files, databases, and services that MCP servers can securely access\n</li>\n<li>\n<strong><span style=\"color: rgb(var(--gray-900))\">Remote Services</span></strong>: External systems available over the internet (e.g., through APIs) that MCP servers can connect to\n</li>\n</ul>\n</div>",
                "test_note_title": "01 Introduction to MCP (Model Context Protocol)",
                "tags": [],
                "collections": [
                    "8NXHKXXC"
                ],
                "relations": {},
                "dateAdded": "2025-04-08T09:30:37Z",
                "dateModified": "2025-04-09T06:47:50Z"
            }
        }
    ]
}